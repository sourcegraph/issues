import { CampaignState } from './graphql/schema'
import { OrganizationInvitationResponseType } from './graphql/schema'
import { EventSource } from './graphql/schema'
import { RepositoryPermission } from './graphql/schema'
import { ChangesetState } from './graphql/schema'
import { ChangesetExternalState } from './graphql/schema'
import { ChangesetReviewState } from './graphql/schema'
import { ChangesetCheckState } from './graphql/schema'
import { SymbolKind } from './graphql/schema'
import { DiagnosticSeverity } from './graphql/schema'
import { ExternalServiceKind } from './graphql/schema'
import { GitRefType } from './graphql/schema'
import { GitObjectType } from './graphql/schema'
import { GitRefOrder } from './graphql/schema'
import { DiffHunkLineType } from './graphql/schema'
import { LSIFUploadState } from './graphql/schema'
import { LSIFIndexState } from './graphql/schema'
import { RepositoryOrderBy } from './graphql/schema'
import { UserActivePeriod } from './graphql/schema'
import { SearchVersion } from './graphql/schema'
import { SearchPatternType } from './graphql/schema'
import { AlertType } from './graphql/schema'
import { UserEvent } from './graphql/schema'
import { ChangesetSpecType } from './graphql/schema'
export type Maybe<T> = T | null
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] }
/* This is an autogenerated file. Do not edit this file directly! */

export interface SharedGraphQlOperations {
    /** shared/src/backend/repo.ts */
    ResolveRawRepoName: (variables: ResolveRawRepoNameVariables) => ResolveRawRepoNameResult

    /** shared/src/extensions/helpers.ts */
    Extensions: (variables: ExtensionsVariables) => ExtensionsResult

    /** shared/src/settings/edit.ts */
    ViewerSettings: (variables: ViewerSettingsVariables) => ViewerSettingsResult

    /** shared/src/settings/edit.ts */
    EditSettings: (variables: EditSettingsVariables) => EditSettingsResult

    /** shared/src/settings/edit.ts */
    OverwriteSettings: (variables: OverwriteSettingsVariables) => OverwriteSettingsResult
}
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
    ID: string
    String: string
    Boolean: boolean
    Int: number
    Float: number
    DateTime: string
    JSONCString: string
    JSONValue: unknown
    GitObjectID: string
}

export interface AddExternalServiceInput {
    kind: ExternalServiceKind
    displayName: Scalars['String']
    config: Scalars['String']
}

export { AlertType }

export { CampaignState }

export { ChangesetCheckState }

export { ChangesetExternalState }

export { ChangesetReviewState }

export { ChangesetSpecType }

export { ChangesetState }

export interface ConfigurationEdit {
    keyPath: Array<KeyPathSegment>
    value?: Maybe<Scalars['JSONValue']>
    valueIsJSONCEncodedString?: Maybe<Scalars['Boolean']>
}

export { DiagnosticSeverity }

export { DiffHunkLineType }

export { EventSource }

export { ExternalServiceKind }

export { GitObjectType }

export { GitRefOrder }

export { GitRefType }

export interface KeyPathSegment {
    property?: Maybe<Scalars['String']>
    index?: Maybe<Scalars['Int']>
}

export { LSIFIndexState }

export { LSIFUploadState }

export interface MarkdownOptions {
    alwaysNil?: Maybe<Scalars['String']>
}

export { OrganizationInvitationResponseType }

export interface ProductLicenseInput {
    tags: Array<Scalars['String']>
    userCount: Scalars['Int']
    expiresAt: Scalars['Int']
}

export interface ProductSubscriptionInput {
    billingPlanID: Scalars['String']
    userCount: Scalars['Int']
}

export { RepositoryOrderBy }

export { RepositoryPermission }

export { SearchPatternType }

export { SearchVersion }

export interface SettingsEdit {
    keyPath: Array<KeyPathSegment>
    value?: Maybe<Scalars['JSONValue']>
    valueIsJSONCEncodedString?: Maybe<Scalars['Boolean']>
}

export interface SettingsMutationGroupInput {
    subject: Scalars['ID']
    lastID?: Maybe<Scalars['Int']>
}

export interface SurveySubmissionInput {
    email?: Maybe<Scalars['String']>
    score: Scalars['Int']
    reason?: Maybe<Scalars['String']>
    better?: Maybe<Scalars['String']>
}

export { SymbolKind }

export interface UpdateExternalServiceInput {
    id: Scalars['ID']
    displayName?: Maybe<Scalars['String']>
    config?: Maybe<Scalars['String']>
}

export { UserActivePeriod }

export { UserEvent }

export interface UserPermission {
    bindID: Scalars['String']
    permission?: Maybe<RepositoryPermission>
}

export type ResolveRawRepoNameVariables = Exact<{
    repoName: Scalars['String']
}>

export type ResolveRawRepoNameResult = { repository: Maybe<{ uri: string; mirrorInfo: { cloned: boolean } }> }

export type ExtensionsVariables = Exact<{
    first: Scalars['Int']
    prioritizeExtensionIDs: Array<Scalars['String']>
}>

export type ExtensionsResult = {
    extensionRegistry: {
        extensions: {
            nodes: Array<{
                id: string
                extensionID: string
                url: string
                viewerCanAdminister: boolean
                manifest: Maybe<{ raw: string }>
            }>
        }
    }
}

export type SettingsCascadeFields = {
    final: string
    subjects: Array<
        | {
              __typename: 'User'
              username: string
              displayName: Maybe<string>
              id: string
              settingsURL: Maybe<string>
              viewerCanAdminister: boolean
              latestSettings: Maybe<{ id: number; contents: string }>
          }
        | {
              __typename: 'Org'
              name: string
              displayName: Maybe<string>
              id: string
              settingsURL: Maybe<string>
              viewerCanAdminister: boolean
              latestSettings: Maybe<{ id: number; contents: string }>
          }
        | {
              __typename: 'Site'
              siteID: string
              id: string
              settingsURL: Maybe<string>
              viewerCanAdminister: boolean
              latestSettings: Maybe<{ id: number; contents: string }>
          }
        | {
              __typename: 'DefaultSettings'
              id: string
              settingsURL: Maybe<string>
              viewerCanAdminister: boolean
              latestSettings: Maybe<{ id: number; contents: string }>
          }
    >
}

export type ViewerSettingsVariables = Exact<{ [key: string]: never }>

export type ViewerSettingsResult = { viewerSettings: SettingsCascadeFields }

export type EditSettingsVariables = Exact<{
    subject: Scalars['ID']
    lastID: Maybe<Scalars['Int']>
    edit: ConfigurationEdit
}>

export type EditSettingsResult = {
    configurationMutation: Maybe<{ editConfiguration: Maybe<{ empty: Maybe<{ alwaysNil: Maybe<string> }> }> }>
}

export type OverwriteSettingsVariables = Exact<{
    subject: Scalars['ID']
    lastID: Maybe<Scalars['Int']>
    contents: Scalars['String']
}>

export type OverwriteSettingsResult = {
    settingsMutation: Maybe<{ overwriteSettings: Maybe<{ empty: Maybe<{ alwaysNil: Maybe<string> }> }> }>
}
