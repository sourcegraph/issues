/* eslint-disable */
/* This is an autogenerated file. Do not edit this file directly! */
export interface SharedGQLOperations {
    ResolveRawRepoName/*src/backend/repo.ts*/: (input: ResolveRawRepoNameInput) => ResolveRawRepoNameOutput;
    Extensions/*src/extensions/helpers.ts*/: (input: ExtensionsInput) => ExtensionsOutput;
    EditSettings/*src/settings/edit.ts*/: (input: EditSettingsInput) => EditSettingsOutput;
    OverwriteSettings/*src/settings/edit.ts*/: (input: OverwriteSettingsInput) => OverwriteSettingsOutput;
    ExternalServicesForTests/*src/testing/driver.ts*/: (input: ExternalServicesForTestsInput) => ExternalServicesForTestsOutput;
    SiteForTests/*src/testing/driver.ts*/: (input: SiteForTestsInput) => SiteForTestsOutput;
    UpdateSiteConfigurationForTests/*src/testing/driver.ts*/: (input: UpdateSiteConfigurationForTestsInput) => UpdateSiteConfigurationForTestsOutput;
    UserSettingsForTests/*src/testing/driver.ts*/: (input: UserSettingsForTestsInput) => UserSettingsForTestsOutput;
    OverwriteSettingsForTests/*src/testing/driver.ts*/: (input: OverwriteSettingsForTestsInput) => OverwriteSettingsForTestsOutput;
}
export type ResolveRawRepoNameInput = {
    repoName: string;
};
export type ResolveRawRepoNameOutput = {
    repository: ({
        uri: string;
        mirrorInfo: {
            cloned: boolean;
        };
    }) | null;
};
export type ExtensionsInput = {
    first: number;
    prioritizeExtensionIDs: string[];
};
export type ExtensionsOutput = {
    extensionRegistry: {
        extensions: {
            nodes: ({
                id: string;
                extensionID: string;
                url: string;
                manifest: ({
                    raw: string;
                }) | null;
                viewerCanAdminister: boolean;
            })[];
        };
    };
};
export type EditSettingsInput = {
    subject: string;
    lastID: number | null;
    edit: {
        keyPath: ({
            property: string | null;
            index: number | null;
        })[];
        value: any | null;
        valueIsJSONCEncodedString: boolean | null;
    };
};
export type EditSettingsOutput = {
    configurationMutation: ({
        editConfiguration: ({
            empty: ({
                alwaysNil: string | null;
            }) | null;
        }) | null;
    }) | null;
};
export type OverwriteSettingsInput = {
    subject: string;
    lastID: number | null;
    contents: string;
};
export type OverwriteSettingsOutput = {
    settingsMutation: ({
        overwriteSettings: ({
            empty: ({
                alwaysNil: string | null;
            }) | null;
        }) | null;
    }) | null;
};
export type ExternalServicesForTestsInput = {};
export type ExternalServicesForTestsOutput = {
    externalServices: {
        totalCount: number;
    };
};
export type SiteForTestsInput = {};
export type SiteForTestsOutput = {
    site: {
        id: string;
        configuration: {
            id: number;
            effectiveContents: any;
            validationMessages: string[];
        };
    };
};
export type UpdateSiteConfigurationForTestsInput = {
    lastID: number;
    input: string;
};
export type UpdateSiteConfigurationForTestsOutput = {
    updateSiteConfiguration: boolean;
};
export type UserSettingsForTestsInput = {};
export type UserSettingsForTestsOutput = {
    currentUser: ({
        id: string;
        latestSettings: ({
            id: number;
            contents: any;
        }) | null;
    }) | null;
};
export type OverwriteSettingsForTestsInput = {
    subject: string;
    lastID: number | null;
    contents: string;
};
export type OverwriteSettingsForTestsOutput = {
    settingsMutation: ({
        overwriteSettings: ({
            empty: ({
                alwaysNil: string | null;
            }) | null;
        }) | null;
    }) | null;
};
