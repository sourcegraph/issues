// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sourcegraph/sourcegraph/cmd/gitserver/server (interfaces: IConfig,IGitoliteClient)

// Package mock_server is a generated GoMock package.
package mock_server

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	gitolite "github.com/sourcegraph/sourcegraph/pkg/extsvc/gitolite"
	schema "github.com/sourcegraph/sourcegraph/schema"
	reflect "reflect"
)

// MockIConfig is a mock of IConfig interface
type MockIConfig struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigMockRecorder
}

// MockIConfigMockRecorder is the mock recorder for MockIConfig
type MockIConfigMockRecorder struct {
	mock *MockIConfig
}

// NewMockIConfig creates a new mock instance
func NewMockIConfig(ctrl *gomock.Controller) *MockIConfig {
	mock := &MockIConfig{ctrl: ctrl}
	mock.recorder = &MockIConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIConfig) EXPECT() *MockIConfigMockRecorder {
	return m.recorder
}

// Gitolite mocks base method
func (m *MockIConfig) Gitolite(arg0 context.Context) ([]*schema.GitoliteConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gitolite", arg0)
	ret0, _ := ret[0].([]*schema.GitoliteConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gitolite indicates an expected call of Gitolite
func (mr *MockIConfigMockRecorder) Gitolite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gitolite", reflect.TypeOf((*MockIConfig)(nil).Gitolite), arg0)
}

// MockIGitoliteClient is a mock of IGitoliteClient interface
type MockIGitoliteClient struct {
	ctrl     *gomock.Controller
	recorder *MockIGitoliteClientMockRecorder
}

// MockIGitoliteClientMockRecorder is the mock recorder for MockIGitoliteClient
type MockIGitoliteClientMockRecorder struct {
	mock *MockIGitoliteClient
}

// NewMockIGitoliteClient creates a new mock instance
func NewMockIGitoliteClient(ctrl *gomock.Controller) *MockIGitoliteClient {
	mock := &MockIGitoliteClient{ctrl: ctrl}
	mock.recorder = &MockIGitoliteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGitoliteClient) EXPECT() *MockIGitoliteClientMockRecorder {
	return m.recorder
}

// ListRepos mocks base method
func (m *MockIGitoliteClient) ListRepos(arg0 context.Context, arg1 string) ([]*gitolite.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepos", arg0, arg1)
	ret0, _ := ret[0].([]*gitolite.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepos indicates an expected call of ListRepos
func (mr *MockIGitoliteClientMockRecorder) ListRepos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepos", reflect.TypeOf((*MockIGitoliteClient)(nil).ListRepos), arg0, arg1)
}
