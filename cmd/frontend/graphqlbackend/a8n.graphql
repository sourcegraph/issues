# source: cmd/frontend/graphqlbackend/a8n.graphql

# A valid JSONC value, encoded as a string, with comments and trailing commas allowed.
scalar JSONCString

extend type Mutation {
    # Edit a comment. The edited comment is returned.
    editComment(input: EditCommentInput!): Comment!

    # Force-refresh a repository's threads from external services. Threads are automatically
    # refreshed on a regular basis, and this mutation should not usually be necessary.
    forceRefreshRepositoryThreads(repository: ID!): Repository!

    # Create a campaign in a namespace. The newly created campaign is returned.
    createCampaign(input: CreateCampaignInput!): Campaign!

    # Update a campaign. The updated campaign is returned.
    updateCampaign(input: UpdateCampaignInput!): Campaign!

    # Force-refresh a campaign, including the external states of all of the campaign's threads.
    # Campaigns are automatically refreshed on a regular basis, and this mutation should not usually
    # be necessary.
    forceRefreshCampaign(campaign: ID!): Campaign!

    # Delete a campaign. All threads that were associated with or created by this campaign remain
    # (and are not deleted when the campaign is deleted).
    deleteCampaign(campaign: ID!): EmptyResponse

    # Add threads to a campaign.
    addThreadsToCampaign(campaign: ID!, threads: [ID!]!): EmptyResponse

    # Remove threads from a campaign.
    removeThreadsFromCampaign(campaign: ID!, threads: [ID!]!): EmptyResponse
}

extend type Query {
    # A list of namespaces affiliated with the viewer.
    viewerNamespaces: [Namespace!]!

    # A list of threads.
    threads(
        # Returns the first n threads from the list.
        first: Int

        # Only include threads matching these filters.
        filters: ThreadFilters
    ): ThreadConnection!

    # A list of campaigns.
    campaigns(
        # Returns the first n campaigns from the list.
        first: Int
        # Returns campaigns that contain this object (such as a thread).
        object: ID
    ): CampaignConnection!
}

# An object that can be labeled.
interface Labelable {
    # A list of labels associated with this object.
    labels(
        # Returns the first n labels from the list.
        first: Int
    ): LabelConnection!
}

extend type GitCommit {
    # The status of the commit, if any.
    status: CommitStatus
}

# A namespace is a container for certain types of data and settings, such as a user or organization.
extend interface Namespace {
    # The campaigns in this namespace.
    campaigns(
        # Return the first n campaigns from the list.
        first: Int
    ): CampaignConnection!
}

extend type User {
    # The campaigns owned by this user.
    campaigns(
        # Return the first n campaigns from the list.
        first: Int
    ): CampaignConnection!
}

extend type Org {
    # The campaigns owned by this organization.
    campaigns(
        # Return the first n campaigns from the list.
        first: Int
    ): CampaignConnection!
}

# A label that can be applied to other objects.
type Label {
    # The name of this label.
    name: String!

    # The hex color code for the label, without the '#' prefix. For example, "cdf6ee".
    color: String!
}

# A list of labels.
type LabelConnection {
    # A list of labels.
    nodes: [Label!]!

    # The total number of labels in the connection.
    totalCount: Int!

    # Pagination information.
    pageInfo: PageInfo!
}

# An object that can perform actions.
union Actor = User | Org | ExternalActor

# A list of actors.
type ActorConnection {
    # A list of actors.
    nodes: [Actor!]!

    # The total number of actors in the connection.
    totalCount: Int!

    # Pagination information.
    pageInfo: PageInfo!
}

# An actor on an external service that was not mapped to a Sourcegraph actor.
type ExternalActor {
    # The username of the external actor.
    username: String!
    # The display name of the external actor.
    displayName: String
    # The URL of the external actor.
    url: String!
}

# Objects that can be updated.
interface Updatable {
    # Whether the viewer can update this object.
    viewerCanUpdate: Boolean!
}

# A comment is a comment on an object, or an object that itself resembles a comment.
interface Comment {
    # The node ID of the object.
    id: ID!

    # The actor who authored the comment.
    author: Actor

    # The body as Markdown.
    body: String!

    # The body as plain text.
    bodyText: String!

    # The body as HTML.
    bodyHTML: String!

    # The date and time when the object was created.
    createdAt: DateTime!

    # The date and time when the object was updated.
    updatedAt: DateTime!
}

# Input arguments for editing a comment.
input EditCommentInput {
    # The ID of the comment to edit.
    id: ID!

    # The new body of the comment (if non-null).
    body: String!
}

# An object that can be a member of a campaign.
interface CampaignNode {
    # A list of campaigns that contain this object.
    campaigns(
        # Return the first n campaigns from the list.
        first: Int
    ): CampaignConnection!
}

# The states of threads.
enum ThreadState {
    # Open.
    OPEN
    # Merged.
    MERGED
    # Closed.
    CLOSED
}

# The possible kinds of threads.
enum ThreadKind {
    # A thread with no changes.
    ISSUE

    # A thread with changes.
    CHANGESET
}

# In the future, this union will support a ThreadPreview type that represents a thread that is not
# yet persisted or created.
union ThreadOrThreadPreview = Thread

# A list of threads and thread previews.
type ThreadOrThreadPreviewConnection {
    # A list of threads and thread previews.
    nodes: [ThreadOrThreadPreview!]!

    # The total number of results in the connection.
    totalCount: Int!

    # Pagination information.
    pageInfo: PageInfo!

    # Information about filters that can be applied to the list.
    filters: ThreadConnectionFilters!
}

# An object that can have users assigned to it.
interface Assignable {
    # A list of users assigned to the object.
    assignees(
        # Return only the first n results.
        first: Int
    ): ActorConnection!
}

# A thread is collection of comments and changes. It represents an issue or changeset (e.g., GitHub
# pull request) on an external service.
type Thread implements Node & Updatable & CampaignNode & Assignable & Labelable {
    # The unique ID for the thread.
    id: ID!

    # The repository that contains this thread.
    repository: Repository!

    # TODO!(sqs): show github issue/PR number (same for BbS, etc.)

    # The title of the thread.
    title: String!

    # The state of this thread.
    state: ThreadState!

    # The base ref of the thread.
    baseRef: String

    # The head ref of the thread.
    headRef: String

    # The URLs to this thread on external services associated with it.
    externalURLs: [ExternalLink!]!

    # The date and time when the thread was created.
    createdAt: DateTime!

    # The date and time when the thread was updated.
    updatedAt: DateTime!

    # The kind of this thread, determined based on the thread's contents.
    kind: ThreadKind!

    # Whether the viewer can update this thread.
    viewerCanUpdate: Boolean!

    # The comparison between this thread's base and head, or null if there is none.
    repositoryComparison: RepositoryComparison

    # A list of campaigns that contain this thread.
    campaigns(
        # Return the first n campaigns from the list.
        first: Int
    ): CampaignConnection!

    # A list of users assigned to this thread.
    assignees(
        # Return only the first n results.
        first: Int
    ): ActorConnection!

    # A list of labels applied to this thread.
    labels(
        # Returns the first n labels from the list.
        first: Int
    ): LabelConnection!
}

# A list of threads.
type ThreadConnection {
    # A list of threads.
    nodes: [Thread!]!

    # The total number of threads in the connection.
    totalCount: Int!

    # Pagination information.
    pageInfo: PageInfo!

    # Information about filters that can be applied to the list.
    filters: ThreadConnectionFilters!
}

# Filters that can be applied to a list of threads.
type ThreadConnectionFilters {
    # Repository filters.
    repository: [RepositoryFilter!]!

    # Label filters.
    label: [LabelFilter!]!

    # The number of threads in the connection (ignoring pagination) that are open.
    openCount: Int!

    # The number of threads in the connection (ignoring pagination) that are closed or merged.
    closedCount: Int!
}

# A repository filter that can be applied to a list.
type RepositoryFilter {
    # The repository.
    repository: Repository!

    # The item count for this filter.
    count: Int

    # Whether this filter is currently applied to the list.
    isApplied: Boolean!
}

# A label filter that can be applied to a list.
type LabelFilter {
    # The label. If the list contains items labeled with labels of the same name from different
    # repositories, this field is null.
    label: Label

    # The label name.
    labelName: String!

    # The item count for this filter.
    count: Int

    # Whether this filter is currently applied to the list.
    isApplied: Boolean!
}

# Input arguments for creating a campaign.
input CreateCampaignInput {
    # The ID of the namespace where this campaign is defined.
    namespace: ID!

    # The name of the campaign.
    name: String!

    # The description of the campaign as Markdown.
    body: String
}

# Input arguments for updating a campaign.
input UpdateCampaignInput {
    # The ID of the campaign to update.
    id: ID!

    # The new name of the campaign (if non-null).
    name: String

    # The new description of the campaign as Markdown. If it is the non-null empty string, the
    # description is set to null.
    body: String
}

# Filters for a list of threads.
input ThreadFilters {
    # List threads matching this query.
    query: String

    # List threads in any of these repositories.
    repositories: [ID!]

    # List threads in any of these states.
    states: [ThreadState!]
}

# A list of participants (people involved or affected by something).
type ParticipantConnection {
    # The edges that describe how each participant is affected.
    edges: [ParticipantEdge!]!

    # A list of participants.
    nodes: [Actor!]!

    # The total number of participants in the connection.
    totalCount: Int!

    # Pagination information.
    pageInfo: PageInfo!
}

# Reasons why someone is considered a participant.
enum ParticipantReason {
    # They are an assignee.
    ASSIGNEE

    # They are the author.
    AUTHOR
}

# A description of how a participant is involved in or affected by something.
type ParticipantEdge {
    # The participant.
    actor: Actor!

    # Reasons why the actor is considered to be a participant.
    reasons: [ParticipantReason!]!
}

# A campaign is a collection of threads.
type Campaign implements Node & Comment & Updatable {
    # The unique ID for the campaign.
    id: ID!

    # The namespace where this campaign is defined.
    namespace: Namespace!

    # The name of the campaign.
    name: String!

    # The body as Markdown.
    body: String!

    # The body as plain text.
    bodyText: String!

    # The body as HTML.
    bodyHTML: String!

    # The actor who authored the campaign.
    author: Actor

    # The URL to this campaign.
    url: String!

    # The date and time when the campaign was created.
    createdAt: DateTime!

    # The date and time when the campaign was updated.
    updatedAt: DateTime!

    # Whether the viewer can update this campaign.
    viewerCanUpdate: Boolean!

    # A list of threads in this campaign.
    threads(
        # Returns the first n results from the list.
        first: Int

        # Only include threads matching these filters.
        filters: ThreadFilters
    ): ThreadOrThreadPreviewConnection!

    # The list of repositories affected by this campaign's threads.
    repositories: [Repository!]!

    # The list of commits (from one or more repositories) in this campaign's threads.
    commits: [GitCommit!]!

    # The comparisons of before and after this campaign's thread's changes are applied (on all
    # affected repositories).
    repositoryComparisons: [RepositoryComparison!]!

    # A burndown chart of the states of the campaign's threads over time.
    burndownChart: CampaignBurndownChart!

    # A list of events related to the campaign.
    timelineItems(
        # Returns the first n events from the list.
        first: Int
        # Only include events after (or on) the specified date.
        afterDate: DateTime
        # Only include events before (or on) the specified date.
        beforeDate: DateTime
        # Only include the specified event types. TODO!(sqs): make this an enum?
        types: [String!]
    ): CampaignTimelineItemConnection!

    # People involved in or affected by the campaign.
    participants(
        # Return the first n results.
        first: Int
    ): ParticipantConnection!
}

# A burndown chart of the states of the campaign's threads over time.
type CampaignBurndownChart {
    # The dates that correspond to the same-index element of the data series.
    dates: [DateTime!]!

    # The count of open threads at each date.
    openThreads: [Int!]!

    # The count of merged threads at each date.
    mergedThreads: [Int!]!

    # The count of closed threads at each date.
    closedThreads: [Int!]!

    # The count of total threads (open + merged + closed) at each date.
    totalThreads: [Int!]!

    # The count of open approved threads at each date.
    openApprovedThreads: [Int!]!
}

# A list of campaigns.
type CampaignConnection {
    # A list of campaigns.
    nodes: [Campaign!]!

    # The total number of campaigns in the connection.
    totalCount: Int!

    # Pagination information.
    pageInfo: PageInfo!
}

# The common interface implemented by all events.
interface EventCommon {
    # The unique ID of the event.
    id: ID!

    # The actor whose action this event represents.
    actor: Actor

    # The date and time that the event occurred.
    createdAt: DateTime!
}

# All event types for a campaign timeline.
union CampaignTimelineItem =
      AddThreadToCampaignEvent
    | CommentEvent
    | RemoveThreadFromCampaignEvent
    | ReviewEvent
    | RequestReviewEvent
    | MergeThreadEvent
    | CloseThreadEvent
    | ReopenThreadEvent

# A list of campaign timeline items.
type CampaignTimelineItemConnection {
    # A list of timeline items.
    nodes: [CampaignTimelineItem!]!

    # The total number of items in the connection.
    totalCount: Int!

    # Pagination information.
    pageInfo: PageInfo!
}

# The creation of a thread.
type CreateThreadEvent implements EventCommon {
    # The unique ID of the event.
    id: ID!

    # The actor whose action this event represents.
    actor: Actor!

    # The date and time that the event occurred.
    createdAt: DateTime!

    # The thread.
    thread: Thread!
}

# The creation of a comment.
type CommentEvent implements EventCommon {
    # The unique ID of the event.
    id: ID!

    # The actor whose action this event represents.
    actor: Actor!

    # The date and time that the event occurred.
    createdAt: DateTime!

    # TODO!(sqs): include the comment.
}

# The addition of a thread to a campaign.
type AddThreadToCampaignEvent implements EventCommon {
    # The unique ID of the event.
    id: ID!

    # The actor whose action this event represents.
    actor: Actor!

    # The date and time that the event occurred.
    createdAt: DateTime!

    # The thread that was added.
    thread: Thread!

    # The campaign that the thread was added to.
    campaign: Campaign!
}

# The removal of a thread to a campaign.
type RemoveThreadFromCampaignEvent implements EventCommon {
    # The unique ID of the event.
    id: ID!

    # The actor whose action this event represents.
    actor: Actor!

    # The date and time that the event occurred.
    createdAt: DateTime!

    # The thread that was removed.
    thread: Thread!

    # The campaign that the thread was removed from.
    campaign: Campaign!
}

# The possible states for a review.
enum ReviewState {
    COMMENTED
    APPROVED
    CHANGES_REQUESTED
}

# A review that was performed.
type ReviewEvent implements EventCommon {
    # The unique ID of the event.
    id: ID!

    # The actor whose action this event represents.
    actor: Actor!

    # The date and time that the event occurred.
    createdAt: DateTime!

    # The thread that was reviewed.
    thread: Thread!

    # The state of the review.
    state: ReviewState!
}

# A request to review that was sent.
type RequestReviewEvent implements EventCommon {
    # The unique ID of the event.
    id: ID!

    # The actor whose action this event represents.
    actor: Actor!

    # The date and time that the event occurred.
    createdAt: DateTime!

    # The thread on which review was requested.
    thread: Thread!

    # TODO!(sqs): add reference to external user
}

# A thread was closed.
type CloseThreadEvent implements EventCommon {
    # The unique ID of the event.
    id: ID!

    # The actor whose action this event represents.
    actor: Actor!

    # The date and time that the event occurred.
    createdAt: DateTime!

    # The thread that was closed.
    thread: Thread!
}

# A thread was reopened.
type ReopenThreadEvent implements EventCommon {
    # The unique ID of the event.
    id: ID!

    # The actor whose action this event represents.
    actor: Actor!

    # The date and time that the event occurred.
    createdAt: DateTime!

    # The thread that was reopened.
    thread: Thread!
}

# A thread was merged.
type MergeThreadEvent implements EventCommon {
    # The unique ID of the event.
    id: ID!

    # The actor whose action this event represents.
    actor: Actor!

    # The date and time that the event occurred.
    createdAt: DateTime!

    # The thread that was merged.
    thread: Thread!
}

# All possible commit status states.
enum CommitStatusState {
    # The status is expected but not yet present.
    EXPECTED

    # An error occurred while trying to determine the status.
    ERROR

    # The status is failing.
    FAILURE

    # The status is pending.
    PENDING

    # The status is successful.
    SUCCESS
}

# The status of a commit, combined from all of its status contexts.
type CommitStatus {
    # The commit's repository.
    repository: Repository!

    # The commit.
    commit: GitCommit!

    # The individual status contexts for the commit.
    contexts: [CommitStatusContext!]!

    # The combined status state.
    state: CommitStatusState!
}

# The status of a commit for a single context.
type CommitStatusContext implements Node {
    # The unique ID of the status.
    id: ID!

    # The commit's repository.
    repository: Repository!

    # The commit.
    commit: GitCommit!

    # The context of the status, which identifies the source or tool that produced this status and
    # distinguishes this status from others on the same commit.
    context: String!

    # The status state.
    state: CommitStatusState!

    # The description of the status.
    description: String

    # A URL with more information related to the status.
    targetURL: String

    # The actor who created the status.
    actor: Actor!

    # The time when the status was created.
    createdAt: DateTime!
}
