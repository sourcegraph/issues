/* eslint-disable */
/* This is an autogenerated file. Do not edit this file directly! */
export type CurrentAuthStateInput = {}
export type CurrentAuthStateOutput = {
    currentUser: {
        __typename: 'User'
        id: string
        databaseID: number
        username: string
        avatarURL: string | null
        email: string
        displayName: string | null
        siteAdmin: boolean
        tags: string[]
        url: string
        settingsURL: string | null
        organizations: {
            nodes: {
                id: string
                name: string
                displayName: string | null
                url: string
                settingsURL: string | null
            }[]
        }
        session: {
            canSignOut: boolean
        }
        viewerCanAdminister: boolean
    } | null
}
export type FileDiffHunkRangeFields = {
    startLine: number
    lines: number
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type FileDiffFields = {
    __typename: 'FileDiff'
    oldPath: string | null
    oldFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newPath: string | null
    mostRelevantFile: {
        __typename: string
        url: string
    }
    hunks: {
        oldRange: {
            startLine: number
            lines: number
        }
        oldNoNewlineAt: boolean
        newRange: {
            startLine: number
            lines: number
        }
        section: string | null
        highlight: {
            aborted: boolean
            lines: {
                kind: 'ADDED' | 'UNCHANGED' | 'DELETED'
                html: string
            }[]
        }
    }[]
    stat: {
        added: number
        changed: number
        deleted: number
    }
    internalID: string
}
export type RepositoryIDInput = {
    repoName: string
}
export type RepositoryIDOutput = {
    repository: {
        id: string
    } | null
}
export type CreateChangesetInput = {
    repositoryID: string
    externalID: string
}
export type CreateChangesetOutput = {
    createChangesets: {
        id: string
    }[]
}
export type AddChangeSetToCampaignInput = {
    campaignID: string
    changesets: string[]
}
export type AddChangeSetToCampaignOutput = {
    addChangesetsToCampaign: {
        id: string
    }
}
export type CampaignFields = {
    __typename: 'Campaign'
    id: string
    name: string
    description: string | null
    author: {
        username: string
        avatarURL: string | null
    }
    status: {
        completedCount: number
        pendingCount: number
        state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'CANCELED'
        errors: string[]
    }
    branch: string | null
    createdAt: any
    updatedAt: any
    closedAt: any | null
    viewerCanAdminister: boolean
    hasUnpublishedPatches: boolean
    changesets: {
        totalCount: number
    }
    patches: {
        totalCount: number
    }
    changesetCountsOverTime: {
        date: any
        merged: number
        closed: number
        openApproved: number
        openChangesRequested: number
        openPending: number
        total: number
    }[]
    diffStat: DiffStatFields
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type PatchSetFields = {
    __typename: 'PatchSet'
    id: string
    diffStat: DiffStatFields
    patches: {
        totalCount: number
    }
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type UpdateCampaignInput = {
    update: {
        id: string
        name: string | null
        branch: string | null
        description: string | null
        patchSet: string | null
    }
}
export type UpdateCampaignOutput = {
    updateCampaign: CampaignFields
}
export type CampaignFields = {
    __typename: 'Campaign'
    id: string
    name: string
    description: string | null
    author: {
        username: string
        avatarURL: string | null
    }
    status: {
        completedCount: number
        pendingCount: number
        state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'CANCELED'
        errors: string[]
    }
    branch: string | null
    createdAt: any
    updatedAt: any
    closedAt: any | null
    viewerCanAdminister: boolean
    hasUnpublishedPatches: boolean
    changesets: {
        totalCount: number
    }
    patches: {
        totalCount: number
    }
    changesetCountsOverTime: {
        date: any
        merged: number
        closed: number
        openApproved: number
        openChangesRequested: number
        openPending: number
        total: number
    }[]
    diffStat: DiffStatFields
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type CreateCampaignInput = {
    input: {
        namespace: string
        name: string
        description: string | null
        branch: string | null
        patchSet: string | null
    }
}
export type CreateCampaignOutput = {
    createCampaign: {
        id: string
        url: string
    }
}
export type RetryCampaignChangesetsInput = {
    campaign: string
}
export type RetryCampaignChangesetsOutput = {
    retryCampaignChangesets: CampaignFields
}
export type CampaignFields = {
    __typename: 'Campaign'
    id: string
    name: string
    description: string | null
    author: {
        username: string
        avatarURL: string | null
    }
    status: {
        completedCount: number
        pendingCount: number
        state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'CANCELED'
        errors: string[]
    }
    branch: string | null
    createdAt: any
    updatedAt: any
    closedAt: any | null
    viewerCanAdminister: boolean
    hasUnpublishedPatches: boolean
    changesets: {
        totalCount: number
    }
    patches: {
        totalCount: number
    }
    changesetCountsOverTime: {
        date: any
        merged: number
        closed: number
        openApproved: number
        openChangesRequested: number
        openPending: number
        total: number
    }[]
    diffStat: DiffStatFields
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type PublishCampaignChangesetsInput = {
    campaign: string
}
export type PublishCampaignChangesetsOutput = {
    publishCampaignChangesets: CampaignFields
}
export type CampaignFields = {
    __typename: 'Campaign'
    id: string
    name: string
    description: string | null
    author: {
        username: string
        avatarURL: string | null
    }
    status: {
        completedCount: number
        pendingCount: number
        state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'CANCELED'
        errors: string[]
    }
    branch: string | null
    createdAt: any
    updatedAt: any
    closedAt: any | null
    viewerCanAdminister: boolean
    hasUnpublishedPatches: boolean
    changesets: {
        totalCount: number
    }
    patches: {
        totalCount: number
    }
    changesetCountsOverTime: {
        date: any
        merged: number
        closed: number
        openApproved: number
        openChangesRequested: number
        openPending: number
        total: number
    }[]
    diffStat: DiffStatFields
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type CloseCampaignInput = {
    campaign: string
    closeChangesets: boolean
}
export type CloseCampaignOutput = {
    closeCampaign: {
        id: string
    }
}
export type DeleteCampaignInput = {
    campaign: string
    closeChangesets: boolean
}
export type DeleteCampaignOutput = {
    deleteCampaign: {
        alwaysNil: string | null
    } | null
}
export type CampaignByIDInput = {
    campaign: string
}
export type CampaignByIDOutput = {
    node:
        | ({
              __typename: string
          } & CampaignFields)
        | null
}
export type CampaignFields = {
    __typename: 'Campaign'
    id: string
    name: string
    description: string | null
    author: {
        username: string
        avatarURL: string | null
    }
    status: {
        completedCount: number
        pendingCount: number
        state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'CANCELED'
        errors: string[]
    }
    branch: string | null
    createdAt: any
    updatedAt: any
    closedAt: any | null
    viewerCanAdminister: boolean
    hasUnpublishedPatches: boolean
    changesets: {
        totalCount: number
    }
    patches: {
        totalCount: number
    }
    changesetCountsOverTime: {
        date: any
        merged: number
        closed: number
        openApproved: number
        openChangesRequested: number
        openPending: number
        total: number
    }[]
    diffStat: DiffStatFields
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type PatchSetByIDInput = {
    patchSet: string
}
export type PatchSetByIDOutput = {
    node:
        | ({
              __typename: string
          } & PatchSetFields)
        | null
}
export type PatchSetFields = {
    __typename: 'PatchSet'
    id: string
    diffStat: DiffStatFields
    patches: {
        totalCount: number
    }
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type CampaignChangesetsInput = {
    campaign: string
    first: number | null
    state: ('OPEN' | 'CLOSED' | 'MERGED' | 'DELETED') | null
    reviewState: ('APPROVED' | 'CHANGES_REQUESTED' | 'PENDING' | 'COMMENTED' | 'DISMISSED') | null
    checkState: ('PENDING' | 'PASSED' | 'FAILED') | null
}
export type CampaignChangesetsOutput = {
    node:
        | ({
              __typename: string
          } & {
              changesets: {
                  totalCount: number
                  nodes: ({
                      __typename: string
                      state: 'OPEN' | 'CLOSED' | 'MERGED' | 'DELETED'
                      createdAt: any
                      updatedAt: any
                      nextSyncAt: any | null
                  } & {
                      id: string
                  } & {
                      id: string
                      title: string
                      body: string
                      reviewState: 'APPROVED' | 'CHANGES_REQUESTED' | 'PENDING' | 'COMMENTED' | 'DISMISSED'
                      checkState: ('PENDING' | 'PASSED' | 'FAILED') | null
                      labels: {
                          text: string
                          description: string | null
                          color: string
                      }[]
                      repository: {
                          id: string
                          name: string
                          url: string
                      }
                      externalURL: {
                          url: string
                      }
                      externalID: string
                      diff: {
                          fileDiffs: {
                              diffStat: DiffStatFields
                          }
                      } | null
                      diffStat: {
                          added: number
                          changed: number
                          deleted: number
                      } | null
                  })[]
              }
          })
        | null
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type CampaignPatchesInput = {
    campaign: string
    first: number | null
}
export type CampaignPatchesOutput = {
    node:
        | ({
              __typename: string
          } & {
              patches: {
                  totalCount: number
                  nodes: ({
                      __typename: string
                  } & {
                      id: string
                  } & {
                      id: string
                      repository: {
                          id: string
                          name: string
                          url: string
                      }
                      publishable: boolean
                      publicationEnqueued: boolean
                      diff: {
                          fileDiffs: {
                              diffStat: DiffStatFields
                          }
                      }
                  })[]
              }
          })
        | null
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type PatchSetPatchesInput = {
    patchSet: string
    first: number | null
}
export type PatchSetPatchesOutput = {
    node:
        | ({
              __typename: string
          } & {
              patches: {
                  totalCount: number
                  nodes: ({
                      __typename: string
                      id: string
                  } & {
                      repository: {
                          id: string
                          name: string
                          url: string
                      }
                      publishable: boolean
                      publicationEnqueued: boolean
                      diff: {
                          fileDiffs: {
                              diffStat: DiffStatFields
                          }
                      }
                  })[]
              }
          })
        | null
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type PublishChangesetInput = {
    patch: string
}
export type PublishChangesetOutput = {
    publishChangeset: {
        alwaysNil: string | null
    }
}
export type SyncChangesetInput = {
    changeset: string
}
export type SyncChangesetOutput = {
    syncChangeset: {
        alwaysNil: string | null
    }
}
export type ExternalChangesetFileDiffsInput = {
    externalChangeset: string
    first: number | null
    after: string | null
    isLightTheme: boolean
}
export type ExternalChangesetFileDiffsOutput = {
    node:
        | ({
              __typename: string
          } & {
              diff: {
                  range: {
                      base: GitRefSpecFields
                      head: GitRefSpecFields
                  }
                  fileDiffs: {
                      nodes: FileDiffFields[]
                      totalCount: number | null
                      pageInfo: {
                          hasNextPage: boolean
                          endCursor: string | null
                      }
                      diffStat: DiffStatFields
                  }
              } | null
          })
        | null
}
export type GitRefSpecFields = {
    __typename: 'GitRef' | 'GitRevSpecExpr' | 'GitObject'
} & (
    | {
          oid: any
      }
    | {
          target: {
              oid: any
          }
      }
    | {
          object: {
              oid: any
          } | null
      }
)
export type FileDiffFields = {
    __typename: 'FileDiff'
    oldPath: string | null
    oldFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newPath: string | null
    mostRelevantFile: {
        __typename: string
        url: string
    }
    hunks: {
        oldRange: {
            startLine: number
            lines: number
        }
        oldNoNewlineAt: boolean
        newRange: {
            startLine: number
            lines: number
        }
        section: string | null
        highlight: {
            aborted: boolean
            lines: {
                kind: 'ADDED' | 'UNCHANGED' | 'DELETED'
                html: string
            }[]
        }
    }[]
    stat: {
        added: number
        changed: number
        deleted: number
    }
    internalID: string
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type PatchFileDiffsInput = {
    patch: string
    first: number | null
    after: string | null
    isLightTheme: boolean
}
export type PatchFileDiffsOutput = {
    node:
        | ({
              __typename: string
          } & {
              diff: {
                  fileDiffs: {
                      nodes: FileDiffFields[]
                      totalCount: number | null
                      pageInfo: {
                          hasNextPage: boolean
                          endCursor: string | null
                      }
                      diffStat: DiffStatFields
                  }
              }
          })
        | null
}
export type FileDiffFields = {
    __typename: 'FileDiff'
    oldPath: string | null
    oldFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newPath: string | null
    mostRelevantFile: {
        __typename: string
        url: string
    }
    hunks: {
        oldRange: {
            startLine: number
            lines: number
        }
        oldNoNewlineAt: boolean
        newRange: {
            startLine: number
            lines: number
        }
        section: string | null
        highlight: {
            aborted: boolean
            lines: {
                kind: 'ADDED' | 'UNCHANGED' | 'DELETED'
                html: string
            }[]
        }
    }[]
    stat: {
        added: number
        changed: number
        deleted: number
    }
    internalID: string
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type CampaignsInput = {
    first: number | null
    state: ('OPEN' | 'CLOSED') | null
    hasPatchSet: boolean | null
    viewerCanAdminister: boolean | null
}
export type CampaignsOutput = {
    campaigns: {
        nodes: {
            id: string
            name: string
            description: string | null
            url: string
            createdAt: any
            closedAt: any | null
            changesets: {
                totalCount: number
                nodes: {
                    state: 'OPEN' | 'CLOSED' | 'MERGED' | 'DELETED'
                }[]
            }
            patches: {
                totalCount: number
            }
        }[]
        totalCount: number
    }
}
export type CampaignsInput = {}
export type CampaignsOutput = {
    campaigns: {
        totalCount: number
    }
}
export type LsifUploadsInput = {
    state: ('PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING') | null
    isLatestForRepo: boolean | null
    first: number | null
    after: string | null
    query: string | null
}
export type LsifUploadsOutput = {
    lsifUploads: {
        nodes: {
            id: string
            state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING'
            projectRoot: {
                url: string
                path: string
                repository: {
                    url: string
                    name: string
                }
                commit: {
                    url: string
                    oid: any
                    abbreviatedOID: string
                }
            } | null
            inputCommit: string
            inputRoot: string
            inputIndexer: string
            uploadedAt: any
            startedAt: any | null
            finishedAt: any | null
            placeInQueue: number | null
        }[]
        totalCount: number | null
        pageInfo: {
            endCursor: string | null
            hasNextPage: boolean
        }
    }
}
export type LsifUploadsInput = {
    repository: string
    state: ('PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING') | null
    isLatestForRepo: boolean | null
    first: number | null
    after: string | null
    query: string | null
}
export type LsifUploadsOutput = {
    node:
        | ({
              __typename: string
          } & {
              lsifUploads: {
                  nodes: {
                      id: string
                      state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING'
                      projectRoot: {
                          url: string
                          path: string
                          repository: {
                              url: string
                              name: string
                          }
                          commit: {
                              url: string
                              oid: any
                              abbreviatedOID: string
                          }
                      } | null
                      inputCommit: string
                      inputRoot: string
                      inputIndexer: string
                      uploadedAt: any
                      startedAt: any | null
                      finishedAt: any | null
                      placeInQueue: number | null
                  }[]
                  totalCount: number | null
                  pageInfo: {
                      endCursor: string | null
                      hasNextPage: boolean
                  }
              }
          })
        | null
}
export type LsifUploadInput = {
    id: string
}
export type LsifUploadOutput = {
    node:
        | ({
              __typename: string
          } & {
              id: string
              projectRoot: {
                  url: string
                  path: string
                  repository: {
                      url: string
                      name: string
                  }
                  commit: {
                      url: string
                      oid: any
                      abbreviatedOID: string
                  }
              } | null
              inputCommit: string
              inputRoot: string
              inputIndexer: string
              state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING'
              failure: string | null
              uploadedAt: any
              startedAt: any | null
              finishedAt: any | null
              isLatestForRepo: boolean
              placeInQueue: number | null
          })
        | null
}
export type DeleteLsifUploadInput = {
    id: string
}
export type DeleteLsifUploadOutput = {
    deleteLSIFUpload: {
        alwaysNil: string | null
    } | null
}
export type LsifIndexesInput = {
    state: ('PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED') | null
    first: number | null
    after: string | null
    query: string | null
}
export type LsifIndexesOutput = {
    lsifIndexes: {
        nodes: {
            id: string
            state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED'
            projectRoot: {
                url: string
                path: string
                repository: {
                    url: string
                    name: string
                }
                commit: {
                    url: string
                    oid: any
                    abbreviatedOID: string
                }
            } | null
            inputCommit: string
            queuedAt: any
            startedAt: any | null
            finishedAt: any | null
            placeInQueue: number | null
        }[]
        totalCount: number | null
        pageInfo: {
            endCursor: string | null
            hasNextPage: boolean
        }
    }
}
export type LsifIndexesInput = {
    repository: string
    state: ('PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED') | null
    first: number | null
    after: string | null
    query: string | null
}
export type LsifIndexesOutput = {
    node:
        | ({
              __typename: string
          } & {
              lsifIndexes: {
                  nodes: {
                      id: string
                      state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED'
                      projectRoot: {
                          url: string
                          path: string
                          repository: {
                              url: string
                              name: string
                          }
                          commit: {
                              url: string
                              oid: any
                              abbreviatedOID: string
                          }
                      } | null
                      inputCommit: string
                      queuedAt: any
                      startedAt: any | null
                      finishedAt: any | null
                      placeInQueue: number | null
                  }[]
                  totalCount: number | null
                  pageInfo: {
                      endCursor: string | null
                      hasNextPage: boolean
                  }
              }
          })
        | null
}
export type LsifIndexInput = {
    id: string
}
export type LsifIndexOutput = {
    node:
        | ({
              __typename: string
          } & {
              id: string
              projectRoot: {
                  url: string
                  path: string
                  repository: {
                      url: string
                      name: string
                  }
                  commit: {
                      url: string
                      oid: any
                      abbreviatedOID: string
                  }
              } | null
              inputCommit: string
              state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED'
              failure: string | null
              queuedAt: any
              startedAt: any | null
              finishedAt: any | null
              placeInQueue: number | null
          })
        | null
}
export type DeleteLsifIndexInput = {
    id: string
}
export type DeleteLsifIndexOutput = {
    deleteLSIFIndex: {
        alwaysNil: string | null
    } | null
}
export type ProductPlansInput = {}
export type ProductPlansOutput = {
    dotcom: {
        productPlans: {
            productPlanID: string
            billingPlanID: string
            name: string
            pricePerUserPerYear: number
            minQuantity: number | null
            maxQuantity: number | null
            tiersMode: string
            planTiers: {
                unitAmount: number
                upTo: number
                flatAmount: number
            }[]
        }[]
    }
}
export type ProductSubscriptionFields = {
    id: string
    name: string
    account: {
        id: string
        username: string
        displayName: string | null
        emails: {
            email: string
            verified: boolean
        }[]
    } | null
    invoiceItem: {
        plan: {
            nameWithBrand: string
        }
        userCount: number
        expiresAt: any
    } | null
    activeLicense: {
        licenseKey: string
        info: {
            productNameWithBrand: string
            tags: string[]
            userCount: number
            expiresAt: any
        } | null
    } | null
    createdAt: any
    isArchived: boolean
    url: string
}
export type ExploreExtensionsInput = {
    first: number | null
    prioritizeExtensionIDs: string[] | null
}
export type ExploreExtensionsOutput = {
    extensionRegistry: {
        extensions: {
            nodes: {
                id: string
                extensionIDWithoutRegistry: string
                url: string
                manifest: {
                    description: string | null
                } | null
            }[]
        }
    }
}
export type UpdateRegistryExtensionInput = {
    extension: string
    name: string | null
}
export type UpdateRegistryExtensionOutput = {
    extensionRegistry: {
        updateExtension: {
            extension: {
                url: string
            }
        }
    }
}
export type PublishRegistryExtensionInput = {
    extensionID: string
    manifest: string
    bundle: string
}
export type PublishRegistryExtensionOutput = {
    extensionRegistry: {
        publishExtension: {
            extension: {
                url: string
            }
        }
    }
}
export type CreateRegistryExtensionInput = {
    publisher: string
    name: string
}
export type CreateRegistryExtensionOutput = {
    extensionRegistry: {
        createExtension: {
            extension: {
                id: string
                extensionID: string
                url: string
            }
        }
    }
}
export type DeleteRegistryExtensionInput = {
    extension: string
}
export type DeleteRegistryExtensionOutput = {
    extensionRegistry: {
        deleteExtension: {
            alwaysNil: string | null
        }
    }
}
export type ViewerRegistryPublishersInput = {}
export type ViewerRegistryPublishersOutput = {
    extensionRegistry: {
        viewerPublishers: ({
            __typename: 'User' | 'Org'
        } & (
            | {
                  id: string
                  username: string
              }
            | {
                  id: string
                  name: string
              }
        ))[]
        localExtensionIDPrefix: string | null
    }
}
export type ViewerNamespacesInput = {}
export type ViewerNamespacesOutput = {
    currentUser: {
        __typename: 'User'
        id: string
        namespaceName: string
        url: string
        organizations: {
            nodes: {
                __typename: 'Org'
                id: string
                namespaceName: string
                url: string
            }[]
        }
    } | null
}
export type LsifUploadsInput = {
    repository: string
    state: ('PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING') | null
    isLatestForRepo: boolean | null
    first: number | null
    after: string | null
    query: string | null
}
export type LsifUploadsOutput = {
    node:
        | ({
              __typename: string
          } & {
              lsifUploads: {
                  nodes: {
                      id: string
                      state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING'
                      projectRoot: {
                          commit: {
                              abbreviatedOID: string
                              url: string
                          }
                          path: string
                          url: string
                      } | null
                      inputCommit: string
                      inputRoot: string
                      inputIndexer: string
                      uploadedAt: any
                      startedAt: any | null
                      finishedAt: any | null
                      placeInQueue: number | null
                  }[]
                  totalCount: number | null
                  pageInfo: {
                      endCursor: string | null
                      hasNextPage: boolean
                  }
              }
          })
        | null
}
export type LsifUploadInput = {
    id: string
}
export type LsifUploadOutput = {
    node:
        | ({
              __typename: string
          } & {
              id: string
              projectRoot: {
                  commit: {
                      oid: any
                      abbreviatedOID: string
                      url: string
                      repository: {
                          name: string
                          url: string
                      }
                  }
                  path: string
                  url: string
              } | null
              inputCommit: string
              inputRoot: string
              inputIndexer: string
              state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED' | 'UPLOADING'
              failure: string | null
              uploadedAt: any
              startedAt: any | null
              finishedAt: any | null
              isLatestForRepo: boolean
              placeInQueue: number | null
          })
        | null
}
export type DeleteLsifUploadInput = {
    id: string
}
export type DeleteLsifUploadOutput = {
    deleteLSIFUpload: {
        alwaysNil: string | null
    } | null
}
export type LsifIndexesInput = {
    repository: string
    state: ('PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED') | null
    first: number | null
    after: string | null
    query: string | null
}
export type LsifIndexesOutput = {
    node:
        | ({
              __typename: string
          } & {
              lsifIndexes: {
                  nodes: {
                      id: string
                      state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED'
                      projectRoot: {
                          commit: {
                              abbreviatedOID: string
                              url: string
                          }
                          path: string
                          url: string
                      } | null
                      inputCommit: string
                      queuedAt: any
                      startedAt: any | null
                      finishedAt: any | null
                      placeInQueue: number | null
                  }[]
                  totalCount: number | null
                  pageInfo: {
                      endCursor: string | null
                      hasNextPage: boolean
                  }
              }
          })
        | null
}
export type LsifIndexInput = {
    id: string
}
export type LsifIndexOutput = {
    node:
        | ({
              __typename: string
          } & {
              id: string
              projectRoot: {
                  commit: {
                      oid: any
                      abbreviatedOID: string
                      url: string
                      repository: {
                          name: string
                          url: string
                      }
                  }
                  path: string
                  url: string
              } | null
              inputCommit: string
              state: 'PROCESSING' | 'ERRORED' | 'COMPLETED' | 'QUEUED'
              failure: string | null
              queuedAt: any
              startedAt: any | null
              finishedAt: any | null
              placeInQueue: number | null
          })
        | null
}
export type DeleteLsifIndexInput = {
    id: string
}
export type DeleteLsifIndexOutput = {
    deleteLSIFIndex: {
        alwaysNil: string | null
    } | null
}
export type SearchResultsStatsInput = {
    query: string
}
export type SearchResultsStatsOutput = {
    search: {
        results: {
            limitHit: boolean
        }
        stats: {
            languages: {
                name: string
                totalLines: number
            }[]
        }
    } | null
}
export type AuthProviderFields = {
    serviceType: string
    serviceID: string
    clientID: string
    displayName: string
    isBuiltin: boolean
    authenticationURL: string | null
}
export type AuthProvidersInput = {}
export type AuthProvidersOutput = {
    site: {
        authProviders: {
            nodes: AuthProviderFields[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    }
}
export type AuthProviderFields = {
    serviceType: string
    serviceID: string
    clientID: string
    displayName: string
    isBuiltin: boolean
    authenticationURL: string | null
}
export type ExternalAccountsInput = {
    first: number | null
    user: string | null
    serviceType: string | null
    serviceID: string | null
    clientID: string | null
}
export type ExternalAccountsOutput = {
    site: {
        externalAccounts: {
            nodes: ExternalAccountFields[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    }
}
export type ExternalAccountFields = {
    id: string
    user: {
        id: string
        username: string
    }
    serviceType: string
    serviceID: string
    clientID: string
    accountID: string
    createdAt: any
    updatedAt: any
    refreshURL: string | null
    accountData: any | null
}
export type RegistryExtensionsInput = {
    first: number | null
    publisher: string | null
    query: string | null
    local: boolean | null
    remote: boolean | null
}
export type RegistryExtensionsOutput = {
    extensionRegistry: {
        extensions: {
            nodes: RegistryExtensionFields[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
            error: string | null
        }
    }
}
export type RegistryExtensionFields = {
    id: string
    publisher:
        | ({
              __typename: 'User' | 'Org'
          } & (
              | {
                    id: string
                    username: string
                    displayName: string | null
                    url: string
                }
              | {
                    id: string
                    name: string
                    displayName: string | null
                    url: string
                }
          ))
        | null
    extensionID: string
    extensionIDWithoutRegistry: string
    name: string
    manifest: {
        raw: string
        description: string | null
    } | null
    createdAt: any | null
    updatedAt: any | null
    publishedAt: any | null
    url: string
    remoteURL: string | null
    registryName: string
    isLocal: boolean
    isWorkInProgress: boolean
    viewerCanAdminister: boolean
}
export type LsifUploadInput = {
    id: string
}
export type LsifUploadOutput = {
    node:
        | ({
              __typename: string
          } & {
              projectRoot: {
                  commit: {
                      repository: {
                          name: string
                          url: string
                      }
                  }
              } | null
          })
        | null
}
export type SetCustomerBillingInput = {
    user: string
    billingCustomerID: string | null
}
export type SetCustomerBillingOutput = {
    dotcom: {
        setUserBilling: {
            alwaysNil: string | null
        }
    }
}
export type CustomerFields = {
    id: string
    username: string
    displayName: string | null
    urlForSiteAdminBilling: string | null
}
export type CustomersInput = {
    first: number | null
    query: string | null
}
export type CustomersOutput = {
    users: {
        nodes: CustomerFields[]
        totalCount: number
        pageInfo: {
            hasNextPage: boolean
        }
    }
}
export type CustomerFields = {
    id: string
    username: string
    displayName: string | null
    urlForSiteAdminBilling: string | null
}
export type CreateProductSubscriptionInput = {
    accountID: string
}
export type CreateProductSubscriptionOutput = {
    dotcom: {
        createProductSubscription: {
            urlForSiteAdmin: string | null
        }
    }
}
export type ProductSubscriptionAccountsInput = {
    first: number | null
    query: string | null
}
export type ProductSubscriptionAccountsOutput = {
    users: {
        nodes: {
            id: string
            username: string
            emails: {
                email: string
                verified: boolean
                isPrimary: boolean
            }[]
        }[]
        totalCount: number
        pageInfo: {
            hasNextPage: boolean
        }
    }
}
export type GenerateProductLicenseForSubscriptionInput = {
    productSubscriptionID: string
    license: {
        tags: string[]
        userCount: number
        expiresAt: number
    }
}
export type GenerateProductLicenseForSubscriptionOutput = {
    dotcom: {
        generateProductLicenseForSubscription: {
            id: string
        }
    }
}
export type ProductLicenseFields = {
    id: string
    subscription: {
        id: string
        name: string
        account: {
            id: string
            username: string
            displayName: string | null
        } | null
        activeLicense: {
            id: string
        } | null
        urlForSiteAdmin: string | null
    }
    licenseKey: string
    info: {
        productNameWithBrand: string
        tags: string[]
        userCount: number
        expiresAt: any
    } | null
    createdAt: any
}
export type ProductLicensesInput = {
    first: number | null
    licenseKeySubstring: string | null
}
export type ProductLicensesOutput = {
    dotcom: {
        productLicenses: {
            nodes: ProductLicenseFields[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    }
}
export type ProductLicenseFields = {
    id: string
    subscription: {
        id: string
        name: string
        account: {
            id: string
            username: string
            displayName: string | null
        } | null
        activeLicense: {
            id: string
        } | null
        urlForSiteAdmin: string | null
    }
    licenseKey: string
    info: {
        productNameWithBrand: string
        tags: string[]
        userCount: number
        expiresAt: any
    } | null
    createdAt: any
}
export type SetProductSubscriptionBillingInput = {
    id: string
    billingSubscriptionID: string | null
}
export type SetProductSubscriptionBillingOutput = {
    dotcom: {
        setProductSubscriptionBilling: {
            alwaysNil: string | null
        }
    }
}
export type ProductSubscriptionFields = {
    id: string
    name: string
    account: {
        id: string
        username: string
        displayName: string | null
        emails: {
            email: string
            isPrimary: boolean
        }[]
    } | null
    invoiceItem: {
        plan: {
            nameWithBrand: string
        }
        userCount: number
        expiresAt: any
    } | null
    activeLicense: {
        id: string
        info: {
            productNameWithBrand: string
            tags: string[]
            userCount: number
            expiresAt: any
        } | null
        licenseKey: string
        createdAt: any
    } | null
    createdAt: any
    isArchived: boolean
    urlForSiteAdmin: string | null
}
export type ProductSubscriptionInput = {
    uuid: string
}
export type ProductSubscriptionOutput = {
    dotcom: {
        productSubscription: {
            id: string
            name: string
            account: {
                id: string
                username: string
                displayName: string | null
                emails: {
                    email: string
                    verified: boolean
                }[]
            } | null
            invoiceItem: {
                plan: {
                    billingPlanID: string
                    name: string
                    nameWithBrand: string
                    pricePerUserPerYear: number
                }
                userCount: number
                expiresAt: any
            } | null
            events: {
                id: string
                date: string
                title: string
                description: string | null
                url: string | null
            }[]
            productLicenses: {
                nodes: {
                    id: string
                    info: {
                        tags: string[]
                        userCount: number
                        expiresAt: any
                    } | null
                    licenseKey: string
                    createdAt: any
                }[]
                totalCount: number
                pageInfo: {
                    hasNextPage: boolean
                }
            }
            createdAt: any
            isArchived: boolean
            url: string
            urlForSiteAdminBilling: string | null
        }
    }
}
export type ProductLicensesInput = {
    first: number | null
    subscriptionUUID: string
}
export type ProductLicensesOutput = {
    dotcom: {
        productSubscription: {
            productLicenses: {
                nodes: ProductLicenseFields[]
                totalCount: number
                pageInfo: {
                    hasNextPage: boolean
                }
            }
        }
    }
}
export type ProductLicenseFields = {
    id: string
    subscription: {
        id: string
        name: string
        account: {
            id: string
            username: string
            displayName: string | null
        } | null
        activeLicense: {
            id: string
        } | null
        urlForSiteAdmin: string | null
    }
    licenseKey: string
    info: {
        productNameWithBrand: string
        tags: string[]
        userCount: number
        expiresAt: any
    } | null
    createdAt: any
}
export type ArchiveProductSubscriptionInput = {
    id: string
}
export type ArchiveProductSubscriptionOutput = {
    dotcom: {
        archiveProductSubscription: {
            alwaysNil: string | null
        }
    }
}
export type ProductSubscriptionsInput = {
    first: number | null
    account: string | null
    query: string | null
}
export type ProductSubscriptionsOutput = {
    dotcom: {
        productSubscriptions: {
            nodes: ProductSubscriptionFields[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    }
}
export type ProductSubscriptionFields = {
    id: string
    name: string
    account: {
        id: string
        username: string
        displayName: string | null
        emails: {
            email: string
            isPrimary: boolean
        }[]
    } | null
    invoiceItem: {
        plan: {
            nameWithBrand: string
        }
        userCount: number
        expiresAt: any
    } | null
    activeLicense: {
        id: string
        info: {
            productNameWithBrand: string
            tags: string[]
            userCount: number
            expiresAt: any
        } | null
        licenseKey: string
        createdAt: any
    } | null
    createdAt: any
    isArchived: boolean
    urlForSiteAdmin: string | null
}
export type ProductLicenseInfoInput = {}
export type ProductLicenseInfoOutput = {
    site: {
        productSubscription: {
            productNameWithBrand: string
            actualUserCount: number
            actualUserCountDate: string
            noLicenseWarningUserCount: number | null
            license: {
                tags: string[]
                userCount: number
                expiresAt: any
            } | null
        }
    }
}
export type PreviewProductSubscriptionInvoiceInput = {
    account: string | null
    subscriptionToUpdate: string | null
    productSubscription: {
        billingPlanID: string
        userCount: number
    }
}
export type PreviewProductSubscriptionInvoiceOutput = {
    dotcom: {
        previewProductSubscriptionInvoice: {
            price: number
            prorationDate: string | null
            isDowngradeRequiringManualIntervention: boolean
            beforeInvoiceItem: {
                plan: {
                    billingPlanID: string
                    name: string
                    pricePerUserPerYear: number
                }
                userCount: number
                expiresAt: any
            } | null
            afterInvoiceItem: {
                plan: {
                    billingPlanID: string
                    name: string
                    pricePerUserPerYear: number
                }
                userCount: number
                expiresAt: any
            }
        }
    }
}
export type ProductSubscriptionInput = {
    uuid: string
}
export type ProductSubscriptionOutput = {
    dotcom: {
        productSubscription: ProductSubscriptionFields
    }
}
export type ProductSubscriptionFields = {
    id: string
    name: string
    invoiceItem: {
        plan: {
            billingPlanID: string
        }
        userCount: number
        expiresAt: any
    } | null
    url: string
}
export type UpdatePaidProductSubscriptionInput = {
    subscriptionID: string
    update: {
        billingPlanID: string
        userCount: number
    }
    paymentToken: string | null
}
export type UpdatePaidProductSubscriptionOutput = {
    dotcom: {
        updatePaidProductSubscription: {
            productSubscription: {
                url: string
            }
        }
    }
}
export type CreatePaidProductSubscriptionInput = {
    accountID: string
    productSubscription: {
        billingPlanID: string
        userCount: number
    }
    paymentToken: string | null
}
export type CreatePaidProductSubscriptionOutput = {
    dotcom: {
        createPaidProductSubscription: {
            productSubscription: {
                id: string
                name: string
                url: string
            }
        }
    }
}
export type ProductSubscriptionInput = {
    uuid: string
}
export type ProductSubscriptionOutput = {
    dotcom: {
        productSubscription: ProductSubscriptionFields
    }
}
export type ProductSubscriptionFields = {
    id: string
    name: string
    account: {
        id: string
        username: string
        displayName: string | null
        emails: {
            email: string
            verified: boolean
        }[]
    } | null
    invoiceItem: {
        plan: {
            billingPlanID: string
            name: string
            nameWithBrand: string
            pricePerUserPerYear: number
        }
        userCount: number
        expiresAt: any
    } | null
    events: {
        id: string
        date: string
        title: string
        description: string | null
        url: string | null
    }[]
    activeLicense: {
        licenseKey: string
        info: {
            productNameWithBrand: string
            tags: string[]
            userCount: number
            expiresAt: any
        } | null
    } | null
    createdAt: any
    isArchived: boolean
    url: string
    urlForSiteAdmin: string | null
}
export type ProductSubscriptionsInput = {
    first: number | null
    account: string | null
}
export type ProductSubscriptionsOutput = {
    dotcom: {
        productSubscriptions: {
            nodes: ProductSubscriptionFields[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    }
}
export type ProductSubscriptionFields = {
    id: string
    name: string
    account: {
        id: string
        username: string
        displayName: string | null
        emails: {
            email: string
            verified: boolean
        }[]
    } | null
    invoiceItem: {
        plan: {
            nameWithBrand: string
        }
        userCount: number
        expiresAt: any
    } | null
    activeLicense: {
        licenseKey: string
        info: {
            productNameWithBrand: string
            tags: string[]
            userCount: number
            expiresAt: any
        } | null
    } | null
    createdAt: any
    isArchived: boolean
    url: string
}
export type ExternalAccountFields = {
    id: string
    user: {
        id: string
        username: string
    }
    serviceType: string
    serviceID: string
    clientID: string
    accountID: string
    createdAt: any
    updatedAt: any
    refreshURL: string | null
    accountData: any | null
}
export type DeleteExternalAccountInput = {
    externalAccount: string
}
export type DeleteExternalAccountOutput = {
    deleteExternalAccount: {
        alwaysNil: string | null
    }
}
export type UserExternalAccountsInput = {
    user: string
    first: number | null
}
export type UserExternalAccountsOutput = {
    node: {
        externalAccounts: {
            nodes: ExternalAccountFields[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    } | null
}
export type ExternalAccountFields = {
    id: string
    user: {
        id: string
        username: string
    }
    serviceType: string
    serviceID: string
    clientID: string
    accountID: string
    createdAt: any
    updatedAt: any
    refreshURL: string | null
    accountData: any | null
}
export type RegistryExtensionFields = {
    id: string
    publisher:
        | ({
              __typename: 'User' | 'Org'
          } & (
              | {
                    id: string
                    username: string
                    displayName: string | null
                    url: string
                }
              | {
                    id: string
                    name: string
                    displayName: string | null
                    url: string
                }
          ))
        | null
    extensionID: string
    extensionIDWithoutRegistry: string
    name: string
    manifest: {
        raw: string
        description: string | null
    } | null
    createdAt: any | null
    updatedAt: any | null
    url: string
    remoteURL: string | null
    registryName: string
    isLocal: boolean
    isWorkInProgress: boolean
    viewerCanAdminister: boolean
}
export type RegistryExtensionsInput = {
    query: string | null
    prioritizeExtensionIDs: string[]
}
export type RegistryExtensionsOutput = {
    extensionRegistry: {
        extensions: {
            nodes: RegistryExtensionFields[]
            error: string | null
        }
    }
}
export type RegistryExtensionFields = {
    id: string
    publisher:
        | ({
              __typename: 'User' | 'Org'
          } & (
              | {
                    id: string
                    username: string
                    displayName: string | null
                    url: string
                }
              | {
                    id: string
                    name: string
                    displayName: string | null
                    url: string
                }
          ))
        | null
    extensionID: string
    extensionIDWithoutRegistry: string
    name: string
    manifest: {
        raw: string
        description: string | null
    } | null
    createdAt: any | null
    updatedAt: any | null
    url: string
    remoteURL: string | null
    registryName: string
    isLocal: boolean
    isWorkInProgress: boolean
    viewerCanAdminister: boolean
}
export type RegistryExtensionFields = {
    id: string
    publisher:
        | ({
              __typename: 'User' | 'Org'
          } & (
              | {
                    id: string
                    username: string
                    displayName: string | null
                    url: string
                }
              | {
                    id: string
                    name: string
                    displayName: string | null
                    url: string
                }
          ))
        | null
    extensionID: string
    extensionIDWithoutRegistry: string
    name: string
    manifest: {
        raw: string
        description: string | null
    } | null
    createdAt: any | null
    updatedAt: any | null
    publishedAt: any | null
    url: string
    remoteURL: string | null
    registryName: string
    isLocal: boolean
    isWorkInProgress: boolean
    viewerCanAdminister: boolean
}
export type RegistryExtensionInput = {
    extensionID: string
}
export type RegistryExtensionOutput = {
    extensionRegistry: {
        extension: RegistryExtensionFields | null
    }
}
export type RegistryExtensionFields = {
    id: string
    publisher:
        | ({
              __typename: 'User' | 'Org'
          } & (
              | {
                    id: string
                    username: string
                    displayName: string | null
                    url: string
                }
              | {
                    id: string
                    name: string
                    displayName: string | null
                    url: string
                }
          ))
        | null
    extensionID: string
    extensionIDWithoutRegistry: string
    name: string
    manifest: {
        raw: string
        description: string | null
    } | null
    createdAt: any | null
    updatedAt: any | null
    publishedAt: any | null
    url: string
    remoteURL: string | null
    registryName: string
    isLocal: boolean
    isWorkInProgress: boolean
    viewerCanAdminister: boolean
}
export type SubmitSurveyInput = {
    input: {
        email: string | null
        score: number
        reason: string | null
        better: string | null
    }
}
export type SubmitSurveyOutput = {
    submitSurvey: {
        alwaysNil: string | null
    } | null
}
export type FetchSurveyResponsesInput = {}
export type FetchSurveyResponsesOutput = {
    surveyResponses: {
        nodes: {
            user: {
                id: string
                username: string
                emails: {
                    email: string
                }[]
            } | null
            email: string | null
            score: number
            reason: string | null
            better: string | null
            createdAt: any
        }[]
        totalCount: number
    }
}
export type FetchAllUsersWithSurveyResponsesInput = {
    activePeriod: ('TODAY' | 'THIS_WEEK' | 'THIS_MONTH' | 'ALL_TIME') | null
    first: number | null
    query: string | null
}
export type FetchAllUsersWithSurveyResponsesOutput = {
    users: {
        nodes: {
            id: string
            username: string
            emails: {
                email: string
            }[]
            surveyResponses: {
                score: number
                reason: string | null
                better: string | null
                createdAt: any
            }[]
            usageStatistics: {
                lastActiveTime: string | null
            }
        }[]
        totalCount: number
    }
}
export type FetchSurveyResponseAggregatesInput = {}
export type FetchSurveyResponseAggregatesOutput = {
    surveyResponses: {
        totalCount: number
        last30DaysCount: number
        averageScore: number
        netPromoterScore: number
    }
}
export type RequestTrialInput = {
    email: string
}
export type RequestTrialOutput = {
    requestTrial: {
        alwaysNil: string | null
    } | null
}
export type StatusMessagesInput = {}
export type StatusMessagesOutput = {
    statusMessages: ({
        __typename: 'CloningProgress' | 'ExternalServiceSyncError' | 'SyncError'
    } & (
        | {
              message: string
          }
        | {
              message: string
          }
        | {
              message: string
              externalService: {
                  id: string
                  displayName: string
              }
          }
    ))[]
}
export type createOrganizationInput = {
    name: string
    displayName: string | null
}
export type createOrganizationOutput = {
    createOrganization: {
        id: string
        name: string
    }
}
export type removeUserFromOrganizationInput = {
    user: string
    organization: string
}
export type removeUserFromOrganizationOutput = {
    removeUserFromOrganization: {
        alwaysNil: string | null
    } | null
}
export type UpdateOrganizationInput = {
    id: string
    displayName: string | null
}
export type UpdateOrganizationOutput = {
    updateOrganization: {
        id: string
    }
}
export type OrganizationInput = {
    name: string
}
export type OrganizationOutput = {
    organization: {
        __typename: 'Org'
        id: string
        name: string
        displayName: string | null
        url: string
        settingsURL: string | null
        viewerPendingInvitation: {
            id: string
            sender: {
                username: string
                displayName: string | null
                avatarURL: string | null
                createdAt: any
            }
            respondURL: string | null
        } | null
        viewerIsMember: boolean
        viewerCanAdminister: boolean
        createdAt: any
    } | null
}
export type RespondToOrganizationInvitationInput = {
    organizationInvitation: string
    responseType: 'ACCEPT' | 'REJECT'
}
export type RespondToOrganizationInvitationOutput = {
    respondToOrganizationInvitation: {
        alwaysNil: string | null
    }
}
export type OrganizationMembersInput = {
    id: string
}
export type OrganizationMembersOutput = {
    node: {
        viewerCanAdminister: boolean
        members: {
            nodes: {
                id: string
                username: string
                displayName: string | null
                avatarURL: string | null
            }[]
            totalCount: number
        }
    } | null
}
export type InviteUserToOrganizationInput = {
    organization: string
    username: string
}
export type InviteUserToOrganizationOutput = {
    inviteUserToOrganization: {
        sentInvitationEmail: boolean
        invitationURL: string
    }
}
export type AddUserToOrganizationInput = {
    organization: string
    username: string
}
export type AddUserToOrganizationOutput = {
    addUserToOrganization: {
        alwaysNil: string | null
    }
}
export type SettingsCascadeFields = {
    subjects: ({
        __typename: string
        latestSettings: {
            id: number
            contents: any
        } | null
        settingsURL: string | null
        viewerCanAdminister: boolean
    } & {
        id: string
        name: string
        displayName: string | null
    } & {
        id: string
        username: string
        displayName: string | null
    } & {
        id: string
        siteID: string
    })[]
    final: string
}
export type ViewerSettingsInput = {}
export type ViewerSettingsOutput = {
    viewerSettings: SettingsCascadeFields
}
export type SettingsCascadeFields = {
    subjects: ({
        __typename: string
        latestSettings: {
            id: number
            contents: any
        } | null
        settingsURL: string | null
        viewerCanAdminister: boolean
    } & {
        id: string
        name: string
        displayName: string | null
    } & {
        id: string
        username: string
        displayName: string | null
    } & {
        id: string
        siteID: string
    })[]
    final: string
}
export type GitRefFields = {
    id: string
    displayName: string
    name: string
    abbrevName: string
    url: string
    target: {
        commit: {
            author: SignatureFields
            committer: SignatureFields | null
            behindAhead: {
                behind: number
                ahead: number
            }
        } | null
    }
}
export type SignatureFields = {
    person: {
        displayName: string
        user: {
            username: string
        } | null
    }
    date: string
}
export type RepositoryGitRefsInput = {
    repo: string
    first: number | null
    query: string | null
    type: 'GIT_BRANCH' | 'GIT_TAG' | 'GIT_REF_OTHER'
    withBehindAhead: boolean
}
export type RepositoryGitRefsOutput = {
    node: {
        gitRefs: {
            nodes: GitRefFields[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    } | null
}
export type GitRefFields = {
    id: string
    displayName: string
    name: string
    abbrevName: string
    url: string
    target: {
        commit: {
            author: SignatureFields
            committer: SignatureFields | null
            behindAhead: {
                behind: number
                ahead: number
            }
        } | null
    }
}
export type SignatureFields = {
    person: {
        displayName: string
        user: {
            username: string
        } | null
    }
    date: string
}
export type FetchCommitsInput = {
    repo: string
    revision: string
    first: number | null
    currentPath: string | null
    query: string | null
}
export type FetchCommitsOutput = {
    node:
        | ({
              __typename: string
          } & {
              commit: {
                  ancestors: {
                      nodes: GitCommitFields[]
                  }
              } | null
          })
        | null
}
export type GitCommitFields = {
    id: string
    oid: any
    abbreviatedOID: string
    message: string
    subject: string
    body: string | null
    author: SignatureFields
    committer: SignatureFields | null
    parents: {
        oid: any
        abbreviatedOID: string
        url: string
    }[]
    url: string
    canonicalURL: string
    externalURLs: {
        url: string
        serviceType: string | null
    }[]
    tree: {
        canonicalURL: string
    } | null
}
export type SignatureFields = {
    person: {
        avatarURL: string
        name: string
        email: string
        displayName: string
        user: {
            id: string
            username: string
            url: string
        } | null
    }
    date: string
}
export type RepositoriesInput = {
    first: number | null
    query: string | null
}
export type RepositoriesOutput = {
    repositories: {
        nodes: {
            id: string
            name: string
        }[]
        totalCount: number | null
        pageInfo: {
            hasNextPage: boolean
        }
    }
}
export type RepositoryGitCommitInput = {
    repo: string
    first: number | null
    revision: string
    query: string | null
}
export type RepositoryGitCommitOutput = {
    node:
        | ({
              __typename: string
          } & {
              commit: {
                  ancestors: {
                      nodes: {
                          id: string
                          oid: any
                          abbreviatedOID: string
                          author: {
                              person: {
                                  name: string
                                  avatarURL: string
                              }
                              date: string
                          }
                          subject: string
                      }[]
                      pageInfo: {
                          hasNextPage: boolean
                      }
                  }
              } | null
          })
        | null
}
export type RepositoryRedirectInput = {
    repoName: string
}
export type RepositoryRedirectOutput = {
    repositoryRedirect:
        | ({
              __typename: 'Repository' | 'Redirect'
          } & (
              | {
                    id: string
                    name: string
                    url: string
                    externalURLs: {
                        url: string
                        serviceType: string | null
                    }[]
                    description: string
                    viewerCanAdminister: boolean
                    defaultBranch: {
                        displayName: string
                    } | null
                }
              | {
                    url: string
                }
          ))
        | null
}
export type ResolveRevInput = {
    repoName: string
    revision: string
}
export type ResolveRevOutput = {
    repositoryRedirect:
        | ({
              __typename: 'Repository' | 'Redirect'
          } & (
              | {
                    mirrorInfo: {
                        cloneInProgress: boolean
                        cloneProgress: string | null
                        cloned: boolean
                    }
                    commit: {
                        oid: any
                        tree: {
                            url: string
                        } | null
                    } | null
                    defaultBranch: {
                        abbrevName: string
                    } | null
                }
              | {
                    url: string
                }
          ))
        | null
}
export type HighlightedFileInput = {
    repoName: string
    commitID: string
    filePath: string
    disableTimeout: boolean
    isLightTheme: boolean
}
export type HighlightedFileOutput = {
    repository: {
        commit: {
            file: {
                isDirectory: boolean
                richHTML: string
                highlight: {
                    aborted: boolean
                    html: string
                }
            } | null
        } | null
    } | null
}
export type FileExternalLinksInput = {
    repoName: string
    revision: string
    filePath: string
}
export type FileExternalLinksOutput = {
    repository: {
        commit: {
            file: {
                externalURLs: {
                    url: string
                    serviceType: string | null
                }[]
            } | null
        } | null
    } | null
}
export type TreeEntriesInput = {
    repoName: string
    revision: string
    commitID: string
    filePath: string
    first: number | null
}
export type TreeEntriesOutput = {
    repository: {
        commit: {
            tree: {
                isRoot: boolean
                url: string
                entries: {
                    name: string
                    path: string
                    isDirectory: boolean
                    url: string
                    submodule: {
                        url: string
                        commit: string
                    } | null
                    isSingleChild: boolean
                }[]
            } | null
        } | null
    } | null
}
export type BlobInput = {
    repoName: string
    commitID: string
    filePath: string
    isLightTheme: boolean
    disableTimeout: boolean
}
export type BlobOutput = {
    repository: {
        commit: {
            file: {
                content: string
                richHTML: string
                highlight: {
                    aborted: boolean
                    html: string
                }
            } | null
        } | null
    } | null
}
export type RepositoryGitBranchesOverviewInput = {
    repo: string
    first: number
    withBehindAhead: boolean
}
export type RepositoryGitBranchesOverviewOutput = {
    node: {
        defaultBranch: GitRefFields | null
        gitRefs: {
            nodes: GitRefFields[]
            pageInfo: {
                hasNextPage: boolean
            }
        }
    } | null
}
export type GitRefFields = {
    id: string
    displayName: string
    name: string
    abbrevName: string
    url: string
    target: {
        commit: {
            author: SignatureFields
            committer: SignatureFields | null
            behindAhead: {
                behind: number
                ahead: number
            }
        } | null
    }
}
export type SignatureFields = {
    person: {
        displayName: string
        user: {
            username: string
        } | null
    }
    date: string
}
export type RepositoryCommitInput = {
    repo: string
    revspec: string
}
export type RepositoryCommitOutput = {
    node: {
        commit:
            | ({
                  __typename: 'GitCommit'
              } & GitCommitFields)
            | null
    } | null
}
export type GitCommitFields = {
    id: string
    oid: any
    abbreviatedOID: string
    message: string
    subject: string
    body: string | null
    author: SignatureFields
    committer: SignatureFields | null
    parents: {
        oid: any
        abbreviatedOID: string
        url: string
    }[]
    url: string
    canonicalURL: string
    externalURLs: {
        url: string
        serviceType: string | null
    }[]
    tree: {
        canonicalURL: string
    } | null
}
export type SignatureFields = {
    person: {
        avatarURL: string
        name: string
        email: string
        displayName: string
        user: {
            id: string
            username: string
            url: string
        } | null
    }
    date: string
}
export type GitCommitFields = {
    id: string
    oid: any
    abbreviatedOID: string
    message: string
    subject: string
    body: string | null
    author: SignatureFields
    committer: SignatureFields | null
    parents: {
        oid: any
        abbreviatedOID: string
        url: string
    }[]
    url: string
    canonicalURL: string
    externalURLs: {
        url: string
        serviceType: string | null
    }[]
    tree: {
        canonicalURL: string
    } | null
}
export type SignatureFields = {
    person: {
        avatarURL: string
        name: string
        email: string
        displayName: string
        user: {
            id: string
            username: string
            url: string
        } | null
    }
    date: string
}
export type RepositoryGitCommitsInput = {
    repo: string
    revspec: string
    first: number | null
    query: string | null
}
export type RepositoryGitCommitsOutput = {
    node: {
        commit: {
            ancestors: {
                nodes: GitCommitFields[]
                pageInfo: {
                    hasNextPage: boolean
                }
            }
        } | null
    } | null
}
export type GitCommitFields = {
    id: string
    oid: any
    abbreviatedOID: string
    message: string
    subject: string
    body: string | null
    author: SignatureFields
    committer: SignatureFields | null
    parents: {
        oid: any
        abbreviatedOID: string
        url: string
    }[]
    url: string
    canonicalURL: string
    externalURLs: {
        url: string
        serviceType: string | null
    }[]
    tree: {
        canonicalURL: string
    } | null
}
export type SignatureFields = {
    person: {
        avatarURL: string
        name: string
        email: string
        displayName: string
        user: {
            id: string
            username: string
            url: string
        } | null
    }
    date: string
}
export type RepositoryComparisonCommitsInput = {
    repo: string
    base: string | null
    head: string | null
    first: number | null
}
export type RepositoryComparisonCommitsOutput = {
    node: {
        comparison: {
            commits: {
                nodes: GitCommitFields[]
                pageInfo: {
                    hasNextPage: boolean
                }
            }
        }
    } | null
}
export type GitCommitFields = {
    id: string
    oid: any
    abbreviatedOID: string
    message: string
    subject: string
    body: string | null
    author: SignatureFields
    committer: SignatureFields | null
    parents: {
        oid: any
        abbreviatedOID: string
        url: string
    }[]
    url: string
    canonicalURL: string
    externalURLs: {
        url: string
        serviceType: string | null
    }[]
    tree: {
        canonicalURL: string
    } | null
}
export type SignatureFields = {
    person: {
        avatarURL: string
        name: string
        email: string
        displayName: string
        user: {
            id: string
            username: string
            url: string
        } | null
    }
    date: string
}
export type RepositoryComparisonDiffInput = {
    repo: string
    base: string | null
    head: string | null
    first: number | null
    after: string | null
    isLightTheme: boolean
}
export type RepositoryComparisonDiffOutput = {
    node: {
        comparison: {
            fileDiffs: {
                nodes: FileDiffFields[]
                totalCount: number | null
                pageInfo: {
                    endCursor: string | null
                    hasNextPage: boolean
                }
                diffStat: DiffStatFields
            }
        }
    } | null
}
export type FileDiffFields = {
    __typename: 'FileDiff'
    oldPath: string | null
    oldFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newFile: {
        __typename: string
        binary: boolean
        byteSize: number
    } | null
    newPath: string | null
    mostRelevantFile: {
        __typename: string
        url: string
    }
    hunks: {
        oldRange: {
            startLine: number
            lines: number
        }
        oldNoNewlineAt: boolean
        newRange: {
            startLine: number
            lines: number
        }
        section: string | null
        highlight: {
            aborted: boolean
            lines: {
                kind: 'ADDED' | 'UNCHANGED' | 'DELETED'
                html: string
            }[]
        }
    }[]
    stat: {
        added: number
        changed: number
        deleted: number
    }
    internalID: string
}
export type DiffStatFields = {
    added: number
    changed: number
    deleted: number
}
export type RepositoryComparisonInput = {
    repo: string
    base: string | null
    head: string | null
}
export type RepositoryComparisonOutput = {
    node: {
        comparison: {
            range: {
                expr: string
                baseRevSpec: {
                    object: {
                        oid: any
                    } | null
                }
                headRevSpec: {
                    object: {
                        oid: any
                    } | null
                }
            }
        }
    } | null
}
export type ExploreRepositoriesInput = {
    first: number | null
    names: string[] | null
}
export type ExploreRepositoriesOutput = {
    repositories: {
        nodes: {
            name: string
            description: string
            url: string
        }[]
    }
}
export type RepositoryTextSearchIndexInput = {
    id: string
}
export type RepositoryTextSearchIndexOutput = {
    node: {
        textSearchIndex: {
            status: {
                updatedAt: any
                contentByteSize: number
                contentFilesCount: number
                indexByteSize: number
                indexShardsCount: number
            } | null
            refs: {
                ref: {
                    displayName: string
                    url: string
                }
                indexed: boolean
                current: boolean
                indexedCommit: {
                    oid: any
                    abbreviatedOID: string
                    commit: {
                        url: string
                    } | null
                } | null
            }[]
        } | null
    } | null
}
export type RepositoryInput = {
    name: string
}
export type RepositoryOutput = {
    repository: {
        id: string
        name: string
        isPrivate: boolean
        viewerCanAdminister: boolean
        mirrorInfo: {
            remoteURL: string
            cloneInProgress: boolean
            cloneProgress: string | null
            cloned: boolean
            updatedAt: any | null
            updateSchedule: {
                due: any
                index: number
                total: number
            } | null
            updateQueue: {
                updating: boolean
                index: number
                total: number
            } | null
        }
        externalServices: {
            nodes: {
                id: string
                kind:
                    | 'AWSCODECOMMIT'
                    | 'BITBUCKETCLOUD'
                    | 'BITBUCKETSERVER'
                    | 'GITHUB'
                    | 'GITLAB'
                    | 'GITOLITE'
                    | 'PHABRICATOR'
                    | 'OTHER'
                displayName: string
            }[]
        }
        permissionsInfo: {
            syncedAt: any | null
            updatedAt: any
        } | null
    } | null
}
export type RepositoryContributorsInput = {
    repo: string
    first: number | null
    revisionRange: string | null
    after: string | null
    path: string | null
}
export type RepositoryContributorsOutput = {
    node: {
        contributors: {
            nodes: {
                person: {
                    name: string
                    displayName: string
                    email: string
                    avatarURL: string
                    user: {
                        username: string
                        url: string
                    } | null
                }
                count: number
                commits: {
                    nodes: {
                        oid: any
                        abbreviatedOID: string
                        url: string
                        subject: string
                        author: {
                            date: string
                        }
                    }[]
                }
            }[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    } | null
}
export type TreeCommitsInput = {
    repo: string
    revspec: string
    first: number | null
    filePath: string | null
    after: string | null
}
export type TreeCommitsOutput = {
    node:
        | ({
              __typename: string
          } & {
              commit: {
                  ancestors: {
                      nodes: GitCommitFields[]
                      pageInfo: {
                          hasNextPage: boolean
                      }
                  }
              } | null
          })
        | null
}
export type GitCommitFields = {
    id: string
    oid: any
    abbreviatedOID: string
    message: string
    subject: string
    body: string | null
    author: SignatureFields
    committer: SignatureFields | null
    parents: {
        oid: any
        abbreviatedOID: string
        url: string
    }[]
    url: string
    canonicalURL: string
    externalURLs: {
        url: string
        serviceType: string | null
    }[]
    tree: {
        canonicalURL: string
    } | null
}
export type SignatureFields = {
    person: {
        avatarURL: string
        name: string
        email: string
        displayName: string
        user: {
            id: string
            username: string
            url: string
        } | null
    }
    date: string
}
export type SearchInput = {
    query: string
    version: 'V1' | 'V2'
    patternType: 'literal' | 'regexp' | 'structural'
    useCodemod: boolean
    versionContext: string | null
}
export type SearchOutput = {
    search: {
        results: {
            __typename: 'SearchResults'
            limitHit: boolean
            matchCount: number
            approximateResultCount: string
            missing: {
                name: string
            }[]
            cloning: {
                name: string
            }[]
            repositoriesCount: number
            timedout: {
                name: string
            }[]
            indexUnavailable: boolean
            dynamicFilters: {
                value: string
                label: string
                count: number
                limitHit: boolean
                kind: string
            }[]
            results: ({
                __typename: 'FileMatch' | 'CommitSearchResult' | 'Repository' | 'CodemodResult'
            } & (
                | {
                      id: string
                      name: string
                      __typename: 'Repository'
                      label: {
                          html: string
                      }
                      url: string
                      icon: string
                      detail: {
                          html: string
                      }
                      matches: {
                          url: string
                          body: {
                              text: string
                              html: string
                          }
                          highlights: {
                              line: number
                              character: number
                              length: number
                          }[]
                      }[]
                  }
                | {
                      file: {
                          path: string
                          url: string
                          commit: {
                              oid: any
                          }
                      }
                      repository: {
                          name: string
                          url: string
                      }
                      revSpec:
                          | ({
                                __typename: 'GitRef' | 'GitRevSpecExpr' | 'GitObject'
                            } & (
                                | {
                                      displayName: string
                                      url: string
                                  }
                                | {
                                      expr: string
                                      object: {
                                          commit: {
                                              url: string
                                          } | null
                                      } | null
                                  }
                                | {
                                      abbreviatedOID: string
                                      commit: {
                                          url: string
                                      } | null
                                  }
                            ))
                          | null
                      limitHit: boolean
                      symbols: {
                          name: string
                          containerName: string | null
                          url: string
                          kind:
                              | 'UNKNOWN'
                              | 'FILE'
                              | 'MODULE'
                              | 'NAMESPACE'
                              | 'PACKAGE'
                              | 'CLASS'
                              | 'METHOD'
                              | 'PROPERTY'
                              | 'FIELD'
                              | 'CONSTRUCTOR'
                              | 'ENUM'
                              | 'INTERFACE'
                              | 'FUNCTION'
                              | 'VARIABLE'
                              | 'CONSTANT'
                              | 'STRING'
                              | 'NUMBER'
                              | 'BOOLEAN'
                              | 'ARRAY'
                              | 'OBJECT'
                              | 'KEY'
                              | 'NULL'
                              | 'ENUMMEMBER'
                              | 'STRUCT'
                              | 'EVENT'
                              | 'OPERATOR'
                              | 'TYPEPARAMETER'
                      }[]
                      lineMatches: {
                          preview: string
                          lineNumber: number
                          offsetAndLengths: TODO_SIMON[]
                      }[]
                  }
                | {
                      __typename: 'CommitSearchResult'
                      label: {
                          html: string
                      }
                      url: string
                      icon: string
                      detail: {
                          html: string
                      }
                      matches: {
                          url: string
                          body: {
                              text: string
                              html: string
                          }
                          highlights: {
                              line: number
                              character: number
                              length: number
                          }[]
                      }[]
                  }
                | {
                      __typename: 'CodemodResult'
                      label: {
                          html: string
                      }
                      url: string
                      icon: string
                      detail: {
                          html: string
                      }
                      matches: {
                          url: string
                          body: {
                              text: string
                              html: string
                          }
                          highlights: {
                              line: number
                              character: number
                              length: number
                          }[]
                      }[]
                  }
            ))[]
            alert: {
                title: string
                description: string | null
                proposedQueries:
                    | {
                          description: string | null
                          query: string
                      }[]
                    | null
            } | null
            elapsedMilliseconds: number
        }
    } | null
}
export type RepoGroupsInput = {}
export type RepoGroupsOutput = {
    repoGroups: {
        __typename: 'RepoGroup'
        name: string
    }[]
}
export type SearchSuggestionsInput = {
    query: string
}
export type SearchSuggestionsOutput = {
    search: {
        suggestions: ({
            __typename: 'Repository' | 'File' | 'Symbol' | 'Language'
        } & (
            | {
                  name: string
              }
            | {
                  path: string
                  name: string
                  isDirectory: boolean
                  url: string
                  repository: {
                      name: string
                  }
              }
            | {
                  name: string
                  containerName: string | null
                  url: string
                  kind:
                      | 'UNKNOWN'
                      | 'FILE'
                      | 'MODULE'
                      | 'NAMESPACE'
                      | 'PACKAGE'
                      | 'CLASS'
                      | 'METHOD'
                      | 'PROPERTY'
                      | 'FIELD'
                      | 'CONSTRUCTOR'
                      | 'ENUM'
                      | 'INTERFACE'
                      | 'FUNCTION'
                      | 'VARIABLE'
                      | 'CONSTANT'
                      | 'STRING'
                      | 'NUMBER'
                      | 'BOOLEAN'
                      | 'ARRAY'
                      | 'OBJECT'
                      | 'KEY'
                      | 'NULL'
                      | 'ENUMMEMBER'
                      | 'STRUCT'
                      | 'EVENT'
                      | 'OPERATOR'
                      | 'TYPEPARAMETER'
                  location: {
                      resource: {
                          path: string
                          repository: {
                              name: string
                          }
                      }
                  }
              }
        ))[]
    } | null
}
export type ReposByQueryInput = {
    query: string
}
export type ReposByQueryOutput = {
    search: {
        results: {
            repositories: {
                name: string
                url: string
            }[]
        }
    } | null
}
export type SavedSearchFields = {
    id: string
    description: string
    notify: boolean
    notifySlack: boolean
    query: string
    namespace: {
        id: string
    }
    slackWebhookURL: string | null
}
export type savedSearchesInput = {}
export type savedSearchesOutput = {
    savedSearches: SavedSearchFields[]
}
export type SavedSearchFields = {
    id: string
    description: string
    notify: boolean
    notifySlack: boolean
    query: string
    namespace: {
        id: string
    }
    slackWebhookURL: string | null
}
export type SavedSearchInput = {
    id: string
}
export type SavedSearchOutput = {
    node: {
        id: string
        description: string
        query: string
        notify: boolean
        notifySlack: boolean
        slackWebhookURL: string | null
        namespace: {
            id: string
        }
    } | null
}
export type CreateSavedSearchInput = {
    description: string
    query: string
    notifyOwner: boolean
    notifySlack: boolean
    userID: string | null
    orgID: string | null
}
export type CreateSavedSearchOutput = {
    createSavedSearch: SavedSearchFields
}
export type SavedSearchFields = {
    id: string
    description: string
    notify: boolean
    notifySlack: boolean
    query: string
    namespace: {
        id: string
    }
    slackWebhookURL: string | null
}
export type UpdateSavedSearchInput = {
    id: string
    description: string
    query: string
    notifyOwner: boolean
    notifySlack: boolean
    userID: string | null
    orgID: string | null
}
export type UpdateSavedSearchOutput = {
    updateSavedSearch: SavedSearchFields
}
export type SavedSearchFields = {
    id: string
    description: string
    notify: boolean
    notifySlack: boolean
    query: string
    namespace: {
        id: string
    }
    slackWebhookURL: string | null
}
export type DeleteSavedSearchInput = {
    id: string
}
export type DeleteSavedSearchOutput = {
    deleteSavedSearch: {
        alwaysNil: string | null
    } | null
}
export type highlightCodeInput = {
    code: string
    fuzzyLanguage: string
    disableTimeout: boolean
    isLightTheme: boolean
}
export type highlightCodeOutput = {
    highlightCode: string
}
export type ManyReposWarningInput = {
    first: number | null
}
export type ManyReposWarningOutput = {
    repositories: {
        nodes: {
            id: string
        }[]
    }
}
export type SettingsCascadeInput = {
    subject: string
}
export type SettingsCascadeOutput = {
    settingsSubject: {
        settingsCascade: {
            subjects: {
                latestSettings: {
                    id: number
                    contents: any
                } | null
            }[]
        }
    } | null
}
export type AccessTokenFields = {
    id: string
    scopes: string[]
    note: string
    createdAt: any
    lastUsedAt: any | null
    subject: {
        username: string
    }
    creator: {
        username: string
    }
}
export type DeleteAccessTokenInput = {
    tokenID: string
}
export type DeleteAccessTokenOutput = {
    deleteAccessToken: {
        alwaysNil: string | null
    }
}
export type SiteFlagsInput = {}
export type SiteFlagsOutput = {
    site: {
        needsRepositoryConfiguration: boolean
        freeUsersExceeded: boolean
        alerts: {
            type: 'INFO' | 'WARNING' | 'ERROR'
            message: string
            isDismissibleWithKey: string | null
        }[]
        authProviders: {
            nodes: {
                serviceType: string
                serviceID: string
                clientID: string
                displayName: string
                isBuiltin: boolean
                authenticationURL: string | null
            }[]
        }
        disableBuiltInSearches: boolean
        sendsEmailVerificationEmails: boolean
        updateCheck: {
            pending: boolean
            checkedAt: any | null
            errorMessage: string | null
            updateVersionAvailable: string | null
        }
        productSubscription: {
            license: {
                expiresAt: any
            } | null
            noLicenseWarningUserCount: number | null
        }
        productVersion: string
    }
}
export type addExternalServiceInput = {
    input: {
        kind:
            | 'AWSCODECOMMIT'
            | 'BITBUCKETCLOUD'
            | 'BITBUCKETSERVER'
            | 'GITHUB'
            | 'GITLAB'
            | 'GITOLITE'
            | 'PHABRICATOR'
            | 'OTHER'
        displayName: string
        config: string
    }
}
export type addExternalServiceOutput = {
    addExternalService: {
        id: string
        kind:
            | 'AWSCODECOMMIT'
            | 'BITBUCKETCLOUD'
            | 'BITBUCKETSERVER'
            | 'GITHUB'
            | 'GITLAB'
            | 'GITOLITE'
            | 'PHABRICATOR'
            | 'OTHER'
        displayName: string
        warning: string | null
    }
}
export type externalServiceFields = {
    id: string
    kind:
        | 'AWSCODECOMMIT'
        | 'BITBUCKETCLOUD'
        | 'BITBUCKETSERVER'
        | 'GITHUB'
        | 'GITLAB'
        | 'GITOLITE'
        | 'PHABRICATOR'
        | 'OTHER'
    displayName: string
    config: any
    warning: string | null
    webhookURL: string | null
}
export type UpdateExternalServiceInput = {
    input: {
        id: string
        displayName: string | null
        config: string | null
    }
}
export type UpdateExternalServiceOutput = {
    updateExternalService: externalServiceFields
}
export type externalServiceFields = {
    id: string
    kind:
        | 'AWSCODECOMMIT'
        | 'BITBUCKETCLOUD'
        | 'BITBUCKETSERVER'
        | 'GITHUB'
        | 'GITLAB'
        | 'GITOLITE'
        | 'PHABRICATOR'
        | 'OTHER'
    displayName: string
    config: any
    warning: string | null
    webhookURL: string | null
}
export type ExternalServiceInput = {
    id: string
}
export type ExternalServiceOutput = {
    node:
        | ({
              __typename: string
          } & externalServiceFields)
        | null
}
export type externalServiceFields = {
    id: string
    kind:
        | 'AWSCODECOMMIT'
        | 'BITBUCKETCLOUD'
        | 'BITBUCKETSERVER'
        | 'GITHUB'
        | 'GITLAB'
        | 'GITOLITE'
        | 'PHABRICATOR'
        | 'OTHER'
    displayName: string
    config: any
    warning: string | null
    webhookURL: string | null
}
export type DeleteExternalServiceInput = {
    externalService: string
}
export type DeleteExternalServiceOutput = {
    deleteExternalService: {
        alwaysNil: string | null
    }
}
export type ExternalServicesInput = {
    first: number | null
}
export type ExternalServicesOutput = {
    externalServices: {
        nodes: {
            id: string
            kind:
                | 'AWSCODECOMMIT'
                | 'BITBUCKETCLOUD'
                | 'BITBUCKETSERVER'
                | 'GITHUB'
                | 'GITLAB'
                | 'GITOLITE'
                | 'PHABRICATOR'
                | 'OTHER'
            displayName: string
            config: any
        }[]
        totalCount: number
        pageInfo: {
            hasNextPage: boolean
        }
    }
}
export type AccessTokensInput = {
    first: number | null
}
export type AccessTokensOutput = {
    site: {
        accessTokens: {
            nodes: AccessTokenFields[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    }
}
export type AccessTokenFields = {
    id: string
    scopes: string[]
    note: string
    createdAt: any
    lastUsedAt: any | null
    subject: {
        username: string
    }
    creator: {
        username: string
    }
}
export type UsersInput = {
    first: number | null
    query: string | null
}
export type UsersOutput = {
    users: {
        nodes: {
            id: string
            username: string
            displayName: string | null
            emails: {
                email: string
                verified: boolean
                verificationPending: boolean
                viewerCanManuallyVerify: boolean
            }[]
            createdAt: any
            siteAdmin: boolean
            latestSettings: {
                createdAt: any
                contents: any
            } | null
            organizations: {
                nodes: {
                    name: string
                }[]
            }
        }[]
        totalCount: number
    }
}
export type OrganizationsInput = {
    first: number | null
    query: string | null
}
export type OrganizationsOutput = {
    organizations: {
        nodes: {
            id: string
            name: string
            displayName: string | null
            createdAt: any
            latestSettings: {
                createdAt: any
                contents: any
            } | null
            members: {
                totalCount: number
            }
        }[]
        totalCount: number
    }
}
export type RepositoriesInput = {
    first: number | null
    query: string | null
    cloned: boolean | null
    cloneInProgress: boolean | null
    notCloned: boolean | null
    indexed: boolean | null
    notIndexed: boolean | null
}
export type RepositoriesOutput = {
    repositories: {
        nodes: {
            id: string
            name: string
            createdAt: any
            viewerCanAdminister: boolean
            url: string
            mirrorInfo: {
                cloned: boolean
                cloneInProgress: boolean
                updatedAt: any | null
            }
        }[]
        totalCount: number | null
        pageInfo: {
            hasNextPage: boolean
        }
    }
}
export type UpdateMirrorRepositoryInput = {
    repository: string
}
export type UpdateMirrorRepositoryOutput = {
    updateMirrorRepository: {
        alwaysNil: string | null
    }
}
export type CheckMirrorRepositoryConnectionInput = {
    repository: string | null
    name: string | null
}
export type CheckMirrorRepositoryConnectionOutput = {
    checkMirrorRepositoryConnection: {
        error: string | null
    }
}
export type ScheduleRepositoryPermissionsSyncInput = {
    repository: string
}
export type ScheduleRepositoryPermissionsSyncOutput = {
    scheduleRepositoryPermissionsSync: {
        alwaysNil: string | null
    }
}
export type ScheduleUserPermissionsSyncInput = {
    user: string
}
export type ScheduleUserPermissionsSyncOutput = {
    scheduleUserPermissionsSync: {
        alwaysNil: string | null
    }
}
export type UserUsageStatisticsInput = {
    activePeriod: ('TODAY' | 'THIS_WEEK' | 'THIS_MONTH' | 'ALL_TIME') | null
    query: string | null
    first: number | null
}
export type UserUsageStatisticsOutput = {
    users: {
        nodes: {
            id: string
            username: string
            usageStatistics: {
                searchQueries: number
                pageViews: number
                codeIntelligenceActions: number
                lastActiveTime: string | null
                lastActiveCodeHostIntegrationTime: string | null
            }
        }[]
        totalCount: number
    }
}
export type SiteUsageStatisticsInput = {}
export type SiteUsageStatisticsOutput = {
    site: {
        usageStatistics: {
            daus: {
                userCount: number
                registeredUserCount: number
                anonymousUserCount: number
                startTime: string
            }[]
            waus: {
                userCount: number
                registeredUserCount: number
                anonymousUserCount: number
                startTime: string
            }[]
            maus: {
                userCount: number
                registeredUserCount: number
                anonymousUserCount: number
                startTime: string
            }[]
        }
    }
}
export type SiteInput = {}
export type SiteOutput = {
    site: {
        id: string
        canReloadSite: boolean
        configuration: {
            id: number
            effectiveContents: any
            validationMessages: string[]
        }
    }
}
export type AllConfigInput = {
    first: number | null
}
export type AllConfigOutput = {
    site: {
        id: string
        configuration: {
            id: number
            effectiveContents: any
        }
        latestSettings: {
            contents: any
        } | null
        settingsCascade: {
            final: string
        }
    }
    externalServices: {
        nodes: {
            id: string
            kind:
                | 'AWSCODECOMMIT'
                | 'BITBUCKETCLOUD'
                | 'BITBUCKETSERVER'
                | 'GITHUB'
                | 'GITLAB'
                | 'GITOLITE'
                | 'PHABRICATOR'
                | 'OTHER'
            displayName: string
            config: any
            createdAt: any
            updatedAt: any
            warning: string | null
        }[]
    }
    viewerSettings: SettingsCascadeFields
}
export type SettingsCascadeFields = {
    subjects: {
        __typename: string
        latestSettings: {
            id: number
            contents: any
        } | null
        settingsURL: string | null
    }[]
    final: string
}
export type UpdateSiteConfigurationInput = {
    lastID: number
    input: string
}
export type UpdateSiteConfigurationOutput = {
    updateSiteConfiguration: boolean
}
export type ReloadSiteInput = {}
export type ReloadSiteOutput = {
    reloadSite: {
        alwaysNil: string | null
    } | null
}
export type SetUserIsSiteAdminInput = {
    userID: string
    siteAdmin: boolean
}
export type SetUserIsSiteAdminOutput = {
    setUserIsSiteAdmin: {
        alwaysNil: string | null
    } | null
}
export type RandomizeUserPasswordInput = {
    user: string
}
export type RandomizeUserPasswordOutput = {
    randomizeUserPassword: {
        resetPasswordURL: string | null
    }
}
export type DeleteUserInput = {
    user: string
    hard: boolean | null
}
export type DeleteUserOutput = {
    deleteUser: {
        alwaysNil: string | null
    } | null
}
export type CreateUserInput = {
    username: string
    email: string | null
}
export type CreateUserOutput = {
    createUser: {
        resetPasswordURL: string | null
    }
}
export type DeleteOrganizationInput = {
    organization: string
}
export type DeleteOrganizationOutput = {
    deleteOrganization: {
        alwaysNil: string | null
    } | null
}
export type SiteUpdateCheckInput = {}
export type SiteUpdateCheckOutput = {
    site: {
        buildVersion: string
        productVersion: string
        updateCheck: {
            pending: boolean
            checkedAt: any | null
            errorMessage: string | null
            updateVersionAvailable: string | null
        }
    }
}
export type SiteMonitoringStatisticsInput = {
    days: number
}
export type SiteMonitoringStatisticsOutput = {
    site: {
        monitoringStatistics: {
            alerts: {
                serviceName: string
                name: string
                timestamp: any
                average: number
            }[]
        }
    }
}
export type OverviewInput = {}
export type OverviewOutput = {
    repositories: {
        totalCount: number | null
    }
    users: {
        totalCount: number
    }
    organizations: {
        totalCount: number
    }
    surveyResponses: {
        totalCount: number
        averageScore: number
    }
}
export type WAUsInput = {}
export type WAUsOutput = {
    site: {
        usageStatistics: {
            waus: {
                userCount: number
                registeredUserCount: number
                anonymousUserCount: number
                startTime: string
            }[]
        }
    }
}
export type SymbolsInput = {
    repo: string
    revision: string
    first: number | null
    query: string | null
    includePatterns: string[] | null
}
export type SymbolsOutput = {
    node:
        | ({
              __typename: string
          } & {
              commit: {
                  symbols: {
                      pageInfo: {
                          hasNextPage: boolean
                      }
                      nodes: {
                          name: string
                          containerName: string | null
                          kind:
                              | 'UNKNOWN'
                              | 'FILE'
                              | 'MODULE'
                              | 'NAMESPACE'
                              | 'PACKAGE'
                              | 'CLASS'
                              | 'METHOD'
                              | 'PROPERTY'
                              | 'FIELD'
                              | 'CONSTRUCTOR'
                              | 'ENUM'
                              | 'INTERFACE'
                              | 'FUNCTION'
                              | 'VARIABLE'
                              | 'CONSTANT'
                              | 'STRING'
                              | 'NUMBER'
                              | 'BOOLEAN'
                              | 'ARRAY'
                              | 'OBJECT'
                              | 'KEY'
                              | 'NULL'
                              | 'ENUMMEMBER'
                              | 'STRUCT'
                              | 'EVENT'
                              | 'OPERATOR'
                              | 'TYPEPARAMETER'
                          language: string
                          location: {
                              resource: {
                                  path: string
                              }
                              range: {
                                  start: {
                                      line: number
                                      character: number
                                  }
                                  end: {
                                      line: number
                                      character: number
                                  }
                              } | null
                          }
                          url: string
                      }[]
                  }
              } | null
          })
        | null
}
export type ActivationStatusInput = {}
export type ActivationStatusOutput = {
    externalServices: {
        totalCount: number
    }
    repositories: {
        totalCount: number | null
    }
    viewerSettings: {
        final: string
    }
    users: {
        totalCount: number
    }
    currentUser: {
        usageStatistics: {
            searchQueries: number
            findReferencesActions: number
            codeIntelligenceActions: number
        }
    } | null
}
export type ActivationStatusInput = {}
export type ActivationStatusOutput = {
    currentUser: {
        usageStatistics: {
            searchQueries: number
            findReferencesActions: number
            codeIntelligenceActions: number
        }
    } | null
}
export type UserEventLogsInput = {
    user: string
    first: number | null
}
export type UserEventLogsOutput = {
    node: {
        eventLogs: {
            nodes: {
                name: string
                source: 'WEB' | 'CODEHOSTINTEGRATION' | 'BACKEND'
                url: string
                timestamp: any
            }[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    } | null
}
export type UserInput = {
    username: string
    siteAdmin: boolean
}
export type UserOutput = {
    user: {
        __typename: 'User'
        id: string
        username: string
        displayName: string | null
        url: string
        settingsURL: string | null
        avatarURL: string | null
        viewerCanAdminister: boolean
        siteAdmin: boolean
        builtinAuth: boolean
        createdAt: any
        emails: {
            email: string
            verified: boolean
        }[]
        organizations: {
            nodes: {
                id: string
                displayName: string | null
                name: string
            }[]
        }
        permissionsInfo: {
            syncedAt: any | null
            updatedAt: any
        } | null
    } | null
}
export type updateUserInput = {
    user: string
    username: string | null
    displayName: string | null
    avatarURL: string | null
}
export type updateUserOutput = {
    updateUser: {
        alwaysNil: string | null
    }
}
export type updatePasswordInput = {
    oldPassword: string
    newPassword: string
}
export type updatePasswordOutput = {
    updatePassword: {
        alwaysNil: string | null
    } | null
}
export type SetUserEmailVerifiedInput = {
    user: string
    email: string
    verified: boolean
}
export type SetUserEmailVerifiedOutput = {
    setUserEmailVerified: {
        alwaysNil: string | null
    }
}
export type logUserEventInput = {
    event:
        | 'PAGEVIEW'
        | 'SEARCHQUERY'
        | 'CODEINTEL'
        | 'CODEINTELREFS'
        | 'CODEINTELINTEGRATION'
        | 'CODEINTELINTEGRATIONREFS'
        | 'STAGEMANAGE'
        | 'STAGEPLAN'
        | 'STAGECODE'
        | 'STAGEREVIEW'
        | 'STAGEVERIFY'
        | 'STAGEPACKAGE'
        | 'STAGEDEPLOY'
        | 'STAGECONFIGURE'
        | 'STAGEMONITOR'
        | 'STAGESECURE'
        | 'STAGEAUTOMATE'
    userCookieID: string
}
export type logUserEventOutput = {
    logUserEvent: {
        alwaysNil: string | null
    } | null
}
export type logEventInput = {
    event: string
    userCookieID: string
    url: string
    source: 'WEB' | 'CODEHOSTINTEGRATION' | 'BACKEND'
    argument: string | null
}
export type logEventOutput = {
    logEvent: {
        alwaysNil: string | null
    } | null
}
export type CreateAccessTokenInput = {
    user: string
    scopes: string[]
    note: string
}
export type CreateAccessTokenOutput = {
    createAccessToken: {
        id: string
        token: string
    }
}
export type AccessTokensInput = {
    user: string
    first: number | null
}
export type AccessTokensOutput = {
    node: {
        accessTokens: {
            nodes: AccessTokenFields[]
            totalCount: number
            pageInfo: {
                hasNextPage: boolean
            }
        }
    } | null
}
export type AccessTokenFields = {
    id: string
    scopes: string[]
    note: string
    createdAt: any
    lastUsedAt: any | null
    subject: {
        username: string
    }
    creator: {
        username: string
    }
}
export type AddUserEmailInput = {
    user: string
    email: string
}
export type AddUserEmailOutput = {
    addUserEmail: {
        alwaysNil: string | null
    }
}
export type RemoveUserEmailInput = {
    user: string
    email: string
}
export type RemoveUserEmailOutput = {
    removeUserEmail: {
        alwaysNil: string | null
    }
}
export type UserEmailsInput = {
    user: string
}
export type UserEmailsOutput = {
    node: {
        emails: {
            email: string
            isPrimary: boolean
            verified: boolean
            verificationPending: boolean
            viewerCanManuallyVerify: boolean
        }[]
    } | null
}
export type UserInput = {
    user: string
}
export type UserOutput = {
    node: {
        id: string
        username: string
        displayName: string | null
        avatarURL: string | null
        viewerCanChangeUsername: boolean
    } | null
}
export interface AllOperations {
    CurrentAuthState: (input: CurrentAuthStateInput) => CurrentAuthStateOutput
    RepositoryID: (input: RepositoryIDInput) => RepositoryIDOutput
    CreateChangeset: (input: CreateChangesetInput) => CreateChangesetOutput
    AddChangeSetToCampaign: (input: AddChangeSetToCampaignInput) => AddChangeSetToCampaignOutput
    UpdateCampaign: (input: UpdateCampaignInput) => UpdateCampaignOutput
    CreateCampaign: (input: CreateCampaignInput) => CreateCampaignOutput
    RetryCampaignChangesets: (input: RetryCampaignChangesetsInput) => RetryCampaignChangesetsOutput
    PublishCampaignChangesets: (input: PublishCampaignChangesetsInput) => PublishCampaignChangesetsOutput
    CloseCampaign: (input: CloseCampaignInput) => CloseCampaignOutput
    DeleteCampaign: (input: DeleteCampaignInput) => DeleteCampaignOutput
    CampaignByID: (input: CampaignByIDInput) => CampaignByIDOutput
    PatchSetByID: (input: PatchSetByIDInput) => PatchSetByIDOutput
    CampaignChangesets: (input: CampaignChangesetsInput) => CampaignChangesetsOutput
    CampaignPatches: (input: CampaignPatchesInput) => CampaignPatchesOutput
    PatchSetPatches: (input: PatchSetPatchesInput) => PatchSetPatchesOutput
    PublishChangeset: (input: PublishChangesetInput) => PublishChangesetOutput
    SyncChangeset: (input: SyncChangesetInput) => SyncChangesetOutput
    ExternalChangesetFileDiffs: (input: ExternalChangesetFileDiffsInput) => ExternalChangesetFileDiffsOutput
    PatchFileDiffs: (input: PatchFileDiffsInput) => PatchFileDiffsOutput
    Campaigns: (input: CampaignsInput) => CampaignsOutput
    Campaigns: (input: CampaignsInput) => CampaignsOutput
    LsifUploads: (input: LsifUploadsInput) => LsifUploadsOutput
    LsifUploads: (input: LsifUploadsInput) => LsifUploadsOutput
    LsifUpload: (input: LsifUploadInput) => LsifUploadOutput
    DeleteLsifUpload: (input: DeleteLsifUploadInput) => DeleteLsifUploadOutput
    LsifIndexes: (input: LsifIndexesInput) => LsifIndexesOutput
    LsifIndexes: (input: LsifIndexesInput) => LsifIndexesOutput
    LsifIndex: (input: LsifIndexInput) => LsifIndexOutput
    DeleteLsifIndex: (input: DeleteLsifIndexInput) => DeleteLsifIndexOutput
    ProductPlans: (input: ProductPlansInput) => ProductPlansOutput
    ExploreExtensions: (input: ExploreExtensionsInput) => ExploreExtensionsOutput
    UpdateRegistryExtension: (input: UpdateRegistryExtensionInput) => UpdateRegistryExtensionOutput
    PublishRegistryExtension: (input: PublishRegistryExtensionInput) => PublishRegistryExtensionOutput
    CreateRegistryExtension: (input: CreateRegistryExtensionInput) => CreateRegistryExtensionOutput
    DeleteRegistryExtension: (input: DeleteRegistryExtensionInput) => DeleteRegistryExtensionOutput
    ViewerRegistryPublishers: (input: ViewerRegistryPublishersInput) => ViewerRegistryPublishersOutput
    ViewerNamespaces: (input: ViewerNamespacesInput) => ViewerNamespacesOutput
    LsifUploads: (input: LsifUploadsInput) => LsifUploadsOutput
    LsifUpload: (input: LsifUploadInput) => LsifUploadOutput
    DeleteLsifUpload: (input: DeleteLsifUploadInput) => DeleteLsifUploadOutput
    LsifIndexes: (input: LsifIndexesInput) => LsifIndexesOutput
    LsifIndex: (input: LsifIndexInput) => LsifIndexOutput
    DeleteLsifIndex: (input: DeleteLsifIndexInput) => DeleteLsifIndexOutput
    SearchResultsStats: (input: SearchResultsStatsInput) => SearchResultsStatsOutput
    AuthProviders: (input: AuthProvidersInput) => AuthProvidersOutput
    ExternalAccounts: (input: ExternalAccountsInput) => ExternalAccountsOutput
    RegistryExtensions: (input: RegistryExtensionsInput) => RegistryExtensionsOutput
    LsifUpload: (input: LsifUploadInput) => LsifUploadOutput
    SetCustomerBilling: (input: SetCustomerBillingInput) => SetCustomerBillingOutput
    Customers: (input: CustomersInput) => CustomersOutput
    CreateProductSubscription: (input: CreateProductSubscriptionInput) => CreateProductSubscriptionOutput
    ProductSubscriptionAccounts: (input: ProductSubscriptionAccountsInput) => ProductSubscriptionAccountsOutput
    GenerateProductLicenseForSubscription: (
        input: GenerateProductLicenseForSubscriptionInput
    ) => GenerateProductLicenseForSubscriptionOutput
    ProductLicenses: (input: ProductLicensesInput) => ProductLicensesOutput
    SetProductSubscriptionBilling: (input: SetProductSubscriptionBillingInput) => SetProductSubscriptionBillingOutput
    ProductSubscription: (input: ProductSubscriptionInput) => ProductSubscriptionOutput
    ProductLicenses: (input: ProductLicensesInput) => ProductLicensesOutput
    ArchiveProductSubscription: (input: ArchiveProductSubscriptionInput) => ArchiveProductSubscriptionOutput
    ProductSubscriptions: (input: ProductSubscriptionsInput) => ProductSubscriptionsOutput
    ProductLicenseInfo: (input: ProductLicenseInfoInput) => ProductLicenseInfoOutput
    PreviewProductSubscriptionInvoice: (
        input: PreviewProductSubscriptionInvoiceInput
    ) => PreviewProductSubscriptionInvoiceOutput
    ProductSubscription: (input: ProductSubscriptionInput) => ProductSubscriptionOutput
    UpdatePaidProductSubscription: (input: UpdatePaidProductSubscriptionInput) => UpdatePaidProductSubscriptionOutput
    CreatePaidProductSubscription: (input: CreatePaidProductSubscriptionInput) => CreatePaidProductSubscriptionOutput
    ProductSubscription: (input: ProductSubscriptionInput) => ProductSubscriptionOutput
    ProductSubscriptions: (input: ProductSubscriptionsInput) => ProductSubscriptionsOutput
    DeleteExternalAccount: (input: DeleteExternalAccountInput) => DeleteExternalAccountOutput
    UserExternalAccounts: (input: UserExternalAccountsInput) => UserExternalAccountsOutput
    RegistryExtensions: (input: RegistryExtensionsInput) => RegistryExtensionsOutput
    RegistryExtension: (input: RegistryExtensionInput) => RegistryExtensionOutput
    SubmitSurvey: (input: SubmitSurveyInput) => SubmitSurveyOutput
    FetchSurveyResponses: (input: FetchSurveyResponsesInput) => FetchSurveyResponsesOutput
    FetchAllUsersWithSurveyResponses: (
        input: FetchAllUsersWithSurveyResponsesInput
    ) => FetchAllUsersWithSurveyResponsesOutput
    FetchSurveyResponseAggregates: (input: FetchSurveyResponseAggregatesInput) => FetchSurveyResponseAggregatesOutput
    RequestTrial: (input: RequestTrialInput) => RequestTrialOutput
    StatusMessages: (input: StatusMessagesInput) => StatusMessagesOutput
    createOrganization: (input: createOrganizationInput) => createOrganizationOutput
    removeUserFromOrganization: (input: removeUserFromOrganizationInput) => removeUserFromOrganizationOutput
    UpdateOrganization: (input: UpdateOrganizationInput) => UpdateOrganizationOutput
    Organization: (input: OrganizationInput) => OrganizationOutput
    RespondToOrganizationInvitation: (
        input: RespondToOrganizationInvitationInput
    ) => RespondToOrganizationInvitationOutput
    OrganizationMembers: (input: OrganizationMembersInput) => OrganizationMembersOutput
    InviteUserToOrganization: (input: InviteUserToOrganizationInput) => InviteUserToOrganizationOutput
    AddUserToOrganization: (input: AddUserToOrganizationInput) => AddUserToOrganizationOutput
    ViewerSettings: (input: ViewerSettingsInput) => ViewerSettingsOutput
    RepositoryGitRefs: (input: RepositoryGitRefsInput) => RepositoryGitRefsOutput
    FetchCommits: (input: FetchCommitsInput) => FetchCommitsOutput
    Repositories: (input: RepositoriesInput) => RepositoriesOutput
    RepositoryGitCommit: (input: RepositoryGitCommitInput) => RepositoryGitCommitOutput
    RepositoryRedirect: (input: RepositoryRedirectInput) => RepositoryRedirectOutput
    ResolveRev: (input: ResolveRevInput) => ResolveRevOutput
    HighlightedFile: (input: HighlightedFileInput) => HighlightedFileOutput
    FileExternalLinks: (input: FileExternalLinksInput) => FileExternalLinksOutput
    TreeEntries: (input: TreeEntriesInput) => TreeEntriesOutput
    Blob: (input: BlobInput) => BlobOutput
    RepositoryGitBranchesOverview: (input: RepositoryGitBranchesOverviewInput) => RepositoryGitBranchesOverviewOutput
    RepositoryCommit: (input: RepositoryCommitInput) => RepositoryCommitOutput
    RepositoryGitCommits: (input: RepositoryGitCommitsInput) => RepositoryGitCommitsOutput
    RepositoryComparisonCommits: (input: RepositoryComparisonCommitsInput) => RepositoryComparisonCommitsOutput
    RepositoryComparisonDiff: (input: RepositoryComparisonDiffInput) => RepositoryComparisonDiffOutput
    RepositoryComparison: (input: RepositoryComparisonInput) => RepositoryComparisonOutput
    ExploreRepositories: (input: ExploreRepositoriesInput) => ExploreRepositoriesOutput
    RepositoryTextSearchIndex: (input: RepositoryTextSearchIndexInput) => RepositoryTextSearchIndexOutput
    Repository: (input: RepositoryInput) => RepositoryOutput
    RepositoryContributors: (input: RepositoryContributorsInput) => RepositoryContributorsOutput
    TreeCommits: (input: TreeCommitsInput) => TreeCommitsOutput
    Search: (input: SearchInput) => SearchOutput
    RepoGroups: (input: RepoGroupsInput) => RepoGroupsOutput
    SearchSuggestions: (input: SearchSuggestionsInput) => SearchSuggestionsOutput
    ReposByQuery: (input: ReposByQueryInput) => ReposByQueryOutput
    savedSearches: (input: savedSearchesInput) => savedSearchesOutput
    SavedSearch: (input: SavedSearchInput) => SavedSearchOutput
    CreateSavedSearch: (input: CreateSavedSearchInput) => CreateSavedSearchOutput
    UpdateSavedSearch: (input: UpdateSavedSearchInput) => UpdateSavedSearchOutput
    DeleteSavedSearch: (input: DeleteSavedSearchInput) => DeleteSavedSearchOutput
    highlightCode: (input: highlightCodeInput) => highlightCodeOutput
    ManyReposWarning: (input: ManyReposWarningInput) => ManyReposWarningOutput
    SettingsCascade: (input: SettingsCascadeInput) => SettingsCascadeOutput
    DeleteAccessToken: (input: DeleteAccessTokenInput) => DeleteAccessTokenOutput
    SiteFlags: (input: SiteFlagsInput) => SiteFlagsOutput
    addExternalService: (input: addExternalServiceInput) => addExternalServiceOutput
    UpdateExternalService: (input: UpdateExternalServiceInput) => UpdateExternalServiceOutput
    ExternalService: (input: ExternalServiceInput) => ExternalServiceOutput
    DeleteExternalService: (input: DeleteExternalServiceInput) => DeleteExternalServiceOutput
    ExternalServices: (input: ExternalServicesInput) => ExternalServicesOutput
    AccessTokens: (input: AccessTokensInput) => AccessTokensOutput
    Users: (input: UsersInput) => UsersOutput
    Organizations: (input: OrganizationsInput) => OrganizationsOutput
    Repositories: (input: RepositoriesInput) => RepositoriesOutput
    UpdateMirrorRepository: (input: UpdateMirrorRepositoryInput) => UpdateMirrorRepositoryOutput
    CheckMirrorRepositoryConnection: (
        input: CheckMirrorRepositoryConnectionInput
    ) => CheckMirrorRepositoryConnectionOutput
    ScheduleRepositoryPermissionsSync: (
        input: ScheduleRepositoryPermissionsSyncInput
    ) => ScheduleRepositoryPermissionsSyncOutput
    ScheduleUserPermissionsSync: (input: ScheduleUserPermissionsSyncInput) => ScheduleUserPermissionsSyncOutput
    UserUsageStatistics: (input: UserUsageStatisticsInput) => UserUsageStatisticsOutput
    SiteUsageStatistics: (input: SiteUsageStatisticsInput) => SiteUsageStatisticsOutput
    Site: (input: SiteInput) => SiteOutput
    AllConfig: (input: AllConfigInput) => AllConfigOutput
    UpdateSiteConfiguration: (input: UpdateSiteConfigurationInput) => UpdateSiteConfigurationOutput
    ReloadSite: (input: ReloadSiteInput) => ReloadSiteOutput
    SetUserIsSiteAdmin: (input: SetUserIsSiteAdminInput) => SetUserIsSiteAdminOutput
    RandomizeUserPassword: (input: RandomizeUserPasswordInput) => RandomizeUserPasswordOutput
    DeleteUser: (input: DeleteUserInput) => DeleteUserOutput
    CreateUser: (input: CreateUserInput) => CreateUserOutput
    DeleteOrganization: (input: DeleteOrganizationInput) => DeleteOrganizationOutput
    SiteUpdateCheck: (input: SiteUpdateCheckInput) => SiteUpdateCheckOutput
    SiteMonitoringStatistics: (input: SiteMonitoringStatisticsInput) => SiteMonitoringStatisticsOutput
    Overview: (input: OverviewInput) => OverviewOutput
    WAUs: (input: WAUsInput) => WAUsOutput
    Symbols: (input: SymbolsInput) => SymbolsOutput
    ActivationStatus: (input: ActivationStatusInput) => ActivationStatusOutput
    ActivationStatus: (input: ActivationStatusInput) => ActivationStatusOutput
    UserEventLogs: (input: UserEventLogsInput) => UserEventLogsOutput
    User: (input: UserInput) => UserOutput
    updateUser: (input: updateUserInput) => updateUserOutput
    updatePassword: (input: updatePasswordInput) => updatePasswordOutput
    SetUserEmailVerified: (input: SetUserEmailVerifiedInput) => SetUserEmailVerifiedOutput
    logUserEvent: (input: logUserEventInput) => logUserEventOutput
    logEvent: (input: logEventInput) => logEventOutput
    CreateAccessToken: (input: CreateAccessTokenInput) => CreateAccessTokenOutput
    AccessTokens: (input: AccessTokensInput) => AccessTokensOutput
    AddUserEmail: (input: AddUserEmailInput) => AddUserEmailOutput
    RemoveUserEmail: (input: RemoveUserEmailInput) => RemoveUserEmailOutput
    UserEmails: (input: UserEmailsInput) => UserEmailsOutput
    User: (input: UserInput) => UserOutput
}
