import { CampaignState } from '../../shared/src/graphql/schema'
import { OrganizationInvitationResponseType } from '../../shared/src/graphql/schema'
import { EventSource } from '../../shared/src/graphql/schema'
import { RepositoryPermission } from '../../shared/src/graphql/schema'
import { ChangesetState } from '../../shared/src/graphql/schema'
import { ChangesetExternalState } from '../../shared/src/graphql/schema'
import { ChangesetReviewState } from '../../shared/src/graphql/schema'
import { ChangesetCheckState } from '../../shared/src/graphql/schema'
import { SymbolKind } from '../../shared/src/graphql/schema'
import { DiagnosticSeverity } from '../../shared/src/graphql/schema'
import { ExternalServiceKind } from '../../shared/src/graphql/schema'
import { GitRefType } from '../../shared/src/graphql/schema'
import { GitObjectType } from '../../shared/src/graphql/schema'
import { GitRefOrder } from '../../shared/src/graphql/schema'
import { DiffHunkLineType } from '../../shared/src/graphql/schema'
import { LSIFUploadState } from '../../shared/src/graphql/schema'
import { LSIFIndexState } from '../../shared/src/graphql/schema'
import { RepositoryOrderBy } from '../../shared/src/graphql/schema'
import { UserActivePeriod } from '../../shared/src/graphql/schema'
import { SearchVersion } from '../../shared/src/graphql/schema'
import { SearchPatternType } from '../../shared/src/graphql/schema'
import { AlertType } from '../../shared/src/graphql/schema'
import { UserEvent } from '../../shared/src/graphql/schema'
import { ChangesetSpecType } from '../../shared/src/graphql/schema'
export type Maybe<T> = T | null
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] }
/* This is an autogenerated file. Do not edit this file directly! */

export interface WebGraphQlOperations {
    /** web/src/auth.ts */
    CurrentAuthState: (variables: CurrentAuthStateVariables) => CurrentAuthStateResult

    /** web/src/enterprise/campaigns/detail/backend.ts */
    CampaignByID: (variables: CampaignByIDVariables) => CampaignByIDResult

    /** web/src/enterprise/campaigns/detail/backend.ts */
    CampaignChangesets: (variables: CampaignChangesetsVariables) => CampaignChangesetsResult

    /** web/src/enterprise/campaigns/detail/backend.ts */
    SyncChangeset: (variables: SyncChangesetVariables) => SyncChangesetResult

    /** web/src/enterprise/campaigns/detail/backend.ts */
    ExternalChangesetFileDiffs: (variables: ExternalChangesetFileDiffsVariables) => ExternalChangesetFileDiffsResult

    /** web/src/enterprise/campaigns/global/list/backend.ts */
    Campaigns: (variables: CampaignsVariables) => CampaignsResult

    /** web/src/enterprise/codeintel/backend.tsx */
    LsifUploads: (variables: LsifUploadsVariables) => LsifUploadsResult

    /** web/src/enterprise/codeintel/backend.tsx */
    LsifUploadsWithRepo: (variables: LsifUploadsWithRepoVariables) => LsifUploadsWithRepoResult

    /** web/src/enterprise/codeintel/backend.tsx */
    LsifUpload: (variables: LsifUploadVariables) => LsifUploadResult

    /** web/src/enterprise/codeintel/backend.tsx */
    DeleteLsifUpload: (variables: DeleteLsifUploadVariables) => DeleteLsifUploadResult

    /** web/src/enterprise/codeintel/backend.tsx */
    LsifIndexes: (variables: LsifIndexesVariables) => LsifIndexesResult

    /** web/src/enterprise/codeintel/backend.tsx */
    LsifIndexesWithRepo: (variables: LsifIndexesWithRepoVariables) => LsifIndexesWithRepoResult

    /** web/src/enterprise/codeintel/backend.tsx */
    LsifIndex: (variables: LsifIndexVariables) => LsifIndexResult

    /** web/src/enterprise/codeintel/backend.tsx */
    DeleteLsifIndex: (variables: DeleteLsifIndexVariables) => DeleteLsifIndexResult

    /** web/src/enterprise/dotcom/productPlans/backend.tsx */
    ProductPlans: (variables: ProductPlansVariables) => ProductPlansResult

    /** web/src/enterprise/extensions/explore/ExtensionsExploreSection.tsx */
    ExploreExtensions: (variables: ExploreExtensionsVariables) => ExploreExtensionsResult

    /** web/src/enterprise/extensions/extension/RegistryExtensionManagePage.tsx */
    UpdateRegistryExtension: (variables: UpdateRegistryExtensionVariables) => UpdateRegistryExtensionResult

    /** web/src/enterprise/extensions/extension/RegistryExtensionNewReleasePage.tsx */
    PublishRegistryExtension: (variables: PublishRegistryExtensionVariables) => PublishRegistryExtensionResult

    /** web/src/enterprise/extensions/registry/RegistryNewExtensionPage.tsx */
    CreateRegistryExtension: (variables: CreateRegistryExtensionVariables) => CreateRegistryExtensionResult

    /** web/src/enterprise/extensions/registry/backend.ts */
    DeleteRegistryExtension: (variables: DeleteRegistryExtensionVariables) => DeleteRegistryExtensionResult

    /** web/src/enterprise/extensions/registry/backend.ts */
    ViewerRegistryPublishers: (variables: ViewerRegistryPublishersVariables) => ViewerRegistryPublishersResult

    /** web/src/enterprise/repo/settings/backend.tsx */
    LsifUploadsForRepo: (variables: LsifUploadsForRepoVariables) => LsifUploadsForRepoResult

    /** web/src/enterprise/repo/settings/backend.tsx */
    DeleteLsifUploadForRepo: (variables: DeleteLsifUploadForRepoVariables) => DeleteLsifUploadForRepoResult

    /** web/src/enterprise/search/stats/backend.ts */
    SearchResultsStats: (variables: SearchResultsStatsVariables) => SearchResultsStatsResult

    /** web/src/enterprise/site-admin/SiteAdminAuthenticationProvidersPage.tsx */
    AuthProviders: (variables: AuthProvidersVariables) => AuthProvidersResult

    /** web/src/enterprise/site-admin/SiteAdminExternalAccountsPage.tsx */
    ExternalAccounts: (variables: ExternalAccountsVariables) => ExternalAccountsResult

    /** web/src/enterprise/site-admin/SiteAdminRegistryExtensionsPage.tsx */
    SiteAdminRegistryExtensions: (variables: SiteAdminRegistryExtensionsVariables) => SiteAdminRegistryExtensionsResult

    /** web/src/enterprise/site-admin/backend.ts */
    SiteAdminLsifUpload: (variables: SiteAdminLsifUploadVariables) => SiteAdminLsifUploadResult

    /** web/src/enterprise/site-admin/dotcom/customers/SiteAdminCustomerBillingLink.tsx */
    SetCustomerBilling: (variables: SetCustomerBillingVariables) => SetCustomerBillingResult

    /** web/src/enterprise/site-admin/dotcom/customers/SiteAdminCustomersPage.tsx */
    Customers: (variables: CustomersVariables) => CustomersResult

    /** web/src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminCreateProductSubscriptionPage.tsx */
    CreateProductSubscription: (variables: CreateProductSubscriptionVariables) => CreateProductSubscriptionResult

    /** web/src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminCreateProductSubscriptionPage.tsx */
    ProductSubscriptionAccounts: (variables: ProductSubscriptionAccountsVariables) => ProductSubscriptionAccountsResult

    /** web/src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminGenerateProductLicenseForSubscriptionForm.tsx */
    GenerateProductLicenseForSubscription: (
        variables: GenerateProductLicenseForSubscriptionVariables
    ) => GenerateProductLicenseForSubscriptionResult

    /** web/src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminProductLicensesPage.tsx */
    DotComProductLicenses: (variables: DotComProductLicensesVariables) => DotComProductLicensesResult

    /** web/src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminProductSubscriptionBillingLink.tsx */
    SetProductSubscriptionBilling: (
        variables: SetProductSubscriptionBillingVariables
    ) => SetProductSubscriptionBillingResult

    /** web/src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminProductSubscriptionPage.tsx */
    DotComProductSubscription: (variables: DotComProductSubscriptionVariables) => DotComProductSubscriptionResult

    /** web/src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminProductSubscriptionPage.tsx */
    ProductLicenses: (variables: ProductLicensesVariables) => ProductLicensesResult

    /** web/src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminProductSubscriptionPage.tsx */
    ArchiveProductSubscription: (variables: ArchiveProductSubscriptionVariables) => ArchiveProductSubscriptionResult

    /** web/src/enterprise/site-admin/dotcom/productSubscriptions/SiteAdminProductSubscriptionsPage.tsx */
    ProductSubscriptionsDotCom: (variables: ProductSubscriptionsDotComVariables) => ProductSubscriptionsDotComResult

    /** web/src/enterprise/site-admin/productSubscription/ProductSubscriptionStatus.tsx */
    ProductLicenseInfo: (variables: ProductLicenseInfoVariables) => ProductLicenseInfoResult

    /** web/src/enterprise/user/productSubscriptions/NewProductSubscriptionPaymentSection.tsx */
    PreviewProductSubscriptionInvoice: (
        variables: PreviewProductSubscriptionInvoiceVariables
    ) => PreviewProductSubscriptionInvoiceResult

    /** web/src/enterprise/user/productSubscriptions/UserSubscriptionsEditProductSubscriptionPage.tsx */
    ProductSubscriptionOnEditPage: (
        variables: ProductSubscriptionOnEditPageVariables
    ) => ProductSubscriptionOnEditPageResult

    /** web/src/enterprise/user/productSubscriptions/UserSubscriptionsEditProductSubscriptionPage.tsx */
    UpdatePaidProductSubscription: (
        variables: UpdatePaidProductSubscriptionVariables
    ) => UpdatePaidProductSubscriptionResult

    /** web/src/enterprise/user/productSubscriptions/UserSubscriptionsNewProductSubscriptionPage.tsx */
    CreatePaidProductSubscription: (
        variables: CreatePaidProductSubscriptionVariables
    ) => CreatePaidProductSubscriptionResult

    /** web/src/enterprise/user/productSubscriptions/UserSubscriptionsProductSubscriptionPage.tsx */
    ProductSubscription: (variables: ProductSubscriptionVariables) => ProductSubscriptionResult

    /** web/src/enterprise/user/productSubscriptions/UserSubscriptionsProductSubscriptionsPage.tsx */
    ProductSubscriptions: (variables: ProductSubscriptionsVariables) => ProductSubscriptionsResult

    /** web/src/enterprise/user/settings/ExternalAccountNode.tsx */
    DeleteExternalAccount: (variables: DeleteExternalAccountVariables) => DeleteExternalAccountResult

    /** web/src/enterprise/user/settings/UserSettingsExternalAccountsPage.tsx */
    UserExternalAccounts: (variables: UserExternalAccountsVariables) => UserExternalAccountsResult

    /** web/src/extensions/ExtensionsList.tsx */
    RegistryExtensions: (variables: RegistryExtensionsVariables) => RegistryExtensionsResult

    /** web/src/extensions/extension/ExtensionArea.tsx */
    RegistryExtension: (variables: RegistryExtensionVariables) => RegistryExtensionResult

    /** web/src/marketing/backend.tsx */
    SubmitSurvey: (variables: SubmitSurveyVariables) => SubmitSurveyResult

    /** web/src/marketing/backend.tsx */
    FetchSurveyResponses: (variables: FetchSurveyResponsesVariables) => FetchSurveyResponsesResult

    /** web/src/marketing/backend.tsx */
    FetchAllUsersWithSurveyResponses: (
        variables: FetchAllUsersWithSurveyResponsesVariables
    ) => FetchAllUsersWithSurveyResponsesResult

    /** web/src/marketing/backend.tsx */
    FetchSurveyResponseAggregates: (
        variables: FetchSurveyResponseAggregatesVariables
    ) => FetchSurveyResponseAggregatesResult

    /** web/src/marketing/backend.tsx */
    RequestTrial: (variables: RequestTrialVariables) => RequestTrialResult

    /** web/src/nav/StatusMessagesNavItem.tsx */
    StatusMessages: (variables: StatusMessagesVariables) => StatusMessagesResult

    /** web/src/org/area/OrgArea.tsx */
    Organization: (variables: OrganizationVariables) => OrganizationResult

    /** web/src/org/area/OrgInvitationPage.tsx */
    RespondToOrganizationInvitation: (
        variables: RespondToOrganizationInvitationVariables
    ) => RespondToOrganizationInvitationResult

    /** web/src/org/area/OrgMembersPage.tsx */
    OrganizationMembers: (variables: OrganizationMembersVariables) => OrganizationMembersResult

    /** web/src/org/backend.tsx */
    CreateOrganization: (variables: CreateOrganizationVariables) => CreateOrganizationResult

    /** web/src/org/backend.tsx */
    removeUserFromOrganization: (variables: removeUserFromOrganizationVariables) => removeUserFromOrganizationResult

    /** web/src/org/backend.tsx */
    UpdateOrganization: (variables: UpdateOrganizationVariables) => UpdateOrganizationResult

    /** web/src/org/invite/InviteForm.tsx */
    InviteUserToOrganization: (variables: InviteUserToOrganizationVariables) => InviteUserToOrganizationResult

    /** web/src/org/invite/InviteForm.tsx */
    AddUserToOrganization: (variables: AddUserToOrganizationVariables) => AddUserToOrganizationResult

    /** web/src/repo/GitReference.tsx */
    RepositoryGitRefs: (variables: RepositoryGitRefsVariables) => RepositoryGitRefsResult

    /** web/src/repo/RepoRevisionSidebarCommits.tsx */
    FetchCommits: (variables: FetchCommitsVariables) => FetchCommitsResult

    /** web/src/repo/RepositoriesPopover.tsx */
    RepositoriesForPopover: (variables: RepositoriesForPopoverVariables) => RepositoriesForPopoverResult

    /** web/src/repo/RevisionsPopover.tsx */
    RepositoryGitCommit: (variables: RepositoryGitCommitVariables) => RepositoryGitCommitResult

    /** web/src/repo/backend.ts */
    RepositoryRedirect: (variables: RepositoryRedirectVariables) => RepositoryRedirectResult

    /** web/src/repo/backend.ts */
    ResolveRev: (variables: ResolveRevVariables) => ResolveRevResult

    /** web/src/repo/backend.ts */
    HighlightedFile: (variables: HighlightedFileVariables) => HighlightedFileResult

    /** web/src/repo/backend.ts */
    FileExternalLinks: (variables: FileExternalLinksVariables) => FileExternalLinksResult

    /** web/src/repo/backend.ts */
    TreeEntries: (variables: TreeEntriesVariables) => TreeEntriesResult

    /** web/src/repo/blob/BlobPage.tsx */
    Blob: (variables: BlobVariables) => BlobResult

    /** web/src/repo/branches/RepositoryBranchesOverviewPage.tsx */
    RepositoryGitBranchesOverview: (
        variables: RepositoryGitBranchesOverviewVariables
    ) => RepositoryGitBranchesOverviewResult

    /** web/src/repo/commit/RepositoryCommitPage.tsx */
    RepositoryCommit: (variables: RepositoryCommitVariables) => RepositoryCommitResult

    /** web/src/repo/commits/RepositoryCommitsPage.tsx */
    RepositoryGitCommits: (variables: RepositoryGitCommitsVariables) => RepositoryGitCommitsResult

    /** web/src/repo/compare/RepositoryCompareCommitsPage.tsx */
    RepositoryComparisonCommits: (variables: RepositoryComparisonCommitsVariables) => RepositoryComparisonCommitsResult

    /** web/src/repo/compare/RepositoryCompareDiffPage.tsx */
    RepositoryComparisonDiff: (variables: RepositoryComparisonDiffVariables) => RepositoryComparisonDiffResult

    /** web/src/repo/compare/RepositoryCompareOverviewPage.tsx */
    RepositoryComparison: (variables: RepositoryComparisonVariables) => RepositoryComparisonResult

    /** web/src/repo/explore/RepositoriesExploreSection.tsx */
    ExploreRepositories: (variables: ExploreRepositoriesVariables) => ExploreRepositoriesResult

    /** web/src/repo/settings/RepoSettingsIndexPage.tsx */
    RepositoryTextSearchIndex: (variables: RepositoryTextSearchIndexVariables) => RepositoryTextSearchIndexResult

    /** web/src/repo/settings/backend.tsx */
    Repository: (variables: RepositoryVariables) => RepositoryResult

    /** web/src/repo/stats/RepositoryStatsContributorsPage.tsx */
    RepositoryContributors: (variables: RepositoryContributorsVariables) => RepositoryContributorsResult

    /** web/src/repo/tree/TreePage.tsx */
    TreeCommits: (variables: TreeCommitsVariables) => TreeCommitsResult

    /** web/src/search/backend.tsx */
    Search: (variables: SearchVariables) => SearchResult

    /** web/src/search/backend.tsx */
    RepoGroups: (variables: RepoGroupsVariables) => RepoGroupsResult

    /** web/src/search/backend.tsx */
    SearchSuggestions: (variables: SearchSuggestionsVariables) => SearchSuggestionsResult

    /** web/src/search/backend.tsx */
    ReposByQuery: (variables: ReposByQueryVariables) => ReposByQueryResult

    /** web/src/search/backend.tsx */
    savedSearches: (variables: savedSearchesVariables) => savedSearchesResult

    /** web/src/search/backend.tsx */
    SavedSearch: (variables: SavedSearchVariables) => SavedSearchResult

    /** web/src/search/backend.tsx */
    CreateSavedSearch: (variables: CreateSavedSearchVariables) => CreateSavedSearchResult

    /** web/src/search/backend.tsx */
    UpdateSavedSearch: (variables: UpdateSavedSearchVariables) => UpdateSavedSearchResult

    /** web/src/search/backend.tsx */
    DeleteSavedSearch: (variables: DeleteSavedSearchVariables) => DeleteSavedSearchResult

    /** web/src/search/backend.tsx */
    highlightCode: (variables: highlightCodeVariables) => highlightCodeResult

    /** web/src/search/backend.tsx */
    ManyReposWarning: (variables: ManyReposWarningVariables) => ManyReposWarningResult

    /** web/src/settings/SettingsArea.tsx */
    SettingsCascade: (variables: SettingsCascadeVariables) => SettingsCascadeResult

    /** web/src/settings/tokens/AccessTokenNode.tsx */
    DeleteAccessToken: (variables: DeleteAccessTokenVariables) => DeleteAccessTokenResult

    /** web/src/site-admin/SiteAdminAddExternalServicePage.tsx */
    addExternalService: (variables: addExternalServiceVariables) => addExternalServiceResult

    /** web/src/site-admin/SiteAdminExternalServicePage.tsx */
    UpdateExternalService: (variables: UpdateExternalServiceVariables) => UpdateExternalServiceResult

    /** web/src/site-admin/SiteAdminExternalServicePage.tsx */
    ExternalService: (variables: ExternalServiceVariables) => ExternalServiceResult

    /** web/src/site-admin/SiteAdminExternalServicesPage.tsx */
    DeleteExternalService: (variables: DeleteExternalServiceVariables) => DeleteExternalServiceResult

    /** web/src/site-admin/SiteAdminExternalServicesPage.tsx */
    ExternalServices: (variables: ExternalServicesVariables) => ExternalServicesResult

    /** web/src/site-admin/SiteAdminTokensPage.tsx */
    SiteAdminAccessTokens: (variables: SiteAdminAccessTokensVariables) => SiteAdminAccessTokensResult

    /** web/src/site-admin/backend.tsx */
    Users: (variables: UsersVariables) => UsersResult

    /** web/src/site-admin/backend.tsx */
    Organizations: (variables: OrganizationsVariables) => OrganizationsResult

    /** web/src/site-admin/backend.tsx */
    Repositories: (variables: RepositoriesVariables) => RepositoriesResult

    /** web/src/site-admin/backend.tsx */
    UpdateMirrorRepository: (variables: UpdateMirrorRepositoryVariables) => UpdateMirrorRepositoryResult

    /** web/src/site-admin/backend.tsx */
    CheckMirrorRepositoryConnection: (
        variables: CheckMirrorRepositoryConnectionVariables
    ) => CheckMirrorRepositoryConnectionResult

    /** web/src/site-admin/backend.tsx */
    ScheduleRepositoryPermissionsSync: (
        variables: ScheduleRepositoryPermissionsSyncVariables
    ) => ScheduleRepositoryPermissionsSyncResult

    /** web/src/site-admin/backend.tsx */
    ScheduleUserPermissionsSync: (variables: ScheduleUserPermissionsSyncVariables) => ScheduleUserPermissionsSyncResult

    /** web/src/site-admin/backend.tsx */
    UserUsageStatistics: (variables: UserUsageStatisticsVariables) => UserUsageStatisticsResult

    /** web/src/site-admin/backend.tsx */
    SiteUsageStatistics: (variables: SiteUsageStatisticsVariables) => SiteUsageStatisticsResult

    /** web/src/site-admin/backend.tsx */
    Site: (variables: SiteVariables) => SiteResult

    /** web/src/site-admin/backend.tsx */
    AllConfig: (variables: AllConfigVariables) => AllConfigResult

    /** web/src/site-admin/backend.tsx */
    UpdateSiteConfiguration: (variables: UpdateSiteConfigurationVariables) => UpdateSiteConfigurationResult

    /** web/src/site-admin/backend.tsx */
    ReloadSite: (variables: ReloadSiteVariables) => ReloadSiteResult

    /** web/src/site-admin/backend.tsx */
    SetUserIsSiteAdmin: (variables: SetUserIsSiteAdminVariables) => SetUserIsSiteAdminResult

    /** web/src/site-admin/backend.tsx */
    RandomizeUserPassword: (variables: RandomizeUserPasswordVariables) => RandomizeUserPasswordResult

    /** web/src/site-admin/backend.tsx */
    DeleteUser: (variables: DeleteUserVariables) => DeleteUserResult

    /** web/src/site-admin/backend.tsx */
    CreateUser: (variables: CreateUserVariables) => CreateUserResult

    /** web/src/site-admin/backend.tsx */
    DeleteOrganization: (variables: DeleteOrganizationVariables) => DeleteOrganizationResult

    /** web/src/site-admin/backend.tsx */
    SiteUpdateCheck: (variables: SiteUpdateCheckVariables) => SiteUpdateCheckResult

    /** web/src/site-admin/backend.tsx */
    SiteMonitoringStatistics: (variables: SiteMonitoringStatisticsVariables) => SiteMonitoringStatisticsResult

    /** web/src/site-admin/overview/SiteAdminOverviewPage.tsx */
    Overview: (variables: OverviewVariables) => OverviewResult

    /** web/src/site-admin/overview/SiteAdminOverviewPage.tsx */
    WAUs: (variables: WAUsVariables) => WAUsResult

    /** web/src/site/backend.tsx */
    SiteFlags: (variables: SiteFlagsVariables) => SiteFlagsResult

    /** web/src/symbols/backend.tsx */
    Symbols: (variables: SymbolsVariables) => SymbolsResult

    /** web/src/tracking/withActivation.tsx */
    SiteAdminActivationStatus: (variables: SiteAdminActivationStatusVariables) => SiteAdminActivationStatusResult

    /** web/src/tracking/withActivation.tsx */
    ActivationStatus: (variables: ActivationStatusVariables) => ActivationStatusResult

    /** web/src/tracking/withActivation.tsx */
    LinksForRepositories: (variables: LinksForRepositoriesVariables) => LinksForRepositoriesResult

    /** web/src/user/UserEventLogsPage.tsx */
    UserEventLogs: (variables: UserEventLogsVariables) => UserEventLogsResult

    /** web/src/user/area/backend.tsx */
    User: (variables: UserVariables) => UserResult

    /** web/src/user/settings/accessTokens/UserSettingsCreateAccessTokenPage.tsx */
    CreateAccessToken: (variables: CreateAccessTokenVariables) => CreateAccessTokenResult

    /** web/src/user/settings/accessTokens/UserSettingsTokensPage.tsx */
    AccessTokens: (variables: AccessTokensVariables) => AccessTokensResult

    /** web/src/user/settings/backend.tsx */
    UpdateUser: (variables: UpdateUserVariables) => UpdateUserResult

    /** web/src/user/settings/backend.tsx */
    UpdatePassword: (variables: UpdatePasswordVariables) => UpdatePasswordResult

    /** web/src/user/settings/backend.tsx */
    SetUserEmailVerified: (variables: SetUserEmailVerifiedVariables) => SetUserEmailVerifiedResult

    /** web/src/user/settings/backend.tsx */
    logUserEvent: (variables: logUserEventVariables) => logUserEventResult

    /** web/src/user/settings/backend.tsx */
    logEvent: (variables: logEventVariables) => logEventResult

    /** web/src/user/settings/emails/AddUserEmailForm.tsx */
    AddUserEmail: (variables: AddUserEmailVariables) => AddUserEmailResult

    /** web/src/user/settings/emails/UserSettingsEmailsPage.tsx */
    RemoveUserEmail: (variables: RemoveUserEmailVariables) => RemoveUserEmailResult

    /** web/src/user/settings/emails/UserSettingsEmailsPage.tsx */
    UserEmails: (variables: UserEmailsVariables) => UserEmailsResult

    /** web/src/user/settings/profile/UserSettingsProfilePage.tsx */
    UserForProfilePage: (variables: UserForProfilePageVariables) => UserForProfilePageResult
}
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
    ID: string
    String: string
    Boolean: boolean
    Int: number
    Float: number
    DateTime: string
    JSONCString: string
    JSONValue: unknown
    GitObjectID: string
}

export interface AddExternalServiceInput {
    kind: ExternalServiceKind
    displayName: Scalars['String']
    config: Scalars['String']
}

export { AlertType }

export { CampaignState }

export { ChangesetCheckState }

export { ChangesetExternalState }

export { ChangesetReviewState }

export { ChangesetSpecType }

export { ChangesetState }

export interface ConfigurationEdit {
    keyPath: Array<KeyPathSegment>
    value?: Maybe<Scalars['JSONValue']>
    valueIsJSONCEncodedString?: Maybe<Scalars['Boolean']>
}

export { DiagnosticSeverity }

export { DiffHunkLineType }

export { EventSource }

export { ExternalServiceKind }

export { GitObjectType }

export { GitRefOrder }

export { GitRefType }

export interface KeyPathSegment {
    property?: Maybe<Scalars['String']>
    index?: Maybe<Scalars['Int']>
}

export { LSIFIndexState }

export { LSIFUploadState }

export interface MarkdownOptions {
    alwaysNil?: Maybe<Scalars['String']>
}

export { OrganizationInvitationResponseType }

export interface ProductLicenseInput {
    tags: Array<Scalars['String']>
    userCount: Scalars['Int']
    expiresAt: Scalars['Int']
}

export interface ProductSubscriptionInput {
    billingPlanID: Scalars['String']
    userCount: Scalars['Int']
}

export { RepositoryOrderBy }

export { RepositoryPermission }

export { SearchPatternType }

export { SearchVersion }

export interface SettingsEdit {
    keyPath: Array<KeyPathSegment>
    value?: Maybe<Scalars['JSONValue']>
    valueIsJSONCEncodedString?: Maybe<Scalars['Boolean']>
}

export interface SettingsMutationGroupInput {
    subject: Scalars['ID']
    lastID?: Maybe<Scalars['Int']>
}

export interface SurveySubmissionInput {
    email?: Maybe<Scalars['String']>
    score: Scalars['Int']
    reason?: Maybe<Scalars['String']>
    better?: Maybe<Scalars['String']>
}

export { SymbolKind }

export interface UpdateExternalServiceInput {
    id: Scalars['ID']
    displayName?: Maybe<Scalars['String']>
    config?: Maybe<Scalars['String']>
}

export { UserActivePeriod }

export { UserEvent }

export interface UserPermission {
    bindID: Scalars['String']
    permission?: Maybe<RepositoryPermission>
}

export type CurrentAuthStateVariables = Exact<{ [key: string]: never }>

export type CurrentAuthStateResult = {
    currentUser: Maybe<{
        __typename: 'User'
        id: string
        databaseID: number
        username: string
        avatarURL: Maybe<string>
        email: string
        displayName: Maybe<string>
        siteAdmin: boolean
        tags: Array<string>
        url: string
        settingsURL: Maybe<string>
        viewerCanAdminister: boolean
        organizations: {
            nodes: Array<{
                id: string
                name: string
                displayName: Maybe<string>
                url: string
                settingsURL: Maybe<string>
            }>
        }
        session: { canSignOut: boolean }
    }>
}

export type FileDiffHunkRangeFields = { startLine: number; lines: number }

export type DiffStatFields = { added: number; changed: number; deleted: number }

export type FileDiffHunkFields = {
    oldNoNewlineAt: boolean
    section: Maybe<string>
    oldRange: { startLine: number; lines: number }
    newRange: { startLine: number; lines: number }
    highlight: { aborted: boolean; lines: Array<{ kind: DiffHunkLineType; html: string }> }
}

export type FileDiffFields = {
    __typename: 'FileDiff'
    oldPath: Maybe<string>
    newPath: Maybe<string>
    internalID: string
    oldFile: Maybe<
        | { __typename: 'GitBlob'; binary: boolean; byteSize: number }
        | { __typename: 'VirtualFile'; binary: boolean; byteSize: number }
    >
    newFile: Maybe<
        | { __typename: 'GitBlob'; binary: boolean; byteSize: number }
        | { __typename: 'VirtualFile'; binary: boolean; byteSize: number }
    >
    mostRelevantFile: { __typename: 'GitBlob'; url: string } | { __typename: 'VirtualFile'; url: string }
    hunks: Array<FileDiffHunkFields>
    stat: { added: number; changed: number; deleted: number }
}

type GitReferenceSpecFields_GitRef_ = { __typename: 'GitRef'; target: { oid: string } }

type GitReferenceSpecFields_GitRevSpecExpr_ = { __typename: 'GitRevSpecExpr'; object: Maybe<{ oid: string }> }

type GitReferenceSpecFields_GitObject_ = { __typename: 'GitObject'; oid: string }

export type GitReferenceSpecFields =
    | GitReferenceSpecFields_GitRef_
    | GitReferenceSpecFields_GitRevSpecExpr_
    | GitReferenceSpecFields_GitObject_

export type RepositoryComparisonFields = {
    range: {
        base:
            | GitReferenceSpecFields_GitRef_
            | GitReferenceSpecFields_GitRevSpecExpr_
            | GitReferenceSpecFields_GitObject_
        head:
            | GitReferenceSpecFields_GitRef_
            | GitReferenceSpecFields_GitRevSpecExpr_
            | GitReferenceSpecFields_GitObject_
    }
    fileDiffs: {
        totalCount: Maybe<number>
        nodes: Array<FileDiffFields>
        pageInfo: { hasNextPage: boolean; endCursor: Maybe<string> }
        diffStat: DiffStatFields
    }
}

export type FileDiffConnectionFields = {
    totalCount: Maybe<number>
    nodes: Array<FileDiffFields>
    pageInfo: { hasNextPage: boolean; endCursor: Maybe<string> }
    diffStat: DiffStatFields
}

export type CampaignFields = {
    __typename: 'Campaign'
    id: string
    name: string
    description: Maybe<string>
    branch: Maybe<string>
    createdAt: string
    updatedAt: string
    closedAt: Maybe<string>
    viewerCanAdminister: boolean
    author: { username: string; avatarURL: Maybe<string> }
    changesets: { totalCount: number; stats: { total: number; closed: number; merged: number } }
    changesetCountsOverTime: Array<{
        date: string
        merged: number
        closed: number
        openApproved: number
        openChangesRequested: number
        openPending: number
        total: number
    }>
    diffStat: DiffStatFields
}

export type ChangesetLabelFields = { color: string; description: Maybe<string>; text: string }

export type CampaignByIDVariables = Exact<{
    campaign: Scalars['ID']
}>

export type CampaignByIDResult = {
    node: Maybe<
        | ({ __typename: 'Campaign' } & CampaignFields)
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | { __typename: 'Repository' }
        | { __typename: 'GitCommit' }
        | { __typename: 'ExternalService' }
        | { __typename: 'GitRef' }
        | { __typename: 'LSIFUpload' }
        | { __typename: 'LSIFIndex' }
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | { __typename: 'ExternalChangeset' }
        | { __typename: 'ChangesetEvent' }
    >
}

type ChangesetFields_HiddenExternalChangeset_ = {
    __typename: 'HiddenExternalChangeset'
    id: string
    state: ChangesetState
    createdAt: string
    updatedAt: string
    nextSyncAt: Maybe<string>
    externalState: Maybe<ChangesetExternalState>
}

type ChangesetFields_ExternalChangeset_ = {
    __typename: 'ExternalChangeset'
    id: string
    title: string
    body: string
    reviewState: Maybe<ChangesetReviewState>
    checkState: Maybe<ChangesetCheckState>
    externalID: Maybe<string>
    state: ChangesetState
    createdAt: string
    updatedAt: string
    nextSyncAt: Maybe<string>
    externalState: Maybe<ChangesetExternalState>
    labels: Array<ChangesetLabelFields>
    repository: { id: string; name: string; url: string }
    externalURL: Maybe<{ url: string }>
    diff: Maybe<
        | { __typename: 'RepositoryComparison'; fileDiffs: { diffStat: DiffStatFields } }
        | { __typename: 'PreviewRepositoryComparison'; fileDiffs: { diffStat: DiffStatFields } }
    >
    diffStat: Maybe<{ added: number; changed: number; deleted: number }>
}

export type ChangesetFields = ChangesetFields_HiddenExternalChangeset_ | ChangesetFields_ExternalChangeset_

export type CampaignChangesetsVariables = Exact<{
    campaign: Scalars['ID']
    first: Maybe<Scalars['Int']>
    state: Maybe<ChangesetState>
    reviewState: Maybe<ChangesetReviewState>
    checkState: Maybe<ChangesetCheckState>
}>

export type CampaignChangesetsResult = {
    node: Maybe<
        | {
              __typename: 'Campaign'
              changesets: {
                  totalCount: number
                  nodes: Array<ChangesetFields_HiddenExternalChangeset_ | ChangesetFields_ExternalChangeset_>
              }
          }
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | { __typename: 'Repository' }
        | { __typename: 'GitCommit' }
        | { __typename: 'ExternalService' }
        | { __typename: 'GitRef' }
        | { __typename: 'LSIFUpload' }
        | { __typename: 'LSIFIndex' }
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | { __typename: 'ExternalChangeset' }
        | { __typename: 'ChangesetEvent' }
    >
}

export type SyncChangesetVariables = Exact<{
    changeset: Scalars['ID']
}>

export type SyncChangesetResult = { syncChangeset: { alwaysNil: Maybe<string> } }

export type ExternalChangesetFileDiffsVariables = Exact<{
    externalChangeset: Scalars['ID']
    first: Maybe<Scalars['Int']>
    after: Maybe<Scalars['String']>
    isLightTheme: Scalars['Boolean']
}>

export type ExternalChangesetFileDiffsResult = {
    node: Maybe<
        | { __typename: 'Campaign' }
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | { __typename: 'Repository' }
        | { __typename: 'GitCommit' }
        | { __typename: 'ExternalService' }
        | { __typename: 'GitRef' }
        | { __typename: 'LSIFUpload' }
        | { __typename: 'LSIFIndex' }
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | {
              __typename: 'ExternalChangeset'
              diff: Maybe<
                  | ({ __typename: 'RepositoryComparison' } & RepositoryComparisonFields)
                  | {
                        __typename: 'PreviewRepositoryComparison'
                        fileDiffs: {
                            totalCount: Maybe<number>
                            nodes: Array<FileDiffFields>
                            pageInfo: { hasNextPage: boolean; endCursor: Maybe<string> }
                            diffStat: DiffStatFields
                        }
                    }
              >
          }
        | { __typename: 'ChangesetEvent' }
    >
}

export type ListCampaign = {
    id: string
    name: string
    description: Maybe<string>
    createdAt: string
    closedAt: Maybe<string>
    author: { username: string }
    changesets: { stats: { open: number; closed: number; merged: number } }
}

export type CampaignsVariables = Exact<{
    first: Maybe<Scalars['Int']>
    state: Maybe<CampaignState>
    viewerCanAdminister: Maybe<Scalars['Boolean']>
}>

export type CampaignsResult = { campaigns: { totalCount: number; nodes: Array<ListCampaign> } }

export type LsifUploadConnectionFields = {
    totalCount: Maybe<number>
    nodes: Array<{
        id: string
        state: LSIFUploadState
        inputCommit: string
        inputRoot: string
        inputIndexer: string
        uploadedAt: string
        startedAt: Maybe<string>
        finishedAt: Maybe<string>
        placeInQueue: Maybe<number>
        projectRoot: Maybe<{
            url: string
            path: string
            repository: { url: string; name: string }
            commit: { url: string; oid: string; abbreviatedOID: string }
        }>
    }>
    pageInfo: { endCursor: Maybe<string>; hasNextPage: boolean }
}

export type LsifUploadsVariables = Exact<{
    state: Maybe<LSIFUploadState>
    isLatestForRepo: Maybe<Scalars['Boolean']>
    first: Maybe<Scalars['Int']>
    after: Maybe<Scalars['String']>
    query: Maybe<Scalars['String']>
}>

export type LsifUploadsResult = { lsifUploads: LsifUploadConnectionFields }

export type LsifUploadsWithRepoVariables = Exact<{
    repository: Scalars['ID']
    state: Maybe<LSIFUploadState>
    isLatestForRepo: Maybe<Scalars['Boolean']>
    first: Maybe<Scalars['Int']>
    after: Maybe<Scalars['String']>
    query: Maybe<Scalars['String']>
}>

export type LsifUploadsWithRepoResult = {
    node: Maybe<
        | { __typename: 'Campaign' }
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | { __typename: 'Repository'; lsifUploads: LsifUploadConnectionFields }
        | { __typename: 'GitCommit' }
        | { __typename: 'ExternalService' }
        | { __typename: 'GitRef' }
        | { __typename: 'LSIFUpload' }
        | { __typename: 'LSIFIndex' }
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | { __typename: 'ExternalChangeset' }
        | { __typename: 'ChangesetEvent' }
    >
}

export type LsifUploadVariables = Exact<{
    id: Scalars['ID']
}>

export type LsifUploadResult = {
    node: Maybe<
        | { __typename: 'Campaign' }
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | { __typename: 'Repository' }
        | { __typename: 'GitCommit' }
        | { __typename: 'ExternalService' }
        | { __typename: 'GitRef' }
        | {
              __typename: 'LSIFUpload'
              id: string
              inputCommit: string
              inputRoot: string
              inputIndexer: string
              state: LSIFUploadState
              failure: Maybe<string>
              uploadedAt: string
              startedAt: Maybe<string>
              finishedAt: Maybe<string>
              isLatestForRepo: boolean
              placeInQueue: Maybe<number>
              projectRoot: Maybe<{
                  url: string
                  path: string
                  repository: { url: string; name: string }
                  commit: { url: string; oid: string; abbreviatedOID: string }
              }>
          }
        | { __typename: 'LSIFIndex' }
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | { __typename: 'ExternalChangeset' }
        | { __typename: 'ChangesetEvent' }
    >
}

export type DeleteLsifUploadVariables = Exact<{
    id: Scalars['ID']
}>

export type DeleteLsifUploadResult = { deleteLSIFUpload: Maybe<{ alwaysNil: Maybe<string> }> }

export type LsifIndexFields = {
    id: string
    state: LSIFIndexState
    inputCommit: string
    queuedAt: string
    failure: Maybe<string>
    startedAt: Maybe<string>
    finishedAt: Maybe<string>
    placeInQueue: Maybe<number>
    projectRoot: Maybe<{
        url: string
        path: string
        repository: { url: string; name: string }
        commit: { url: string; oid: string; abbreviatedOID: string }
    }>
}

export type LsifIndexConnectionFields = {
    totalCount: Maybe<number>
    nodes: Array<LsifIndexFields>
    pageInfo: { endCursor: Maybe<string>; hasNextPage: boolean }
}

export type LsifIndexesVariables = Exact<{
    state: Maybe<LSIFIndexState>
    first: Maybe<Scalars['Int']>
    after: Maybe<Scalars['String']>
    query: Maybe<Scalars['String']>
}>

export type LsifIndexesResult = { lsifIndexes: LsifIndexConnectionFields }

export type LsifIndexesWithRepoVariables = Exact<{
    repository: Scalars['ID']
    state: Maybe<LSIFIndexState>
    first: Maybe<Scalars['Int']>
    after: Maybe<Scalars['String']>
    query: Maybe<Scalars['String']>
}>

export type LsifIndexesWithRepoResult = {
    node: Maybe<
        | { __typename: 'Campaign' }
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | { __typename: 'Repository'; lsifIndexes: LsifIndexConnectionFields }
        | { __typename: 'GitCommit' }
        | { __typename: 'ExternalService' }
        | { __typename: 'GitRef' }
        | { __typename: 'LSIFUpload' }
        | { __typename: 'LSIFIndex' }
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | { __typename: 'ExternalChangeset' }
        | { __typename: 'ChangesetEvent' }
    >
}

export type LsifIndexVariables = Exact<{
    id: Scalars['ID']
}>

export type LsifIndexResult = {
    node: Maybe<
        | { __typename: 'Campaign' }
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | { __typename: 'Repository' }
        | { __typename: 'GitCommit' }
        | { __typename: 'ExternalService' }
        | { __typename: 'GitRef' }
        | { __typename: 'LSIFUpload' }
        | ({ __typename: 'LSIFIndex' } & LsifIndexFields)
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | { __typename: 'ExternalChangeset' }
        | { __typename: 'ChangesetEvent' }
    >
}

export type DeleteLsifIndexVariables = Exact<{
    id: Scalars['ID']
}>

export type DeleteLsifIndexResult = { deleteLSIFIndex: Maybe<{ alwaysNil: Maybe<string> }> }

export type ProductPlansVariables = Exact<{ [key: string]: never }>

export type ProductPlansResult = {
    dotcom: {
        productPlans: Array<{
            productPlanID: string
            billingPlanID: string
            name: string
            pricePerUserPerYear: number
            minQuantity: Maybe<number>
            maxQuantity: Maybe<number>
            tiersMode: string
            planTiers: Array<{ unitAmount: number; upTo: number; flatAmount: number }>
        }>
    }
}

export type ProductSubscriptionFields = {
    id: string
    name: string
    createdAt: string
    isArchived: boolean
    url: string
    account: Maybe<{
        id: string
        username: string
        displayName: Maybe<string>
        emails: Array<{ email: string; verified: boolean }>
    }>
    invoiceItem: Maybe<{ userCount: number; expiresAt: string; plan: { name: string; nameWithBrand: string } }>
    activeLicense: Maybe<{
        licenseKey: string
        info: Maybe<{ productNameWithBrand: string; tags: Array<string>; userCount: number; expiresAt: string }>
    }>
}

export type ExploreExtensionsVariables = Exact<{
    first: Maybe<Scalars['Int']>
    prioritizeExtensionIDs: Maybe<Array<Scalars['String']>>
}>

export type ExploreExtensionsResult = {
    extensionRegistry: {
        extensions: {
            nodes: Array<{
                id: string
                extensionIDWithoutRegistry: string
                url: string
                manifest: Maybe<{ description: Maybe<string> }>
            }>
        }
    }
}

export type UpdateRegistryExtensionVariables = Exact<{
    extension: Scalars['ID']
    name: Maybe<Scalars['String']>
}>

export type UpdateRegistryExtensionResult = { extensionRegistry: { updateExtension: { extension: { url: string } } } }

export type PublishRegistryExtensionVariables = Exact<{
    extensionID: Scalars['String']
    manifest: Scalars['String']
    bundle: Scalars['String']
}>

export type PublishRegistryExtensionResult = { extensionRegistry: { publishExtension: { extension: { url: string } } } }

export type CreateRegistryExtensionVariables = Exact<{
    publisher: Scalars['ID']
    name: Scalars['String']
}>

export type CreateRegistryExtensionResult = {
    extensionRegistry: { createExtension: { extension: { id: string; extensionID: string; url: string } } }
}

export type DeleteRegistryExtensionVariables = Exact<{
    extension: Scalars['ID']
}>

export type DeleteRegistryExtensionResult = { extensionRegistry: { deleteExtension: { alwaysNil: Maybe<string> } } }

export type ViewerRegistryPublishersVariables = Exact<{ [key: string]: never }>

export type ViewerRegistryPublishersResult = {
    extensionRegistry: {
        localExtensionIDPrefix: Maybe<string>
        viewerPublishers: Array<
            { __typename: 'User'; id: string; username: string } | { __typename: 'Org'; id: string; name: string }
        >
    }
}

export type LsifUploadsForRepoVariables = Exact<{
    repository: Scalars['ID']
    state: Maybe<LSIFUploadState>
    isLatestForRepo: Maybe<Scalars['Boolean']>
    first: Maybe<Scalars['Int']>
    after: Maybe<Scalars['String']>
    query: Maybe<Scalars['String']>
}>

export type LsifUploadsForRepoResult = {
    node: Maybe<
        | { __typename: 'Campaign' }
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | {
              __typename: 'Repository'
              lsifUploads: {
                  totalCount: Maybe<number>
                  nodes: Array<{
                      id: string
                      state: LSIFUploadState
                      inputCommit: string
                      inputRoot: string
                      inputIndexer: string
                      uploadedAt: string
                      startedAt: Maybe<string>
                      finishedAt: Maybe<string>
                      placeInQueue: Maybe<number>
                      projectRoot: Maybe<{ path: string; url: string; commit: { abbreviatedOID: string; url: string } }>
                  }>
                  pageInfo: { endCursor: Maybe<string>; hasNextPage: boolean }
              }
          }
        | { __typename: 'GitCommit' }
        | { __typename: 'ExternalService' }
        | { __typename: 'GitRef' }
        | { __typename: 'LSIFUpload' }
        | { __typename: 'LSIFIndex' }
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | { __typename: 'ExternalChangeset' }
        | { __typename: 'ChangesetEvent' }
    >
}

export type DeleteLsifUploadForRepoVariables = Exact<{
    id: Scalars['ID']
}>

export type DeleteLsifUploadForRepoResult = { deleteLSIFUpload: Maybe<{ alwaysNil: Maybe<string> }> }

export type SearchResultsStatsVariables = Exact<{
    query: Scalars['String']
}>

export type SearchResultsStatsResult = {
    search: Maybe<{ results: { limitHit: boolean }; stats: { languages: Array<{ name: string; totalLines: number }> } }>
}

export type AuthProviderFields = {
    serviceType: string
    serviceID: string
    clientID: string
    displayName: string
    isBuiltin: boolean
    authenticationURL: Maybe<string>
}

export type AuthProvidersVariables = Exact<{ [key: string]: never }>

export type AuthProvidersResult = {
    site: {
        authProviders: { totalCount: number; nodes: Array<AuthProviderFields>; pageInfo: { hasNextPage: boolean } }
    }
}

export type ExternalAccountsVariables = Exact<{
    first: Maybe<Scalars['Int']>
}>

export type ExternalAccountsResult = {
    site: {
        externalAccounts: {
            totalCount: number
            nodes: Array<ExternalAccountFields>
            pageInfo: { hasNextPage: boolean }
        }
    }
}

export type SiteAdminRegistryExtensionsVariables = Exact<{
    first: Maybe<Scalars['Int']>
    publisher: Maybe<Scalars['ID']>
    query: Maybe<Scalars['String']>
    local: Maybe<Scalars['Boolean']>
    remote: Maybe<Scalars['Boolean']>
}>

export type SiteAdminRegistryExtensionsResult = {
    extensionRegistry: {
        extensions: {
            totalCount: number
            error: Maybe<string>
            nodes: Array<RegistryExtensionFields>
            pageInfo: { hasNextPage: boolean }
        }
    }
}

export type SiteAdminLsifUploadVariables = Exact<{
    id: Scalars['ID']
}>

export type SiteAdminLsifUploadResult = {
    node: Maybe<
        | { __typename: 'Campaign' }
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | { __typename: 'Repository' }
        | { __typename: 'GitCommit' }
        | { __typename: 'ExternalService' }
        | { __typename: 'GitRef' }
        | { __typename: 'LSIFUpload'; projectRoot: Maybe<{ commit: { repository: { name: string; url: string } } }> }
        | { __typename: 'LSIFIndex' }
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | { __typename: 'ExternalChangeset' }
        | { __typename: 'ChangesetEvent' }
    >
}

export type SetCustomerBillingVariables = Exact<{
    user: Scalars['ID']
    billingCustomerID: Maybe<Scalars['String']>
}>

export type SetCustomerBillingResult = { dotcom: { setUserBilling: { alwaysNil: Maybe<string> } } }

export type CustomerFields = {
    id: string
    username: string
    displayName: Maybe<string>
    urlForSiteAdminBilling: Maybe<string>
}

export type CustomersVariables = Exact<{
    first: Maybe<Scalars['Int']>
    query: Maybe<Scalars['String']>
}>

export type CustomersResult = {
    users: { totalCount: number; nodes: Array<CustomerFields>; pageInfo: { hasNextPage: boolean } }
}

export type CreateProductSubscriptionVariables = Exact<{
    accountID: Scalars['ID']
}>

export type CreateProductSubscriptionResult = {
    dotcom: { createProductSubscription: { urlForSiteAdmin: Maybe<string> } }
}

export type ProductSubscriptionAccountsVariables = Exact<{
    first: Maybe<Scalars['Int']>
    query: Maybe<Scalars['String']>
}>

export type ProductSubscriptionAccountsResult = {
    users: {
        totalCount: number
        nodes: Array<{
            id: string
            username: string
            emails: Array<{ email: string; verified: boolean; isPrimary: boolean }>
        }>
        pageInfo: { hasNextPage: boolean }
    }
}

export type GenerateProductLicenseForSubscriptionVariables = Exact<{
    productSubscriptionID: Scalars['ID']
    license: ProductLicenseInput
}>

export type GenerateProductLicenseForSubscriptionResult = {
    dotcom: { generateProductLicenseForSubscription: { id: string } }
}

export type ProductLicenseFields = {
    id: string
    licenseKey: string
    createdAt: string
    subscription: {
        id: string
        name: string
        urlForSiteAdmin: Maybe<string>
        account: Maybe<{ id: string; username: string; displayName: Maybe<string> }>
        activeLicense: Maybe<{ id: string }>
    }
    info: Maybe<{ productNameWithBrand: string; tags: Array<string>; userCount: number; expiresAt: string }>
}

export type DotComProductLicensesVariables = Exact<{
    first: Maybe<Scalars['Int']>
    licenseKeySubstring: Maybe<Scalars['String']>
}>

export type DotComProductLicensesResult = {
    dotcom: {
        productLicenses: { totalCount: number; nodes: Array<ProductLicenseFields>; pageInfo: { hasNextPage: boolean } }
    }
}

export type SetProductSubscriptionBillingVariables = Exact<{
    id: Scalars['ID']
    billingSubscriptionID: Maybe<Scalars['String']>
}>

export type SetProductSubscriptionBillingResult = {
    dotcom: { setProductSubscriptionBilling: { alwaysNil: Maybe<string> } }
}

export type SiteAdminProductSubscriptionFields = {
    id: string
    name: string
    createdAt: string
    isArchived: boolean
    urlForSiteAdmin: Maybe<string>
    account: Maybe<{
        id: string
        username: string
        displayName: Maybe<string>
        emails: Array<{ email: string; isPrimary: boolean }>
    }>
    invoiceItem: Maybe<{ userCount: number; expiresAt: string; plan: { nameWithBrand: string } }>
    activeLicense: Maybe<{
        id: string
        licenseKey: string
        createdAt: string
        info: Maybe<{ productNameWithBrand: string; tags: Array<string>; userCount: number; expiresAt: string }>
    }>
}

export type DotComProductSubscriptionVariables = Exact<{
    uuid: Scalars['String']
}>

export type DotComProductSubscriptionResult = {
    dotcom: {
        productSubscription: {
            urlForSiteAdminBilling: Maybe<string>
            invoiceItem: Maybe<{
                userCount: number
                expiresAt: string
                plan: { billingPlanID: string; name: string; nameWithBrand: string; pricePerUserPerYear: number }
            }>
            events: Array<{ id: string; date: string; title: string; description: Maybe<string>; url: Maybe<string> }>
            productLicenses: {
                totalCount: number
                nodes: Array<{
                    id: string
                    licenseKey: string
                    createdAt: string
                    info: Maybe<{ tags: Array<string>; userCount: number; expiresAt: string }>
                }>
                pageInfo: { hasNextPage: boolean }
            }
        } & ProductSubscriptionFields
    }
}

export type ProductLicensesVariables = Exact<{
    first: Maybe<Scalars['Int']>
    subscriptionUUID: Scalars['String']
}>

export type ProductLicensesResult = {
    dotcom: {
        productSubscription: {
            productLicenses: {
                totalCount: number
                nodes: Array<ProductLicenseFields>
                pageInfo: { hasNextPage: boolean }
            }
        }
    }
}

export type ArchiveProductSubscriptionVariables = Exact<{
    id: Scalars['ID']
}>

export type ArchiveProductSubscriptionResult = { dotcom: { archiveProductSubscription: { alwaysNil: Maybe<string> } } }

export type ProductSubscriptionsDotComVariables = Exact<{
    first: Maybe<Scalars['Int']>
    account: Maybe<Scalars['ID']>
    query: Maybe<Scalars['String']>
}>

export type ProductSubscriptionsDotComResult = {
    dotcom: {
        productSubscriptions: {
            totalCount: number
            nodes: Array<SiteAdminProductSubscriptionFields>
            pageInfo: { hasNextPage: boolean }
        }
    }
}

export type ProductLicenseInfoVariables = Exact<{ [key: string]: never }>

export type ProductLicenseInfoResult = {
    site: {
        productSubscription: {
            productNameWithBrand: string
            actualUserCount: number
            actualUserCountDate: string
            noLicenseWarningUserCount: Maybe<number>
            license: Maybe<{ tags: Array<string>; userCount: number; expiresAt: string }>
        }
    }
}

export type PreviewProductSubscriptionInvoiceVariables = Exact<{
    account: Maybe<Scalars['ID']>
    subscriptionToUpdate: Maybe<Scalars['ID']>
    productSubscription: ProductSubscriptionInput
}>

export type PreviewProductSubscriptionInvoiceResult = {
    dotcom: {
        previewProductSubscriptionInvoice: {
            price: number
            prorationDate: Maybe<string>
            isDowngradeRequiringManualIntervention: boolean
            beforeInvoiceItem: Maybe<{
                userCount: number
                expiresAt: string
                plan: { billingPlanID: string; name: string; pricePerUserPerYear: number }
            }>
            afterInvoiceItem: {
                userCount: number
                expiresAt: string
                plan: { billingPlanID: string; name: string; pricePerUserPerYear: number }
            }
        }
    }
}

export type ProductSubscriptionOnEditPageVariables = Exact<{
    uuid: Scalars['String']
}>

export type ProductSubscriptionOnEditPageResult = {
    dotcom: { productSubscription: ProductSubscriptionFieldsOnEditPage }
}

export type ProductSubscriptionFieldsOnEditPage = {
    id: string
    name: string
    url: string
    invoiceItem: Maybe<{ userCount: number; expiresAt: string; plan: { billingPlanID: string } }>
}

export type UpdatePaidProductSubscriptionVariables = Exact<{
    subscriptionID: Scalars['ID']
    update: ProductSubscriptionInput
    paymentToken: Maybe<Scalars['String']>
}>

export type UpdatePaidProductSubscriptionResult = {
    dotcom: { updatePaidProductSubscription: { productSubscription: { url: string } } }
}

export type CreatePaidProductSubscriptionVariables = Exact<{
    accountID: Scalars['ID']
    productSubscription: ProductSubscriptionInput
    paymentToken: Maybe<Scalars['String']>
}>

export type CreatePaidProductSubscriptionResult = {
    dotcom: { createPaidProductSubscription: { productSubscription: { id: string; name: string; url: string } } }
}

export type ProductSubscriptionVariables = Exact<{
    uuid: Scalars['String']
}>

export type ProductSubscriptionResult = { dotcom: { productSubscription: ProductSubscriptionFieldsOnSubscriptionPage } }

export type ProductSubscriptionFieldsOnSubscriptionPage = {
    id: string
    name: string
    createdAt: string
    isArchived: boolean
    url: string
    urlForSiteAdmin: Maybe<string>
    account: Maybe<{
        id: string
        username: string
        displayName: Maybe<string>
        emails: Array<{ email: string; verified: boolean }>
    }>
    invoiceItem: Maybe<{
        userCount: number
        expiresAt: string
        plan: { billingPlanID: string; name: string; nameWithBrand: string; pricePerUserPerYear: number }
    }>
    events: Array<{ id: string; date: string; title: string; description: Maybe<string>; url: Maybe<string> }>
    activeLicense: Maybe<{
        licenseKey: string
        info: Maybe<{ productNameWithBrand: string; tags: Array<string>; userCount: number; expiresAt: string }>
    }>
}

export type ProductSubscriptionsVariables = Exact<{
    first: Maybe<Scalars['Int']>
    account: Maybe<Scalars['ID']>
}>

export type ProductSubscriptionsResult = {
    dotcom: {
        productSubscriptions: {
            totalCount: number
            nodes: Array<ProductSubscriptionFields>
            pageInfo: { hasNextPage: boolean }
        }
    }
}

export type ExternalAccountFields = {
    id: string
    serviceType: string
    serviceID: string
    clientID: string
    accountID: string
    createdAt: string
    updatedAt: string
    refreshURL: Maybe<string>
    accountData: Maybe<unknown>
    user: { id: string; username: string }
}

export type DeleteExternalAccountVariables = Exact<{
    externalAccount: Scalars['ID']
}>

export type DeleteExternalAccountResult = { deleteExternalAccount: { alwaysNil: Maybe<string> } }

export type UserExternalAccountsVariables = Exact<{
    user: Scalars['ID']
    first: Maybe<Scalars['Int']>
}>

export type UserExternalAccountsResult = {
    node: Maybe<{
        externalAccounts: {
            totalCount: number
            nodes: Array<ExternalAccountFields>
            pageInfo: { hasNextPage: boolean }
        }
    }>
}

export type RegistryExtensionsVariables = Exact<{
    query: Maybe<Scalars['String']>
    prioritizeExtensionIDs: Array<Scalars['String']>
}>

export type RegistryExtensionsResult = {
    extensionRegistry: { extensions: { error: Maybe<string>; nodes: Array<RegistryExtensionFieldsForList> } }
}

export type RegistryExtensionFieldsForList = {
    id: string
    extensionID: string
    extensionIDWithoutRegistry: string
    name: string
    createdAt: Maybe<string>
    updatedAt: Maybe<string>
    url: string
    remoteURL: Maybe<string>
    registryName: string
    isLocal: boolean
    isWorkInProgress: boolean
    viewerCanAdminister: boolean
    publisher: Maybe<
        | { __typename: 'User'; id: string; username: string; displayName: Maybe<string>; url: string }
        | { __typename: 'Org'; id: string; name: string; displayName: Maybe<string>; url: string }
    >
    manifest: Maybe<{ raw: string; description: Maybe<string> }>
}

export type RegistryExtensionFields = {
    id: string
    extensionID: string
    extensionIDWithoutRegistry: string
    name: string
    createdAt: Maybe<string>
    updatedAt: Maybe<string>
    publishedAt: Maybe<string>
    url: string
    remoteURL: Maybe<string>
    registryName: string
    isLocal: boolean
    isWorkInProgress: boolean
    viewerCanAdminister: boolean
    publisher: Maybe<
        | { __typename: 'User'; id: string; username: string; displayName: Maybe<string>; url: string }
        | { __typename: 'Org'; id: string; name: string; displayName: Maybe<string>; url: string }
    >
    manifest: Maybe<{ raw: string; description: Maybe<string> }>
}

export type RegistryExtensionVariables = Exact<{
    extensionID: Scalars['String']
}>

export type RegistryExtensionResult = { extensionRegistry: { extension: Maybe<RegistryExtensionFields> } }

export type SubmitSurveyVariables = Exact<{
    input: SurveySubmissionInput
}>

export type SubmitSurveyResult = { submitSurvey: Maybe<{ alwaysNil: Maybe<string> }> }

export type FetchSurveyResponsesVariables = Exact<{ [key: string]: never }>

export type FetchSurveyResponsesResult = {
    surveyResponses: {
        totalCount: number
        nodes: Array<{
            email: Maybe<string>
            score: number
            reason: Maybe<string>
            better: Maybe<string>
            createdAt: string
            user: Maybe<{ id: string; username: string; emails: Array<{ email: string }> }>
        }>
    }
}

export type FetchAllUsersWithSurveyResponsesVariables = Exact<{
    activePeriod: Maybe<UserActivePeriod>
    first: Maybe<Scalars['Int']>
    query: Maybe<Scalars['String']>
}>

export type FetchAllUsersWithSurveyResponsesResult = {
    users: {
        totalCount: number
        nodes: Array<{
            id: string
            username: string
            emails: Array<{ email: string }>
            surveyResponses: Array<{ score: number; reason: Maybe<string>; better: Maybe<string>; createdAt: string }>
            usageStatistics: { lastActiveTime: Maybe<string> }
        }>
    }
}

export type FetchSurveyResponseAggregatesVariables = Exact<{ [key: string]: never }>

export type FetchSurveyResponseAggregatesResult = {
    surveyResponses: { totalCount: number; last30DaysCount: number; averageScore: number; netPromoterScore: number }
}

export type RequestTrialVariables = Exact<{
    email: Scalars['String']
}>

export type RequestTrialResult = { requestTrial: Maybe<{ alwaysNil: Maybe<string> }> }

export type StatusMessagesVariables = Exact<{ [key: string]: never }>

export type StatusMessagesResult = {
    statusMessages: Array<
        | { __typename: 'CloningProgress'; message: string }
        | {
              __typename: 'ExternalServiceSyncError'
              message: string
              externalService: { id: string; displayName: string }
          }
        | { __typename: 'SyncError'; message: string }
    >
}

export type OrganizationVariables = Exact<{
    name: Scalars['String']
}>

export type OrganizationResult = {
    organization: Maybe<{
        __typename: 'Org'
        id: string
        name: string
        displayName: Maybe<string>
        url: string
        settingsURL: Maybe<string>
        viewerIsMember: boolean
        viewerCanAdminister: boolean
        createdAt: string
        viewerPendingInvitation: Maybe<{
            id: string
            respondURL: Maybe<string>
            sender: { username: string; displayName: Maybe<string>; avatarURL: Maybe<string>; createdAt: string }
        }>
    }>
}

export type RespondToOrganizationInvitationVariables = Exact<{
    organizationInvitation: Scalars['ID']
    responseType: OrganizationInvitationResponseType
}>

export type RespondToOrganizationInvitationResult = { respondToOrganizationInvitation: { alwaysNil: Maybe<string> } }

export type OrganizationMembersVariables = Exact<{
    id: Scalars['ID']
}>

export type OrganizationMembersResult = {
    node: Maybe<{
        viewerCanAdminister: boolean
        members: {
            totalCount: number
            nodes: Array<{ id: string; username: string; displayName: Maybe<string>; avatarURL: Maybe<string> }>
        }
    }>
}

export type CreateOrganizationVariables = Exact<{
    name: Scalars['String']
    displayName: Maybe<Scalars['String']>
}>

export type CreateOrganizationResult = { createOrganization: { id: string; name: string } }

export type removeUserFromOrganizationVariables = Exact<{
    user: Scalars['ID']
    organization: Scalars['ID']
}>

export type removeUserFromOrganizationResult = { removeUserFromOrganization: Maybe<{ alwaysNil: Maybe<string> }> }

export type UpdateOrganizationVariables = Exact<{
    id: Scalars['ID']
    displayName: Maybe<Scalars['String']>
}>

export type UpdateOrganizationResult = { updateOrganization: { id: string } }

export type InviteUserToOrganizationVariables = Exact<{
    organization: Scalars['ID']
    username: Scalars['String']
}>

export type InviteUserToOrganizationResult = {
    inviteUserToOrganization: { sentInvitationEmail: boolean; invitationURL: string }
}

export type AddUserToOrganizationVariables = Exact<{
    organization: Scalars['ID']
    username: Scalars['String']
}>

export type AddUserToOrganizationResult = { addUserToOrganization: { alwaysNil: Maybe<string> } }

export type GitRefFields = {
    id: string
    displayName: string
    name: string
    abbrevName: string
    url: string
    target: {
        commit: Maybe<{
            author: SignatureFieldsForReferences
            committer: Maybe<SignatureFieldsForReferences>
            behindAhead: { behind: number; ahead: number }
        }>
    }
}

export type SignatureFieldsForReferences = {
    date: string
    person: { displayName: string; user: Maybe<{ username: string }> }
}

export type RepositoryGitRefsVariables = Exact<{
    repo: Scalars['ID']
    first: Maybe<Scalars['Int']>
    query: Maybe<Scalars['String']>
    type: GitRefType
    withBehindAhead: Scalars['Boolean']
}>

export type RepositoryGitRefsResult = {
    node: Maybe<{ gitRefs: { totalCount: number; nodes: Array<GitRefFields>; pageInfo: { hasNextPage: boolean } } }>
}

export type FetchCommitsVariables = Exact<{
    repo: Scalars['ID']
    revision: Scalars['String']
    first: Maybe<Scalars['Int']>
    currentPath: Maybe<Scalars['String']>
    query: Maybe<Scalars['String']>
}>

export type FetchCommitsResult = {
    node: Maybe<
        | { __typename: 'Campaign' }
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | { __typename: 'Repository'; commit: Maybe<{ ancestors: { nodes: Array<GitCommitFields> } }> }
        | { __typename: 'GitCommit' }
        | { __typename: 'ExternalService' }
        | { __typename: 'GitRef' }
        | { __typename: 'LSIFUpload' }
        | { __typename: 'LSIFIndex' }
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | { __typename: 'ExternalChangeset' }
        | { __typename: 'ChangesetEvent' }
    >
}

export type RepositoriesForPopoverVariables = Exact<{
    first: Maybe<Scalars['Int']>
    query: Maybe<Scalars['String']>
}>

export type RepositoriesForPopoverResult = {
    repositories: {
        totalCount: Maybe<number>
        nodes: Array<{ id: string; name: string }>
        pageInfo: { hasNextPage: boolean }
    }
}

export type RepositoryGitCommitVariables = Exact<{
    repo: Scalars['ID']
    first: Maybe<Scalars['Int']>
    revision: Scalars['String']
    query: Maybe<Scalars['String']>
}>

export type RepositoryGitCommitResult = {
    node: Maybe<
        | { __typename: 'Campaign' }
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | {
              __typename: 'Repository'
              commit: Maybe<{
                  ancestors: {
                      nodes: Array<{
                          id: string
                          oid: string
                          abbreviatedOID: string
                          subject: string
                          author: { date: string; person: { name: string; avatarURL: string } }
                      }>
                      pageInfo: { hasNextPage: boolean }
                  }
              }>
          }
        | { __typename: 'GitCommit' }
        | { __typename: 'ExternalService' }
        | { __typename: 'GitRef' }
        | { __typename: 'LSIFUpload' }
        | { __typename: 'LSIFIndex' }
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | { __typename: 'ExternalChangeset' }
        | { __typename: 'ChangesetEvent' }
    >
}

export type RepositoryRedirectVariables = Exact<{
    repoName: Scalars['String']
}>

export type RepositoryRedirectResult = {
    repositoryRedirect: Maybe<
        | {
              __typename: 'Repository'
              id: string
              name: string
              url: string
              description: string
              viewerCanAdminister: boolean
              externalURLs: Array<{ url: string; serviceType: Maybe<string> }>
              defaultBranch: Maybe<{ displayName: string }>
          }
        | { __typename: 'Redirect'; url: string }
    >
}

export type ResolveRevVariables = Exact<{
    repoName: Scalars['String']
    revision: Scalars['String']
}>

export type ResolveRevResult = {
    repositoryRedirect: Maybe<
        | {
              __typename: 'Repository'
              mirrorInfo: { cloneInProgress: boolean; cloneProgress: Maybe<string>; cloned: boolean }
              commit: Maybe<{ oid: string; tree: Maybe<{ url: string }> }>
              defaultBranch: Maybe<{ abbrevName: string }>
          }
        | { __typename: 'Redirect'; url: string }
    >
}

export type HighlightedFileVariables = Exact<{
    repoName: Scalars['String']
    commitID: Scalars['String']
    filePath: Scalars['String']
    disableTimeout: Scalars['Boolean']
    isLightTheme: Scalars['Boolean']
}>

export type HighlightedFileResult = {
    repository: Maybe<{
        commit: Maybe<{
            file: Maybe<
                | { isDirectory: boolean; richHTML: string; highlight: { aborted: boolean; html: string } }
                | { isDirectory: boolean; richHTML: string; highlight: { aborted: boolean; html: string } }
            >
        }>
    }>
}

export type FileExternalLinksVariables = Exact<{
    repoName: Scalars['String']
    revision: Scalars['String']
    filePath: Scalars['String']
}>

export type FileExternalLinksResult = {
    repository: Maybe<{
        commit: Maybe<{
            file: Maybe<
                | { externalURLs: Array<{ url: string; serviceType: Maybe<string> }> }
                | { externalURLs: Array<{ url: string; serviceType: Maybe<string> }> }
            >
        }>
    }>
}

export type TreeEntriesVariables = Exact<{
    repoName: Scalars['String']
    revision: Scalars['String']
    commitID: Scalars['String']
    filePath: Scalars['String']
    first: Maybe<Scalars['Int']>
}>

export type TreeEntriesResult = {
    repository: Maybe<{
        commit: Maybe<{
            tree: Maybe<{
                isRoot: boolean
                url: string
                entries: Array<
                    | {
                          name: string
                          path: string
                          isDirectory: boolean
                          url: string
                          isSingleChild: boolean
                          submodule: Maybe<{ url: string; commit: string }>
                      }
                    | {
                          name: string
                          path: string
                          isDirectory: boolean
                          url: string
                          isSingleChild: boolean
                          submodule: Maybe<{ url: string; commit: string }>
                      }
                >
            }>
        }>
    }>
}

export type BlobVariables = Exact<{
    repoName: Scalars['String']
    commitID: Scalars['String']
    filePath: Scalars['String']
    isLightTheme: Scalars['Boolean']
    disableTimeout: Scalars['Boolean']
}>

export type BlobResult = {
    repository: Maybe<{
        commit: Maybe<{
            file: Maybe<
                | { content: string; richHTML: string; highlight: { aborted: boolean; html: string } }
                | { content: string; richHTML: string; highlight: { aborted: boolean; html: string } }
            >
        }>
    }>
}

export type RepositoryGitBranchesOverviewVariables = Exact<{
    repo: Scalars['ID']
    first: Scalars['Int']
    withBehindAhead: Scalars['Boolean']
}>

export type RepositoryGitBranchesOverviewResult = {
    node: Maybe<{
        defaultBranch: Maybe<GitRefFields>
        gitRefs: { nodes: Array<GitRefFields>; pageInfo: { hasNextPage: boolean } }
    }>
}

export type RepositoryCommitVariables = Exact<{
    repo: Scalars['ID']
    revspec: Scalars['String']
}>

export type RepositoryCommitResult = { node: Maybe<{ commit: Maybe<{ __typename: 'GitCommit' } & GitCommitFields> }> }

export type GitCommitFields = {
    id: string
    oid: string
    abbreviatedOID: string
    message: string
    subject: string
    body: Maybe<string>
    url: string
    canonicalURL: string
    author: SignatureFields
    committer: Maybe<SignatureFields>
    parents: Array<{ oid: string; abbreviatedOID: string; url: string }>
    externalURLs: Array<{ url: string; serviceType: Maybe<string> }>
    tree: Maybe<{ canonicalURL: string }>
}

export type SignatureFields = {
    date: string
    person: {
        avatarURL: string
        name: string
        email: string
        displayName: string
        user: Maybe<{ id: string; username: string; displayName: Maybe<string>; url: string }>
    }
}

export type RepositoryGitCommitsVariables = Exact<{
    repo: Scalars['ID']
    revspec: Scalars['String']
    first: Maybe<Scalars['Int']>
    query: Maybe<Scalars['String']>
}>

export type RepositoryGitCommitsResult = {
    node: Maybe<{ commit: Maybe<{ ancestors: { nodes: Array<GitCommitFields>; pageInfo: { hasNextPage: boolean } } }> }>
}

export type RepositoryComparisonCommitsVariables = Exact<{
    repo: Scalars['ID']
    base: Maybe<Scalars['String']>
    head: Maybe<Scalars['String']>
    first: Maybe<Scalars['Int']>
}>

export type RepositoryComparisonCommitsResult = {
    node: Maybe<{ comparison: { commits: { nodes: Array<GitCommitFields>; pageInfo: { hasNextPage: boolean } } } }>
}

export type RepositoryComparisonDiffVariables = Exact<{
    repo: Scalars['ID']
    base: Maybe<Scalars['String']>
    head: Maybe<Scalars['String']>
    first: Maybe<Scalars['Int']>
    after: Maybe<Scalars['String']>
    isLightTheme: Scalars['Boolean']
}>

export type RepositoryComparisonDiffResult = {
    node: Maybe<{
        comparison: {
            fileDiffs: {
                totalCount: Maybe<number>
                nodes: Array<FileDiffFields>
                pageInfo: { endCursor: Maybe<string>; hasNextPage: boolean }
                diffStat: DiffStatFields
            }
        }
    }>
}

export type RepositoryComparisonVariables = Exact<{
    repo: Scalars['ID']
    base: Maybe<Scalars['String']>
    head: Maybe<Scalars['String']>
}>

export type RepositoryComparisonResult = {
    node: Maybe<{
        comparison: {
            range: {
                expr: string
                baseRevSpec: { object: Maybe<{ oid: string }> }
                headRevSpec: { object: Maybe<{ oid: string }> }
            }
        }
    }>
}

export type ExploreRepositoriesVariables = Exact<{
    first: Maybe<Scalars['Int']>
    names: Maybe<Array<Scalars['String']>>
}>

export type ExploreRepositoriesResult = {
    repositories: { nodes: Array<{ name: string; description: string; url: string }> }
}

export type RepositoryTextSearchIndexVariables = Exact<{
    id: Scalars['ID']
}>

export type RepositoryTextSearchIndexResult = {
    node: Maybe<{
        textSearchIndex: Maybe<{
            status: Maybe<{
                updatedAt: string
                contentByteSize: number
                contentFilesCount: number
                indexByteSize: number
                indexShardsCount: number
            }>
            refs: Array<{
                indexed: boolean
                current: boolean
                ref: { displayName: string; url: string }
                indexedCommit: Maybe<{ oid: string; abbreviatedOID: string; commit: Maybe<{ url: string }> }>
            }>
        }>
    }>
}

export type RepositoryVariables = Exact<{
    name: Scalars['String']
}>

export type RepositoryResult = {
    repository: Maybe<{
        id: string
        name: string
        isPrivate: boolean
        viewerCanAdminister: boolean
        mirrorInfo: {
            remoteURL: string
            cloneInProgress: boolean
            cloneProgress: Maybe<string>
            cloned: boolean
            updatedAt: Maybe<string>
            updateSchedule: Maybe<{ due: string; index: number; total: number }>
            updateQueue: Maybe<{ updating: boolean; index: number; total: number }>
        }
        externalServices: { nodes: Array<{ id: string; kind: ExternalServiceKind; displayName: string }> }
        permissionsInfo: Maybe<{ syncedAt: Maybe<string>; updatedAt: string }>
    }>
}

export type RepositoryContributorsVariables = Exact<{
    repo: Scalars['ID']
    first: Maybe<Scalars['Int']>
    revisionRange: Maybe<Scalars['String']>
    after: Maybe<Scalars['String']>
    path: Maybe<Scalars['String']>
}>

export type RepositoryContributorsResult = {
    node: Maybe<{
        contributors: {
            totalCount: number
            nodes: Array<{
                count: number
                person: {
                    name: string
                    displayName: string
                    email: string
                    avatarURL: string
                    user: Maybe<{ username: string; url: string }>
                }
                commits: {
                    nodes: Array<{
                        oid: string
                        abbreviatedOID: string
                        url: string
                        subject: string
                        author: { date: string }
                    }>
                }
            }>
            pageInfo: { hasNextPage: boolean }
        }
    }>
}

export type TreeCommitsVariables = Exact<{
    repo: Scalars['ID']
    revspec: Scalars['String']
    first: Maybe<Scalars['Int']>
    filePath: Maybe<Scalars['String']>
    after: Maybe<Scalars['String']>
}>

export type TreeCommitsResult = {
    node: Maybe<
        | { __typename: 'Campaign' }
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | {
              __typename: 'Repository'
              commit: Maybe<{ ancestors: { nodes: Array<GitCommitFields>; pageInfo: { hasNextPage: boolean } } }>
          }
        | { __typename: 'GitCommit' }
        | { __typename: 'ExternalService' }
        | { __typename: 'GitRef' }
        | { __typename: 'LSIFUpload' }
        | { __typename: 'LSIFIndex' }
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | { __typename: 'ExternalChangeset' }
        | { __typename: 'ChangesetEvent' }
    >
}

export type SearchVariables = Exact<{
    query: Scalars['String']
    version: SearchVersion
    patternType: SearchPatternType
    useCodemod: Scalars['Boolean']
    versionContext: Maybe<Scalars['String']>
}>

export type SearchResult = {
    search: Maybe<{
        results: {
            __typename: 'SearchResults'
            limitHit: boolean
            matchCount: number
            approximateResultCount: string
            repositoriesCount: number
            indexUnavailable: boolean
            elapsedMilliseconds: number
            missing: Array<{ name: string }>
            cloning: Array<{ name: string }>
            timedout: Array<{ name: string }>
            dynamicFilters: Array<{ value: string; label: string; count: number; limitHit: boolean; kind: string }>
            results: Array<
                | {
                      __typename: 'FileMatch'
                      limitHit: boolean
                      file: { path: string; url: string; commit: { oid: string } }
                      repository: { name: string; url: string }
                      revSpec: Maybe<
                          | { __typename: 'GitRef'; displayName: string; url: string }
                          | {
                                __typename: 'GitRevSpecExpr'
                                expr: string
                                object: Maybe<{ commit: Maybe<{ url: string }> }>
                            }
                          | { __typename: 'GitObject'; abbreviatedOID: string; commit: Maybe<{ url: string }> }
                      >
                      symbols: Array<{ name: string; containerName: Maybe<string>; url: string; kind: SymbolKind }>
                      lineMatches: Array<{
                          preview: string
                          lineNumber: number
                          offsetAndLengths: Array<Array<number>>
                      }>
                  }
                | {
                      __typename: 'CommitSearchResult'
                      url: string
                      icon: string
                      label: { html: string }
                      detail: { html: string }
                      matches: Array<{
                          url: string
                          body: { text: string; html: string }
                          highlights: Array<{ line: number; character: number; length: number }>
                      }>
                  }
                | {
                      __typename: 'Repository'
                      id: string
                      name: string
                      url: string
                      icon: string
                      label: { html: string }
                      detail: { html: string }
                      matches: Array<{
                          url: string
                          body: { text: string; html: string }
                          highlights: Array<{ line: number; character: number; length: number }>
                      }>
                  }
                | {
                      __typename: 'CodemodResult'
                      url: string
                      icon: string
                      label: { html: string }
                      detail: { html: string }
                      matches: Array<{
                          url: string
                          body: { text: string; html: string }
                          highlights: Array<{ line: number; character: number; length: number }>
                      }>
                  }
            >
            alert: Maybe<{
                title: string
                description: Maybe<string>
                proposedQueries: Maybe<Array<{ description: Maybe<string>; query: string }>>
            }>
        }
    }>
}

export type RepoGroupsVariables = Exact<{ [key: string]: never }>

export type RepoGroupsResult = { repoGroups: Array<{ __typename: 'RepoGroup'; name: string }> }

export type SearchSuggestionsVariables = Exact<{
    query: Scalars['String']
}>

export type SearchSuggestionsResult = {
    search: Maybe<{
        suggestions: Array<
            | { __typename: 'Repository'; name: string }
            | {
                  __typename: 'File'
                  path: string
                  name: string
                  isDirectory: boolean
                  url: string
                  repository: { name: string }
              }
            | {
                  __typename: 'Symbol'
                  name: string
                  containerName: Maybe<string>
                  url: string
                  kind: SymbolKind
                  location: { resource: { path: string; repository: { name: string } } }
              }
            | { __typename: 'Language' }
        >
    }>
}

export type ReposByQueryVariables = Exact<{
    query: Scalars['String']
}>

export type ReposByQueryResult = { search: Maybe<{ results: { repositories: Array<{ name: string; url: string }> } }> }

export type SavedSearchFields = {
    id: string
    description: string
    notify: boolean
    notifySlack: boolean
    query: string
    slackWebhookURL: Maybe<string>
    namespace: { id: string } | { id: string }
}

export type savedSearchesVariables = Exact<{ [key: string]: never }>

export type savedSearchesResult = { savedSearches: Array<SavedSearchFields> }

export type SavedSearchVariables = Exact<{
    id: Scalars['ID']
}>

export type SavedSearchResult = {
    node: Maybe<{
        id: string
        description: string
        query: string
        notify: boolean
        notifySlack: boolean
        slackWebhookURL: Maybe<string>
        namespace: { id: string } | { id: string }
    }>
}

export type CreateSavedSearchVariables = Exact<{
    description: Scalars['String']
    query: Scalars['String']
    notifyOwner: Scalars['Boolean']
    notifySlack: Scalars['Boolean']
    userID: Maybe<Scalars['ID']>
    orgID: Maybe<Scalars['ID']>
}>

export type CreateSavedSearchResult = { createSavedSearch: SavedSearchFields }

export type UpdateSavedSearchVariables = Exact<{
    id: Scalars['ID']
    description: Scalars['String']
    query: Scalars['String']
    notifyOwner: Scalars['Boolean']
    notifySlack: Scalars['Boolean']
    userID: Maybe<Scalars['ID']>
    orgID: Maybe<Scalars['ID']>
}>

export type UpdateSavedSearchResult = { updateSavedSearch: SavedSearchFields }

export type DeleteSavedSearchVariables = Exact<{
    id: Scalars['ID']
}>

export type DeleteSavedSearchResult = { deleteSavedSearch: Maybe<{ alwaysNil: Maybe<string> }> }

export type highlightCodeVariables = Exact<{
    code: Scalars['String']
    fuzzyLanguage: Scalars['String']
    disableTimeout: Scalars['Boolean']
    isLightTheme: Scalars['Boolean']
}>

export type highlightCodeResult = { highlightCode: string }

export type ManyReposWarningVariables = Exact<{
    first: Maybe<Scalars['Int']>
}>

export type ManyReposWarningResult = { repositories: { nodes: Array<{ id: string }> } }

export type SettingsCascadeVariables = Exact<{
    subject: Scalars['ID']
}>

export type SettingsCascadeResult = {
    settingsSubject: Maybe<
        | {
              settingsCascade: {
                  subjects: Array<
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                  >
              }
          }
        | {
              settingsCascade: {
                  subjects: Array<
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                  >
              }
          }
        | {
              settingsCascade: {
                  subjects: Array<
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                  >
              }
          }
        | {
              settingsCascade: {
                  subjects: Array<
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                      | { latestSettings: Maybe<{ id: number; contents: string }> }
                  >
              }
          }
    >
}

export type AccessTokenFields = {
    id: string
    scopes: Array<string>
    note: string
    createdAt: string
    lastUsedAt: Maybe<string>
    subject: { username: string }
    creator: { username: string }
}

export type DeleteAccessTokenVariables = Exact<{
    tokenID: Scalars['ID']
}>

export type DeleteAccessTokenResult = { deleteAccessToken: { alwaysNil: Maybe<string> } }

export type addExternalServiceVariables = Exact<{
    input: AddExternalServiceInput
}>

export type addExternalServiceResult = {
    addExternalService: { id: string; kind: ExternalServiceKind; displayName: string; warning: Maybe<string> }
}

export type externalServiceFields = {
    id: string
    kind: ExternalServiceKind
    displayName: string
    config: string
    warning: Maybe<string>
    webhookURL: Maybe<string>
}

export type UpdateExternalServiceVariables = Exact<{
    input: UpdateExternalServiceInput
}>

export type UpdateExternalServiceResult = { updateExternalService: externalServiceFields }

export type ExternalServiceVariables = Exact<{
    id: Scalars['ID']
}>

export type ExternalServiceResult = {
    node: Maybe<
        | { __typename: 'Campaign' }
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | { __typename: 'Repository' }
        | { __typename: 'GitCommit' }
        | ({ __typename: 'ExternalService' } & externalServiceFields)
        | { __typename: 'GitRef' }
        | { __typename: 'LSIFUpload' }
        | { __typename: 'LSIFIndex' }
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | { __typename: 'ExternalChangeset' }
        | { __typename: 'ChangesetEvent' }
    >
}

export type DeleteExternalServiceVariables = Exact<{
    externalService: Scalars['ID']
}>

export type DeleteExternalServiceResult = { deleteExternalService: { alwaysNil: Maybe<string> } }

export type ExternalServicesVariables = Exact<{
    first: Maybe<Scalars['Int']>
}>

export type ExternalServicesResult = {
    externalServices: {
        totalCount: number
        nodes: Array<{ id: string; kind: ExternalServiceKind; displayName: string; config: string }>
        pageInfo: { hasNextPage: boolean }
    }
}

export type SiteAdminAccessTokensVariables = Exact<{
    first: Maybe<Scalars['Int']>
}>

export type SiteAdminAccessTokensResult = {
    site: { accessTokens: { totalCount: number; nodes: Array<AccessTokenFields>; pageInfo: { hasNextPage: boolean } } }
}

export type UsersVariables = Exact<{
    first: Maybe<Scalars['Int']>
    query: Maybe<Scalars['String']>
}>

export type UsersResult = {
    users: {
        totalCount: number
        nodes: Array<{
            id: string
            username: string
            displayName: Maybe<string>
            createdAt: string
            siteAdmin: boolean
            emails: Array<{
                email: string
                verified: boolean
                verificationPending: boolean
                viewerCanManuallyVerify: boolean
            }>
            latestSettings: Maybe<{ createdAt: string; contents: string }>
            organizations: { nodes: Array<{ name: string }> }
        }>
    }
}

export type OrganizationsVariables = Exact<{
    first: Maybe<Scalars['Int']>
    query: Maybe<Scalars['String']>
}>

export type OrganizationsResult = {
    organizations: {
        totalCount: number
        nodes: Array<{
            id: string
            name: string
            displayName: Maybe<string>
            createdAt: string
            latestSettings: Maybe<{ createdAt: string; contents: string }>
            members: { totalCount: number }
        }>
    }
}

export type RepositoriesVariables = Exact<{
    first: Maybe<Scalars['Int']>
    query: Maybe<Scalars['String']>
    cloned: Maybe<Scalars['Boolean']>
    cloneInProgress: Maybe<Scalars['Boolean']>
    notCloned: Maybe<Scalars['Boolean']>
    indexed: Maybe<Scalars['Boolean']>
    notIndexed: Maybe<Scalars['Boolean']>
}>

export type RepositoriesResult = {
    repositories: {
        totalCount: Maybe<number>
        nodes: Array<{
            id: string
            name: string
            createdAt: string
            viewerCanAdminister: boolean
            url: string
            mirrorInfo: { cloned: boolean; cloneInProgress: boolean; updatedAt: Maybe<string> }
        }>
        pageInfo: { hasNextPage: boolean }
    }
}

export type UpdateMirrorRepositoryVariables = Exact<{
    repository: Scalars['ID']
}>

export type UpdateMirrorRepositoryResult = { updateMirrorRepository: { alwaysNil: Maybe<string> } }

export type CheckMirrorRepositoryConnectionVariables = Exact<{
    repository: Maybe<Scalars['ID']>
    name: Maybe<Scalars['String']>
}>

export type CheckMirrorRepositoryConnectionResult = { checkMirrorRepositoryConnection: { error: Maybe<string> } }

export type ScheduleRepositoryPermissionsSyncVariables = Exact<{
    repository: Scalars['ID']
}>

export type ScheduleRepositoryPermissionsSyncResult = {
    scheduleRepositoryPermissionsSync: { alwaysNil: Maybe<string> }
}

export type ScheduleUserPermissionsSyncVariables = Exact<{
    user: Scalars['ID']
}>

export type ScheduleUserPermissionsSyncResult = { scheduleUserPermissionsSync: { alwaysNil: Maybe<string> } }

export type UserUsageStatisticsVariables = Exact<{
    activePeriod: Maybe<UserActivePeriod>
    query: Maybe<Scalars['String']>
    first: Maybe<Scalars['Int']>
}>

export type UserUsageStatisticsResult = {
    users: {
        totalCount: number
        nodes: Array<{
            id: string
            username: string
            usageStatistics: {
                searchQueries: number
                pageViews: number
                codeIntelligenceActions: number
                lastActiveTime: Maybe<string>
                lastActiveCodeHostIntegrationTime: Maybe<string>
            }
        }>
    }
}

export type SiteUsageStatisticsVariables = Exact<{ [key: string]: never }>

export type SiteUsageStatisticsResult = {
    site: {
        usageStatistics: {
            daus: Array<{
                userCount: number
                registeredUserCount: number
                anonymousUserCount: number
                startTime: string
            }>
            waus: Array<{
                userCount: number
                registeredUserCount: number
                anonymousUserCount: number
                startTime: string
            }>
            maus: Array<{
                userCount: number
                registeredUserCount: number
                anonymousUserCount: number
                startTime: string
            }>
        }
    }
}

export type SiteVariables = Exact<{ [key: string]: never }>

export type SiteResult = {
    site: {
        id: string
        canReloadSite: boolean
        configuration: { id: number; effectiveContents: string; validationMessages: Array<string> }
    }
}

export type AllConfigVariables = Exact<{
    first: Maybe<Scalars['Int']>
}>

export type AllConfigResult = {
    site: {
        id: string
        configuration: { id: number; effectiveContents: string }
        latestSettings: Maybe<{ contents: string }>
        settingsCascade: { final: string }
    }
    externalServices: {
        nodes: Array<{
            id: string
            kind: ExternalServiceKind
            displayName: string
            config: string
            createdAt: string
            updatedAt: string
            warning: Maybe<string>
        }>
    }
    viewerSettings: SiteAdminSettingsCascadeFields
}

export type SiteAdminSettingsCascadeFields = {
    final: string
    subjects: Array<
        | { __typename: 'User'; settingsURL: Maybe<string>; latestSettings: Maybe<{ id: number; contents: string }> }
        | { __typename: 'Org'; settingsURL: Maybe<string>; latestSettings: Maybe<{ id: number; contents: string }> }
        | { __typename: 'Site'; settingsURL: Maybe<string>; latestSettings: Maybe<{ id: number; contents: string }> }
        | {
              __typename: 'DefaultSettings'
              settingsURL: Maybe<string>
              latestSettings: Maybe<{ id: number; contents: string }>
          }
    >
}

export type UpdateSiteConfigurationVariables = Exact<{
    lastID: Scalars['Int']
    input: Scalars['String']
}>

export type UpdateSiteConfigurationResult = { updateSiteConfiguration: boolean }

export type ReloadSiteVariables = Exact<{ [key: string]: never }>

export type ReloadSiteResult = { reloadSite: Maybe<{ alwaysNil: Maybe<string> }> }

export type SetUserIsSiteAdminVariables = Exact<{
    userID: Scalars['ID']
    siteAdmin: Scalars['Boolean']
}>

export type SetUserIsSiteAdminResult = { setUserIsSiteAdmin: Maybe<{ alwaysNil: Maybe<string> }> }

export type RandomizeUserPasswordVariables = Exact<{
    user: Scalars['ID']
}>

export type RandomizeUserPasswordResult = { randomizeUserPassword: { resetPasswordURL: Maybe<string> } }

export type DeleteUserVariables = Exact<{
    user: Scalars['ID']
    hard: Maybe<Scalars['Boolean']>
}>

export type DeleteUserResult = { deleteUser: Maybe<{ alwaysNil: Maybe<string> }> }

export type CreateUserVariables = Exact<{
    username: Scalars['String']
    email: Maybe<Scalars['String']>
}>

export type CreateUserResult = { createUser: { resetPasswordURL: Maybe<string> } }

export type DeleteOrganizationVariables = Exact<{
    organization: Scalars['ID']
}>

export type DeleteOrganizationResult = { deleteOrganization: Maybe<{ alwaysNil: Maybe<string> }> }

export type SiteUpdateCheckVariables = Exact<{ [key: string]: never }>

export type SiteUpdateCheckResult = {
    site: {
        buildVersion: string
        productVersion: string
        updateCheck: {
            pending: boolean
            checkedAt: Maybe<string>
            errorMessage: Maybe<string>
            updateVersionAvailable: Maybe<string>
        }
    }
}

export type SiteMonitoringStatisticsVariables = Exact<{
    days: Scalars['Int']
}>

export type SiteMonitoringStatisticsResult = {
    site: {
        monitoringStatistics: {
            alerts: Array<{ serviceName: string; name: string; timestamp: string; average: number }>
        }
    }
}

export type OverviewVariables = Exact<{ [key: string]: never }>

export type OverviewResult = {
    repositories: { totalCount: Maybe<number> }
    users: { totalCount: number }
    organizations: { totalCount: number }
    surveyResponses: { totalCount: number; averageScore: number }
}

export type WAUsVariables = Exact<{ [key: string]: never }>

export type WAUsResult = {
    site: {
        usageStatistics: {
            waus: Array<{
                userCount: number
                registeredUserCount: number
                anonymousUserCount: number
                startTime: string
            }>
        }
    }
}

export type SiteFlagsVariables = Exact<{ [key: string]: never }>

export type SiteFlagsResult = {
    site: {
        needsRepositoryConfiguration: boolean
        freeUsersExceeded: boolean
        disableBuiltInSearches: boolean
        sendsEmailVerificationEmails: boolean
        productVersion: string
        alerts: Array<{ type: AlertType; message: string; isDismissibleWithKey: Maybe<string> }>
        authProviders: {
            nodes: Array<{
                serviceType: string
                serviceID: string
                clientID: string
                displayName: string
                isBuiltin: boolean
                authenticationURL: Maybe<string>
            }>
        }
        updateCheck: {
            pending: boolean
            checkedAt: Maybe<string>
            errorMessage: Maybe<string>
            updateVersionAvailable: Maybe<string>
        }
        productSubscription: { noLicenseWarningUserCount: Maybe<number>; license: Maybe<{ expiresAt: string }> }
    }
}

export type SymbolsVariables = Exact<{
    repo: Scalars['ID']
    revision: Scalars['String']
    first: Maybe<Scalars['Int']>
    query: Maybe<Scalars['String']>
    includePatterns: Maybe<Array<Scalars['String']>>
}>

export type SymbolsResult = {
    node: Maybe<
        | { __typename: 'Campaign' }
        | { __typename: 'User' }
        | { __typename: 'Org' }
        | { __typename: 'OrganizationInvitation' }
        | { __typename: 'AccessToken' }
        | { __typename: 'ExternalAccount' }
        | {
              __typename: 'Repository'
              commit: Maybe<{
                  symbols: {
                      pageInfo: { hasNextPage: boolean }
                      nodes: Array<{
                          name: string
                          containerName: Maybe<string>
                          kind: SymbolKind
                          language: string
                          url: string
                          location: {
                              resource: { path: string }
                              range: Maybe<{
                                  start: { line: number; character: number }
                                  end: { line: number; character: number }
                              }>
                          }
                      }>
                  }
              }>
          }
        | { __typename: 'GitCommit' }
        | { __typename: 'ExternalService' }
        | { __typename: 'GitRef' }
        | { __typename: 'LSIFUpload' }
        | { __typename: 'LSIFIndex' }
        | { __typename: 'SavedSearch' }
        | { __typename: 'VersionContext' }
        | { __typename: 'RegistryExtension' }
        | { __typename: 'ProductSubscription' }
        | { __typename: 'ProductLicense' }
        | { __typename: 'CampaignSpec' }
        | { __typename: 'HiddenChangesetSpec' }
        | { __typename: 'VisibleChangesetSpec' }
        | { __typename: 'HiddenExternalChangeset' }
        | { __typename: 'ExternalChangeset' }
        | { __typename: 'ChangesetEvent' }
    >
}

export type SiteAdminActivationStatusVariables = Exact<{ [key: string]: never }>

export type SiteAdminActivationStatusResult = {
    externalServices: { totalCount: number }
    repositories: { totalCount: Maybe<number> }
    viewerSettings: { final: string }
    users: { totalCount: number }
    currentUser: Maybe<{
        usageStatistics: { searchQueries: number; findReferencesActions: number; codeIntelligenceActions: number }
    }>
}

export type ActivationStatusVariables = Exact<{ [key: string]: never }>

export type ActivationStatusResult = {
    currentUser: Maybe<{
        usageStatistics: { searchQueries: number; findReferencesActions: number; codeIntelligenceActions: number }
    }>
}

export type LinksForRepositoriesVariables = Exact<{ [key: string]: never }>

export type LinksForRepositoriesResult = {
    repositories: { nodes: Array<{ url: string; gitRefs: { totalCount: number } }> }
}

export type UserEventLogsVariables = Exact<{
    user: Scalars['ID']
    first: Maybe<Scalars['Int']>
}>

export type UserEventLogsResult = {
    node: Maybe<{
        eventLogs: {
            totalCount: number
            nodes: Array<{ name: string; source: EventSource; url: string; timestamp: string }>
            pageInfo: { hasNextPage: boolean }
        }
    }>
}

export type UserVariables = Exact<{
    username: Scalars['String']
    siteAdmin: Scalars['Boolean']
}>

export type UserResult = {
    user: Maybe<{
        __typename: 'User'
        id: string
        username: string
        displayName: Maybe<string>
        url: string
        settingsURL: Maybe<string>
        avatarURL: Maybe<string>
        viewerCanAdminister: boolean
        siteAdmin: boolean
        builtinAuth: boolean
        createdAt: string
        emails: Array<{ email: string; verified: boolean }>
        organizations: { nodes: Array<{ id: string; displayName: Maybe<string>; name: string }> }
        permissionsInfo: Maybe<{ syncedAt: Maybe<string>; updatedAt: string }>
    }>
}

export type CreateAccessTokenVariables = Exact<{
    user: Scalars['ID']
    scopes: Array<Scalars['String']>
    note: Scalars['String']
}>

export type CreateAccessTokenResult = { createAccessToken: { id: string; token: string } }

export type AccessTokensVariables = Exact<{
    user: Scalars['ID']
    first: Maybe<Scalars['Int']>
}>

export type AccessTokensResult = {
    node: Maybe<{
        accessTokens: { totalCount: number; nodes: Array<AccessTokenFields>; pageInfo: { hasNextPage: boolean } }
    }>
}

export type UpdateUserVariables = Exact<{
    user: Scalars['ID']
    username: Maybe<Scalars['String']>
    displayName: Maybe<Scalars['String']>
    avatarURL: Maybe<Scalars['String']>
}>

export type UpdateUserResult = { updateUser: { alwaysNil: Maybe<string> } }

export type UpdatePasswordVariables = Exact<{
    oldPassword: Scalars['String']
    newPassword: Scalars['String']
}>

export type UpdatePasswordResult = { updatePassword: Maybe<{ alwaysNil: Maybe<string> }> }

export type SetUserEmailVerifiedVariables = Exact<{
    user: Scalars['ID']
    email: Scalars['String']
    verified: Scalars['Boolean']
}>

export type SetUserEmailVerifiedResult = { setUserEmailVerified: { alwaysNil: Maybe<string> } }

export type logUserEventVariables = Exact<{
    event: UserEvent
    userCookieID: Scalars['String']
}>

export type logUserEventResult = { logUserEvent: Maybe<{ alwaysNil: Maybe<string> }> }

export type logEventVariables = Exact<{
    event: Scalars['String']
    userCookieID: Scalars['String']
    url: Scalars['String']
    source: EventSource
    argument: Maybe<Scalars['String']>
}>

export type logEventResult = { logEvent: Maybe<{ alwaysNil: Maybe<string> }> }

export type AddUserEmailVariables = Exact<{
    user: Scalars['ID']
    email: Scalars['String']
}>

export type AddUserEmailResult = { addUserEmail: { alwaysNil: Maybe<string> } }

export type RemoveUserEmailVariables = Exact<{
    user: Scalars['ID']
    email: Scalars['String']
}>

export type RemoveUserEmailResult = { removeUserEmail: { alwaysNil: Maybe<string> } }

export type UserEmailsVariables = Exact<{
    user: Scalars['ID']
}>

export type UserEmailsResult = {
    node: Maybe<{
        emails: Array<{
            email: string
            isPrimary: boolean
            verified: boolean
            verificationPending: boolean
            viewerCanManuallyVerify: boolean
        }>
    }>
}

export type UserForProfilePageVariables = Exact<{
    user: Scalars['ID']
}>

export type UserForProfilePageResult = {
    node: Maybe<{
        id: string
        username: string
        displayName: Maybe<string>
        avatarURL: Maybe<string>
        viewerCanChangeUsername: boolean
    }>
}
