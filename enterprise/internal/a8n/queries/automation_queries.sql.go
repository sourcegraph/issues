// Code generated by sqlc. DO NOT EDIT.
// source: automation_queries.sql

package queries

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/lib/pq"
)

const countCampaignJobs = `-- name: CountCampaignJobs :one
SELECT COUNT(id)
FROM campaign_jobs
WHERE campaign_plan_id = $1
`

func (q *Queries) CountCampaignJobs(ctx context.Context, campaignPlanID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCampaignJobs, campaignPlanID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countCampaignPlans = `-- name: CountCampaignPlans :one
SELECT COUNT(id) FROM campaign_plans
`

func (q *Queries) CountCampaignPlans(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCampaignPlans)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countCampaigns = `-- name: CountCampaigns :one
SELECT COUNT(id)
FROM campaigns
WHERE changeset_ids ? $1
`

func (q *Queries) CountCampaigns(ctx context.Context, changesetIds json.RawMessage) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCampaigns, changesetIds)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countChangesetEvents = `-- name: CountChangesetEvents :one
SELECT COUNT(*) FROM changeset_events WHERE changeset_id = $1
`

func (q *Queries) CountChangesetEvents(ctx context.Context, changesetID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countChangesetEvents, changesetID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countChangesetJobs = `-- name: CountChangesetJobs :one
SELECT COUNT(id)
FROM changeset_jobs
`

func (q *Queries) CountChangesetJobs(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countChangesetJobs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countChangesetJobsWithCampaignID = `-- name: CountChangesetJobsWithCampaignID :one
SELECT COUNT(id)
FROM changeset_jobs
WHERE campaign_id = $1
`

func (q *Queries) CountChangesetJobsWithCampaignID(ctx context.Context, campaignID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countChangesetJobsWithCampaignID, campaignID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countChangesetsByCampaignID = `-- name: CountChangesetsByCampaignID :one

SELECT COUNT(id)
FROM changesets
WHERE campaign_ids ? $1::text
`

// automation_query.sql
func (q *Queries) CountChangesetsByCampaignID(ctx context.Context, dollar_1 string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countChangesetsByCampaignID, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCampaign = `-- name: CreateCampaign :one
INSERT INTO campaigns (
  name,
  description,
  author_id,
  namespace_user_id,
  namespace_org_id,
  created_at,
  updated_at,
  changeset_ids,
  campaign_plan_id,
  closed_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, name, description, author_id, namespace_user_id, namespace_org_id, created_at, updated_at, changeset_ids, campaign_plan_id, closed_at
`

type CreateCampaignParams struct {
	Name            string
	Description     sql.NullString
	AuthorID        int32
	NamespaceUserID int32
	NamespaceOrgID  int32
	CreatedAt       time.Time
	UpdatedAt       time.Time
	ChangesetIDs    json.RawMessage
	CampaignPlanID  int32
	ClosedAt        pq.NullTime
}

func (q *Queries) CreateCampaign(ctx context.Context, arg CreateCampaignParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, createCampaign,
		arg.Name,
		arg.Description,
		arg.AuthorID,
		arg.NamespaceUserID,
		arg.NamespaceOrgID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ChangesetIDs,
		arg.CampaignPlanID,
		arg.ClosedAt,
	)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AuthorID,
		&i.NamespaceUserID,
		&i.NamespaceOrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChangesetIDs,
		&i.CampaignPlanID,
		&i.ClosedAt,
	)
	return i, err
}

const createCampaignJob = `-- name: CreateCampaignJob :one
INSERT INTO campaign_jobs (
  campaign_plan_id,
  repo_id,
  rev,
  base_ref,
  diff,
  description,
  error,
  started_at,
  finished_at,
  created_at,
  updated_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, campaign_plan_id, repo_id, rev, diff, error, started_at, finished_at, created_at, updated_at, base_ref, description
`

type CreateCampaignJobParams struct {
	CampaignPlanID int64
	RepoID         int64
	Rev            string
	BaseRef        string
	Diff           string
	Description    sql.NullString
	Error          string
	StartedAt      pq.NullTime
	FinishedAt     pq.NullTime
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) CreateCampaignJob(ctx context.Context, arg CreateCampaignJobParams) (CampaignJob, error) {
	row := q.db.QueryRowContext(ctx, createCampaignJob,
		arg.CampaignPlanID,
		arg.RepoID,
		arg.Rev,
		arg.BaseRef,
		arg.Diff,
		arg.Description,
		arg.Error,
		arg.StartedAt,
		arg.FinishedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CampaignJob
	err := row.Scan(
		&i.ID,
		&i.CampaignPlanID,
		&i.RepoID,
		&i.Rev,
		&i.Diff,
		&i.Error,
		&i.StartedAt,
		&i.FinishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BaseRef,
		&i.Description,
	)
	return i, err
}

const createCampaignPlan = `-- name: CreateCampaignPlan :one
INSERT INTO campaign_plans (
  campaign_type,
  arguments,
  canceled_at,
  created_at,
  updated_at
)
VALUES ($1, $2, $3, $4, $5)
RETURNING
  id,
  campaign_type,
  arguments,
  canceled_at,
  created_at,
  updated_at
`

type CreateCampaignPlanParams struct {
	CampaignType string
	Arguments    string
	CanceledAt   pq.NullTime
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

type CreateCampaignPlanRow struct {
	ID           int64
	CampaignType string
	Arguments    string
	CanceledAt   pq.NullTime
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateCampaignPlan(ctx context.Context, arg CreateCampaignPlanParams) (CreateCampaignPlanRow, error) {
	row := q.db.QueryRowContext(ctx, createCampaignPlan,
		arg.CampaignType,
		arg.Arguments,
		arg.CanceledAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateCampaignPlanRow
	err := row.Scan(
		&i.ID,
		&i.CampaignType,
		&i.Arguments,
		&i.CanceledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createChangesetJob = `-- name: CreateChangesetJob :one
INSERT INTO changeset_jobs (
  campaign_id,
  campaign_job_id,
  changeset_id,
  error,
  started_at,
  finished_at,
  created_at,
  updated_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING
  id,
  campaign_id,
  campaign_job_id,
  changeset_id,
  error,
  started_at,
  finished_at,
  created_at,
  updated_at
`

type CreateChangesetJobParams struct {
	CampaignID    int64
	CampaignJobID int64
	ChangesetID   sql.NullInt64
	Error         sql.NullString
	StartedAt     pq.NullTime
	FinishedAt    pq.NullTime
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

type CreateChangesetJobRow struct {
	ID            int64
	CampaignID    int64
	CampaignJobID int64
	ChangesetID   sql.NullInt64
	Error         sql.NullString
	StartedAt     pq.NullTime
	FinishedAt    pq.NullTime
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) CreateChangesetJob(ctx context.Context, arg CreateChangesetJobParams) (CreateChangesetJobRow, error) {
	row := q.db.QueryRowContext(ctx, createChangesetJob,
		arg.CampaignID,
		arg.CampaignJobID,
		arg.ChangesetID,
		arg.Error,
		arg.StartedAt,
		arg.FinishedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateChangesetJobRow
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.CampaignJobID,
		&i.ChangesetID,
		&i.Error,
		&i.StartedAt,
		&i.FinishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCampaign = `-- name: DeleteCampaign :exec
DELETE FROM campaigns WHERE id = $1
`

func (q *Queries) DeleteCampaign(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCampaign, id)
	return err
}

const deleteCampaignJob = `-- name: DeleteCampaignJob :exec
DELETE FROM campaign_jobs WHERE id = $1
`

func (q *Queries) DeleteCampaignJob(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCampaignJob, id)
	return err
}

const deleteCampaignPlan = `-- name: DeleteCampaignPlan :exec
DELETE FROM campaign_plans WHERE id = $1
`

func (q *Queries) DeleteCampaignPlan(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCampaignPlan, id)
	return err
}

const deleteChangesetJob = `-- name: DeleteChangesetJob :exec
DELETE FROM changeset_jobs WHERE id = $1
`

func (q *Queries) DeleteChangesetJob(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChangesetJob, id)
	return err
}

const deleteExpiredCampaignPlans = `-- name: DeleteExpiredCampaignPlans :exec
DELETE FROM
  campaign_plans
WHERE
NOT EXISTS (
  SELECT 1
  FROM
  campaigns
  WHERE
  campaigns.campaign_plan_id = campaign_plans.id
)
AND
NOT EXISTS (
  SELECT id
  FROM
  campaign_jobs
  WHERE
  campaign_jobs.campaign_plan_id = campaign_plans.id
  AND
  (
    campaign_jobs.finished_at IS NULL
    OR
    campaign_jobs.finished_at > $1
  )
)
`

func (q *Queries) DeleteExpiredCampaignPlans(ctx context.Context, finishedAt pq.NullTime) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredCampaignPlans, finishedAt)
	return err
}

const getCampaign = `-- name: GetCampaign :one
SELECT id, name, description, author_id, namespace_user_id, namespace_org_id, created_at, updated_at, changeset_ids, campaign_plan_id, closed_at FROM campaigns WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCampaign(ctx context.Context, id int64) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, getCampaign, id)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AuthorID,
		&i.NamespaceUserID,
		&i.NamespaceOrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChangesetIDs,
		&i.CampaignPlanID,
		&i.ClosedAt,
	)
	return i, err
}

const getCampaignJob = `-- name: GetCampaignJob :one
SELECT
  id,
  campaign_plan_id,
  repo_id,
  rev,
  base_ref,
  diff,
  description,
  error,
  started_at,
  finished_at,
  created_at,
  updated_at
FROM campaign_jobs
WHERE id = $1
LIMIT 1
`

type GetCampaignJobRow struct {
	ID             int64
	CampaignPlanID int64
	RepoID         int64
	Rev            string
	BaseRef        string
	Diff           string
	Description    sql.NullString
	Error          string
	StartedAt      pq.NullTime
	FinishedAt     pq.NullTime
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) GetCampaignJob(ctx context.Context, id int64) (GetCampaignJobRow, error) {
	row := q.db.QueryRowContext(ctx, getCampaignJob, id)
	var i GetCampaignJobRow
	err := row.Scan(
		&i.ID,
		&i.CampaignPlanID,
		&i.RepoID,
		&i.Rev,
		&i.BaseRef,
		&i.Diff,
		&i.Description,
		&i.Error,
		&i.StartedAt,
		&i.FinishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCampaignPlan = `-- name: GetCampaignPlan :one
SELECT id, campaign_type, created_at, updated_at, arguments, canceled_at FROM campaign_plans WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCampaignPlan(ctx context.Context, id int64) (CampaignPlan, error) {
	row := q.db.QueryRowContext(ctx, getCampaignPlan, id)
	var i CampaignPlan
	err := row.Scan(
		&i.ID,
		&i.CampaignType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Arguments,
		&i.CanceledAt,
	)
	return i, err
}

const getCampaignPlanStatus = `-- name: GetCampaignPlanStatus :one
SELECT
  (SELECT canceled_at IS NOT NULL FROM campaign_plans WHERE campaign_plans.id = $1) AS canceled,
  COUNT(*) AS total,
  COUNT(*) FILTER (WHERE finished_at IS NULL) AS pending,
  COUNT(*) FILTER (WHERE finished_at IS NOT NULL AND (diff != '' OR error != '')) AS completed,
  array_agg(error) FILTER (WHERE error != '') AS errors
FROM campaign_jobs
WHERE campaign_plan_id = $1
LIMIT 1
`

type GetCampaignPlanStatusRow struct {
	Canceled  interface{}
	Total     int64
	Pending   int64
	Completed int64
	Errors    interface{}
}

func (q *Queries) GetCampaignPlanStatus(ctx context.Context, id int64) (GetCampaignPlanStatusRow, error) {
	row := q.db.QueryRowContext(ctx, getCampaignPlanStatus, id)
	var i GetCampaignPlanStatusRow
	err := row.Scan(
		&i.Canceled,
		&i.Total,
		&i.Pending,
		&i.Completed,
		&i.Errors,
	)
	return i, err
}

const getCampaignStatus = `-- name: GetCampaignStatus :one
SELECT
  -- canceled is here so that this can be used with scanBackgroundProcessStatus
  false AS canceled,
  COUNT(*) AS total,
  COUNT(*) FILTER (WHERE finished_at IS NULL) AS pending,
  COUNT(*) FILTER (WHERE finished_at IS NOT NULL) AS completed,
  array_agg(error) FILTER (WHERE error != '') AS errors
FROM changeset_jobs
WHERE campaign_id = $1
LIMIT 1
`

type GetCampaignStatusRow struct {
	Canceled  bool
	Total     int64
	Pending   int64
	Completed int64
	Errors    interface{}
}

func (q *Queries) GetCampaignStatus(ctx context.Context, campaignID int64) (GetCampaignStatusRow, error) {
	row := q.db.QueryRowContext(ctx, getCampaignStatus, campaignID)
	var i GetCampaignStatusRow
	err := row.Scan(
		&i.Canceled,
		&i.Total,
		&i.Pending,
		&i.Completed,
		&i.Errors,
	)
	return i, err
}

const getChangesetByExternal = `-- name: GetChangesetByExternal :one
SELECT id, campaign_ids, repo_id, created_at, updated_at, metadata, external_id, external_service_type FROM changesets
WHERE external_id = $1 AND external_service_type = $2
LIMIT 1
`

type GetChangesetByExternalParams struct {
	ExternalID          string
	ExternalServiceType string
}

func (q *Queries) GetChangesetByExternal(ctx context.Context, arg GetChangesetByExternalParams) (Changeset, error) {
	row := q.db.QueryRowContext(ctx, getChangesetByExternal, arg.ExternalID, arg.ExternalServiceType)
	var i Changeset
	err := row.Scan(
		&i.ID,
		&i.CampaignIDs,
		&i.RepoID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
		&i.ExternalID,
		&i.ExternalServiceType,
	)
	return i, err
}

const getChangesetByID = `-- name: GetChangesetByID :one
SELECT id, campaign_ids, repo_id, created_at, updated_at, metadata, external_id, external_service_type FROM changesets WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChangesetByID(ctx context.Context, id int64) (Changeset, error) {
	row := q.db.QueryRowContext(ctx, getChangesetByID, id)
	var i Changeset
	err := row.Scan(
		&i.ID,
		&i.CampaignIDs,
		&i.RepoID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
		&i.ExternalID,
		&i.ExternalServiceType,
	)
	return i, err
}

const getChangesetEvent = `-- name: GetChangesetEvent :one
SELECT id, changeset_id, kind, key, created_at, metadata, updated_at FROM changeset_events WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChangesetEvent(ctx context.Context, id int64) (ChangesetEvent, error) {
	row := q.db.QueryRowContext(ctx, getChangesetEvent, id)
	var i ChangesetEvent
	err := row.Scan(
		&i.ID,
		&i.ChangesetID,
		&i.Kind,
		&i.Key,
		&i.CreatedAt,
		&i.Metadata,
		&i.UpdatedAt,
	)
	return i, err
}

const getChangesetJobByCampaignJobID = `-- name: GetChangesetJobByCampaignJobID :one
SELECT id, campaign_id, campaign_job_id, changeset_id, error, created_at, updated_at, started_at, finished_at FROM changeset_jobs WHERE campaign_job_id = $1 LIMIT 1
`

func (q *Queries) GetChangesetJobByCampaignJobID(ctx context.Context, campaignJobID int64) (ChangesetJob, error) {
	row := q.db.QueryRowContext(ctx, getChangesetJobByCampaignJobID, campaignJobID)
	var i ChangesetJob
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.CampaignJobID,
		&i.ChangesetID,
		&i.Error,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return i, err
}

const getChangesetJobByChangesetID = `-- name: GetChangesetJobByChangesetID :one
SELECT id, campaign_id, campaign_job_id, changeset_id, error, created_at, updated_at, started_at, finished_at FROM changeset_jobs WHERE changeset_id = $1 LIMIT 1
`

func (q *Queries) GetChangesetJobByChangesetID(ctx context.Context, changesetID sql.NullInt64) (ChangesetJob, error) {
	row := q.db.QueryRowContext(ctx, getChangesetJobByChangesetID, changesetID)
	var i ChangesetJob
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.CampaignJobID,
		&i.ChangesetID,
		&i.Error,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return i, err
}

const getChangesetJobByID = `-- name: GetChangesetJobByID :one
SELECT id, campaign_id, campaign_job_id, changeset_id, error, created_at, updated_at, started_at, finished_at FROM changeset_jobs WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChangesetJobByID(ctx context.Context, id int64) (ChangesetJob, error) {
	row := q.db.QueryRowContext(ctx, getChangesetJobByID, id)
	var i ChangesetJob
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.CampaignJobID,
		&i.ChangesetID,
		&i.Error,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return i, err
}

const listCampaignJobs = `-- name: ListCampaignJobs :many
SELECT
  id,
  campaign_plan_id,
  repo_id,
  rev,
  base_ref,
  diff,
  description,
  error,
  started_at,
  finished_at,
  created_at,
  updated_at
FROM campaign_jobs
WHERE campaign_plan_id = $1
ORDER BY id ASC
`

type ListCampaignJobsRow struct {
	ID             int64
	CampaignPlanID int64
	RepoID         int64
	Rev            string
	BaseRef        string
	Diff           string
	Description    sql.NullString
	Error          string
	StartedAt      pq.NullTime
	FinishedAt     pq.NullTime
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) ListCampaignJobs(ctx context.Context, campaignPlanID int64) ([]ListCampaignJobsRow, error) {
	rows, err := q.db.QueryContext(ctx, listCampaignJobs, campaignPlanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCampaignJobsRow
	for rows.Next() {
		var i ListCampaignJobsRow
		if err := rows.Scan(
			&i.ID,
			&i.CampaignPlanID,
			&i.RepoID,
			&i.Rev,
			&i.BaseRef,
			&i.Diff,
			&i.Description,
			&i.Error,
			&i.StartedAt,
			&i.FinishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCampaignPlans = `-- name: ListCampaignPlans :many
SELECT id, campaign_type, created_at, updated_at, arguments, canceled_at FROM campaign_plans
WHERE id >= $1
ORDER BY id ASC
LIMIT $2
`

type ListCampaignPlansParams struct {
	ID    int64
	Limit int32
}

func (q *Queries) ListCampaignPlans(ctx context.Context, arg ListCampaignPlansParams) ([]CampaignPlan, error) {
	rows, err := q.db.QueryContext(ctx, listCampaignPlans, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CampaignPlan
	for rows.Next() {
		var i CampaignPlan
		if err := rows.Scan(
			&i.ID,
			&i.CampaignType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Arguments,
			&i.CanceledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCampaigns = `-- name: ListCampaigns :many
SELECT id, name, description, author_id, namespace_user_id, namespace_org_id, created_at, updated_at, changeset_ids, campaign_plan_id, closed_at FROM campaigns
WHERE changeset_ids ? $1::text
ORDER BY id ASC
LIMIT $2
`

type ListCampaignsParams struct {
	Column1 string
	Limit   int32
}

func (q *Queries) ListCampaigns(ctx context.Context, arg ListCampaignsParams) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, listCampaigns, arg.Column1, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Campaign
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.AuthorID,
			&i.NamespaceUserID,
			&i.NamespaceOrgID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ChangesetIDs,
			&i.CampaignPlanID,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listChangesetEvents = `-- name: ListChangesetEvents :many
SELECT id, changeset_id, kind, key, created_at, metadata, updated_at FROM changeset_events WHERE id = $1 ORDER BY id ASC
`

func (q *Queries) ListChangesetEvents(ctx context.Context, id int64) ([]ChangesetEvent, error) {
	rows, err := q.db.QueryContext(ctx, listChangesetEvents, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChangesetEvent
	for rows.Next() {
		var i ChangesetEvent
		if err := rows.Scan(
			&i.ID,
			&i.ChangesetID,
			&i.Kind,
			&i.Key,
			&i.CreatedAt,
			&i.Metadata,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listChangesetJobs = `-- name: ListChangesetJobs :many
SELECT
  id,
  campaign_id,
  campaign_job_id,
  changeset_id,
  error,
  started_at,
  finished_at,
  created_at,
  updated_at
FROM changeset_jobs
WHERE campaign_id = $1
ORDER BY id ASC
`

type ListChangesetJobsRow struct {
	ID            int64
	CampaignID    int64
	CampaignJobID int64
	ChangesetID   sql.NullInt64
	Error         sql.NullString
	StartedAt     pq.NullTime
	FinishedAt    pq.NullTime
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) ListChangesetJobs(ctx context.Context, campaignID int64) ([]ListChangesetJobsRow, error) {
	rows, err := q.db.QueryContext(ctx, listChangesetJobs, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListChangesetJobsRow
	for rows.Next() {
		var i ListChangesetJobsRow
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.CampaignJobID,
			&i.ChangesetID,
			&i.Error,
			&i.StartedAt,
			&i.FinishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listChangesetsByCampaignID = `-- name: ListChangesetsByCampaignID :many
SELECT id, campaign_ids, repo_id, created_at, updated_at, metadata, external_id, external_service_type FROM changesets
WHERE id >= $1 AND campaign_ids ? $3::text
ORDER BY id ASC
LIMIT $2
`

type ListChangesetsByCampaignIDParams struct {
	ID      int64
	Limit   int32
	Column3 string
}

func (q *Queries) ListChangesetsByCampaignID(ctx context.Context, arg ListChangesetsByCampaignIDParams) ([]Changeset, error) {
	rows, err := q.db.QueryContext(ctx, listChangesetsByCampaignID, arg.ID, arg.Limit, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Changeset
	for rows.Next() {
		var i Changeset
		if err := rows.Scan(
			&i.ID,
			&i.CampaignIDs,
			&i.RepoID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Metadata,
			&i.ExternalID,
			&i.ExternalServiceType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetFailedChangesetJobs = `-- name: ResetFailedChangesetJobs :exec
UPDATE changeset_jobs
SET
  error = '',
  started_at = NULL,
  finished_at = NULL
WHERE campaign_id = $1
`

func (q *Queries) ResetFailedChangesetJobs(ctx context.Context, campaignID int64) error {
	_, err := q.db.ExecContext(ctx, resetFailedChangesetJobs, campaignID)
	return err
}

const updateCampaign = `-- name: UpdateCampaign :one
UPDATE campaigns
SET (
  name,
  description,
  author_id,
  namespace_user_id,
  namespace_org_id,
  updated_at,
  changeset_ids,
  campaign_plan_id,
  closed_at
) = ($1, $2, $3, $4, $5, $6, $7, $8, $9)
WHERE id = $10
RETURNING
  id,
  name,
  description,
  author_id,
  namespace_user_id,
  namespace_org_id,
  created_at,
  updated_at,
  changeset_ids,
  campaign_plan_id,
  closed_at
`

type UpdateCampaignParams struct {
	Name            string
	Description     sql.NullString
	AuthorID        int32
	NamespaceUserID int32
	NamespaceOrgID  int32
	UpdatedAt       time.Time
	ChangesetIDs    json.RawMessage
	CampaignPlanID  int32
	ClosedAt        pq.NullTime
	ID              int64
}

func (q *Queries) UpdateCampaign(ctx context.Context, arg UpdateCampaignParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, updateCampaign,
		arg.Name,
		arg.Description,
		arg.AuthorID,
		arg.NamespaceUserID,
		arg.NamespaceOrgID,
		arg.UpdatedAt,
		arg.ChangesetIDs,
		arg.CampaignPlanID,
		arg.ClosedAt,
		arg.ID,
	)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AuthorID,
		&i.NamespaceUserID,
		&i.NamespaceOrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChangesetIDs,
		&i.CampaignPlanID,
		&i.ClosedAt,
	)
	return i, err
}

const updateCampaignJob = `-- name: UpdateCampaignJob :many
UPDATE campaign_jobs
SET (
  campaign_plan_id,
  repo_id,
  rev,
  base_ref,
  diff,
  description,
  error,
  started_at,
  finished_at,
  updated_at
) = ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
WHERE id = $11
RETURNING
  id,
  campaign_plan_id,
  repo_id,
  rev,
  base_ref,
  diff,
  description,
  error,
  started_at,
  finished_at,
  created_at,
  updated_at
`

type UpdateCampaignJobParams struct {
	CampaignPlanID int64
	RepoID         int64
	Rev            string
	BaseRef        string
	Diff           string
	Description    sql.NullString
	Error          string
	StartedAt      pq.NullTime
	FinishedAt     pq.NullTime
	UpdatedAt      time.Time
	ID             int64
}

type UpdateCampaignJobRow struct {
	ID             int64
	CampaignPlanID int64
	RepoID         int64
	Rev            string
	BaseRef        string
	Diff           string
	Description    sql.NullString
	Error          string
	StartedAt      pq.NullTime
	FinishedAt     pq.NullTime
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) UpdateCampaignJob(ctx context.Context, arg UpdateCampaignJobParams) ([]UpdateCampaignJobRow, error) {
	rows, err := q.db.QueryContext(ctx, updateCampaignJob,
		arg.CampaignPlanID,
		arg.RepoID,
		arg.Rev,
		arg.BaseRef,
		arg.Diff,
		arg.Description,
		arg.Error,
		arg.StartedAt,
		arg.FinishedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UpdateCampaignJobRow
	for rows.Next() {
		var i UpdateCampaignJobRow
		if err := rows.Scan(
			&i.ID,
			&i.CampaignPlanID,
			&i.RepoID,
			&i.Rev,
			&i.BaseRef,
			&i.Diff,
			&i.Description,
			&i.Error,
			&i.StartedAt,
			&i.FinishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCampaignPlan = `-- name: UpdateCampaignPlan :many
UPDATE campaign_plans
SET (
  campaign_type,
  arguments,
  canceled_at,
  updated_at
) = ($1, $2, $3, $4)
WHERE id = $5
RETURNING
  id,
  campaign_type,
  arguments,
  canceled_at,
  created_at,
  updated_at
`

type UpdateCampaignPlanParams struct {
	CampaignType string
	Arguments    string
	CanceledAt   pq.NullTime
	UpdatedAt    time.Time
	ID           int64
}

type UpdateCampaignPlanRow struct {
	ID           int64
	CampaignType string
	Arguments    string
	CanceledAt   pq.NullTime
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) UpdateCampaignPlan(ctx context.Context, arg UpdateCampaignPlanParams) ([]UpdateCampaignPlanRow, error) {
	rows, err := q.db.QueryContext(ctx, updateCampaignPlan,
		arg.CampaignType,
		arg.Arguments,
		arg.CanceledAt,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UpdateCampaignPlanRow
	for rows.Next() {
		var i UpdateCampaignPlanRow
		if err := rows.Scan(
			&i.ID,
			&i.CampaignType,
			&i.Arguments,
			&i.CanceledAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChangesetJob = `-- name: UpdateChangesetJob :many
UPDATE changeset_jobs
SET (
  campaign_id,
  campaign_job_id,
  changeset_id,
  error,
  started_at,
  finished_at,
  updated_at
) = ($1, $2, $3, $4, $5, $6, $7)
WHERE id = $8
RETURNING
  id,
  campaign_id,
  campaign_job_id,
  changeset_id,
  error,
  started_at,
  finished_at,
  created_at,
  updated_at
`

type UpdateChangesetJobParams struct {
	CampaignID    int64
	CampaignJobID int64
	ChangesetID   sql.NullInt64
	Error         sql.NullString
	StartedAt     pq.NullTime
	FinishedAt    pq.NullTime
	UpdatedAt     time.Time
	ID            int64
}

type UpdateChangesetJobRow struct {
	ID            int64
	CampaignID    int64
	CampaignJobID int64
	ChangesetID   sql.NullInt64
	Error         sql.NullString
	StartedAt     pq.NullTime
	FinishedAt    pq.NullTime
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) UpdateChangesetJob(ctx context.Context, arg UpdateChangesetJobParams) ([]UpdateChangesetJobRow, error) {
	rows, err := q.db.QueryContext(ctx, updateChangesetJob,
		arg.CampaignID,
		arg.CampaignJobID,
		arg.ChangesetID,
		arg.Error,
		arg.StartedAt,
		arg.FinishedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UpdateChangesetJobRow
	for rows.Next() {
		var i UpdateChangesetJobRow
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.CampaignJobID,
			&i.ChangesetID,
			&i.Error,
			&i.StartedAt,
			&i.FinishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
