// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package dependencyrepos

import (
	"context"
	"sync"

	dbstore "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/stores/dbstore"
	api "github.com/sourcegraph/sourcegraph/internal/api"
	database "github.com/sourcegraph/sourcegraph/internal/database"
	protocol "github.com/sourcegraph/sourcegraph/internal/repoupdater/protocol"
	types "github.com/sourcegraph/sourcegraph/internal/types"
)

// MockDBStore is a mock implementation of the DBStore interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/cmd/worker/internal/codeintel/dependencyrepos)
// used for unit testing.
type MockDBStore struct {
	// InsertCloneableDependencyReposFunc is an instance of a mock function
	// object controlling the behavior of the method
	// InsertCloneableDependencyRepos.
	InsertCloneableDependencyReposFunc *DBStoreInsertCloneableDependencyReposFunc
	// ListExternalServicesFunc is an instance of a mock function object
	// controlling the behavior of the method ListExternalServices.
	ListExternalServicesFunc *DBStoreListExternalServicesFunc
	// ReferencesForUploadFunc is an instance of a mock function object
	// controlling the behavior of the method ReferencesForUpload.
	ReferencesForUploadFunc *DBStoreReferencesForUploadFunc
}

// NewMockDBStore creates a new mock of the DBStore interface. All methods
// return zero values for all results, unless overwritten.
func NewMockDBStore() *MockDBStore {
	return &MockDBStore{
		InsertCloneableDependencyReposFunc: &DBStoreInsertCloneableDependencyReposFunc{
			defaultHook: func(context.Context, []dbstore.DependencyRepoInfo) error {
				return nil
			},
		},
		ListExternalServicesFunc: &DBStoreListExternalServicesFunc{
			defaultHook: func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error) {
				return nil, nil
			},
		},
		ReferencesForUploadFunc: &DBStoreReferencesForUploadFunc{
			defaultHook: func(context.Context, int) (dbstore.PackageReferenceScanner, error) {
				return nil, nil
			},
		},
	}
}

// NewMockDBStoreFrom creates a new mock of the MockDBStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockDBStoreFrom(i DBStore) *MockDBStore {
	return &MockDBStore{
		InsertCloneableDependencyReposFunc: &DBStoreInsertCloneableDependencyReposFunc{
			defaultHook: i.InsertCloneableDependencyRepos,
		},
		ListExternalServicesFunc: &DBStoreListExternalServicesFunc{
			defaultHook: i.ListExternalServices,
		},
		ReferencesForUploadFunc: &DBStoreReferencesForUploadFunc{
			defaultHook: i.ReferencesForUpload,
		},
	}
}

// DBStoreInsertCloneableDependencyReposFunc describes the behavior when the
// InsertCloneableDependencyRepos method of the parent MockDBStore instance
// is invoked.
type DBStoreInsertCloneableDependencyReposFunc struct {
	defaultHook func(context.Context, []dbstore.DependencyRepoInfo) error
	hooks       []func(context.Context, []dbstore.DependencyRepoInfo) error
	history     []DBStoreInsertCloneableDependencyReposFuncCall
	mutex       sync.Mutex
}

// InsertCloneableDependencyRepos delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockDBStore) InsertCloneableDependencyRepos(v0 context.Context, v1 []dbstore.DependencyRepoInfo) error {
	r0 := m.InsertCloneableDependencyReposFunc.nextHook()(v0, v1)
	m.InsertCloneableDependencyReposFunc.appendCall(DBStoreInsertCloneableDependencyReposFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// InsertCloneableDependencyRepos method of the parent MockDBStore instance
// is invoked and the hook queue is empty.
func (f *DBStoreInsertCloneableDependencyReposFunc) SetDefaultHook(hook func(context.Context, []dbstore.DependencyRepoInfo) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InsertCloneableDependencyRepos method of the parent MockDBStore instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *DBStoreInsertCloneableDependencyReposFunc) PushHook(hook func(context.Context, []dbstore.DependencyRepoInfo) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBStoreInsertCloneableDependencyReposFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, []dbstore.DependencyRepoInfo) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBStoreInsertCloneableDependencyReposFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, []dbstore.DependencyRepoInfo) error {
		return r0
	})
}

func (f *DBStoreInsertCloneableDependencyReposFunc) nextHook() func(context.Context, []dbstore.DependencyRepoInfo) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreInsertCloneableDependencyReposFunc) appendCall(r0 DBStoreInsertCloneableDependencyReposFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// DBStoreInsertCloneableDependencyReposFuncCall objects describing the
// invocations of this function.
func (f *DBStoreInsertCloneableDependencyReposFunc) History() []DBStoreInsertCloneableDependencyReposFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreInsertCloneableDependencyReposFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreInsertCloneableDependencyReposFuncCall is an object that describes
// an invocation of method InsertCloneableDependencyRepos on an instance of
// MockDBStore.
type DBStoreInsertCloneableDependencyReposFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 []dbstore.DependencyRepoInfo
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreInsertCloneableDependencyReposFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreInsertCloneableDependencyReposFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// DBStoreListExternalServicesFunc describes the behavior when the
// ListExternalServices method of the parent MockDBStore instance is
// invoked.
type DBStoreListExternalServicesFunc struct {
	defaultHook func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error)
	hooks       []func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error)
	history     []DBStoreListExternalServicesFuncCall
	mutex       sync.Mutex
}

// ListExternalServices delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDBStore) ListExternalServices(v0 context.Context, v1 database.ExternalServicesListOptions) ([]*types.ExternalService, error) {
	r0, r1 := m.ListExternalServicesFunc.nextHook()(v0, v1)
	m.ListExternalServicesFunc.appendCall(DBStoreListExternalServicesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ListExternalServices
// method of the parent MockDBStore instance is invoked and the hook queue
// is empty.
func (f *DBStoreListExternalServicesFunc) SetDefaultHook(hook func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListExternalServices method of the parent MockDBStore instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *DBStoreListExternalServicesFunc) PushHook(hook func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBStoreListExternalServicesFunc) SetDefaultReturn(r0 []*types.ExternalService, r1 error) {
	f.SetDefaultHook(func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBStoreListExternalServicesFunc) PushReturn(r0 []*types.ExternalService, r1 error) {
	f.PushHook(func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error) {
		return r0, r1
	})
}

func (f *DBStoreListExternalServicesFunc) nextHook() func(context.Context, database.ExternalServicesListOptions) ([]*types.ExternalService, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreListExternalServicesFunc) appendCall(r0 DBStoreListExternalServicesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBStoreListExternalServicesFuncCall objects
// describing the invocations of this function.
func (f *DBStoreListExternalServicesFunc) History() []DBStoreListExternalServicesFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreListExternalServicesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreListExternalServicesFuncCall is an object that describes an
// invocation of method ListExternalServices on an instance of MockDBStore.
type DBStoreListExternalServicesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 database.ExternalServicesListOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.ExternalService
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreListExternalServicesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreListExternalServicesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// DBStoreReferencesForUploadFunc describes the behavior when the
// ReferencesForUpload method of the parent MockDBStore instance is invoked.
type DBStoreReferencesForUploadFunc struct {
	defaultHook func(context.Context, int) (dbstore.PackageReferenceScanner, error)
	hooks       []func(context.Context, int) (dbstore.PackageReferenceScanner, error)
	history     []DBStoreReferencesForUploadFuncCall
	mutex       sync.Mutex
}

// ReferencesForUpload delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockDBStore) ReferencesForUpload(v0 context.Context, v1 int) (dbstore.PackageReferenceScanner, error) {
	r0, r1 := m.ReferencesForUploadFunc.nextHook()(v0, v1)
	m.ReferencesForUploadFunc.appendCall(DBStoreReferencesForUploadFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the ReferencesForUpload
// method of the parent MockDBStore instance is invoked and the hook queue
// is empty.
func (f *DBStoreReferencesForUploadFunc) SetDefaultHook(hook func(context.Context, int) (dbstore.PackageReferenceScanner, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReferencesForUpload method of the parent MockDBStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *DBStoreReferencesForUploadFunc) PushHook(hook func(context.Context, int) (dbstore.PackageReferenceScanner, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *DBStoreReferencesForUploadFunc) SetDefaultReturn(r0 dbstore.PackageReferenceScanner, r1 error) {
	f.SetDefaultHook(func(context.Context, int) (dbstore.PackageReferenceScanner, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *DBStoreReferencesForUploadFunc) PushReturn(r0 dbstore.PackageReferenceScanner, r1 error) {
	f.PushHook(func(context.Context, int) (dbstore.PackageReferenceScanner, error) {
		return r0, r1
	})
}

func (f *DBStoreReferencesForUploadFunc) nextHook() func(context.Context, int) (dbstore.PackageReferenceScanner, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *DBStoreReferencesForUploadFunc) appendCall(r0 DBStoreReferencesForUploadFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of DBStoreReferencesForUploadFuncCall objects
// describing the invocations of this function.
func (f *DBStoreReferencesForUploadFunc) History() []DBStoreReferencesForUploadFuncCall {
	f.mutex.Lock()
	history := make([]DBStoreReferencesForUploadFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// DBStoreReferencesForUploadFuncCall is an object that describes an
// invocation of method ReferencesForUpload on an instance of MockDBStore.
type DBStoreReferencesForUploadFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 dbstore.PackageReferenceScanner
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c DBStoreReferencesForUploadFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c DBStoreReferencesForUploadFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// MockRepoUpdaterClient is a mock implementation of the RepoUpdaterClient
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/cmd/worker/internal/codeintel/dependencyrepos)
// used for unit testing.
type MockRepoUpdaterClient struct {
	// SyncExternalServiceFunc is an instance of a mock function object
	// controlling the behavior of the method SyncExternalService.
	SyncExternalServiceFunc *RepoUpdaterClientSyncExternalServiceFunc
}

// NewMockRepoUpdaterClient creates a new mock of the RepoUpdaterClient
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockRepoUpdaterClient() *MockRepoUpdaterClient {
	return &MockRepoUpdaterClient{
		SyncExternalServiceFunc: &RepoUpdaterClientSyncExternalServiceFunc{
			defaultHook: func(context.Context, api.ExternalService) (*protocol.ExternalServiceSyncResult, error) {
				return nil, nil
			},
		},
	}
}

// NewMockRepoUpdaterClientFrom creates a new mock of the
// MockRepoUpdaterClient interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockRepoUpdaterClientFrom(i RepoUpdaterClient) *MockRepoUpdaterClient {
	return &MockRepoUpdaterClient{
		SyncExternalServiceFunc: &RepoUpdaterClientSyncExternalServiceFunc{
			defaultHook: i.SyncExternalService,
		},
	}
}

// RepoUpdaterClientSyncExternalServiceFunc describes the behavior when the
// SyncExternalService method of the parent MockRepoUpdaterClient instance
// is invoked.
type RepoUpdaterClientSyncExternalServiceFunc struct {
	defaultHook func(context.Context, api.ExternalService) (*protocol.ExternalServiceSyncResult, error)
	hooks       []func(context.Context, api.ExternalService) (*protocol.ExternalServiceSyncResult, error)
	history     []RepoUpdaterClientSyncExternalServiceFuncCall
	mutex       sync.Mutex
}

// SyncExternalService delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockRepoUpdaterClient) SyncExternalService(v0 context.Context, v1 api.ExternalService) (*protocol.ExternalServiceSyncResult, error) {
	r0, r1 := m.SyncExternalServiceFunc.nextHook()(v0, v1)
	m.SyncExternalServiceFunc.appendCall(RepoUpdaterClientSyncExternalServiceFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the SyncExternalService
// method of the parent MockRepoUpdaterClient instance is invoked and the
// hook queue is empty.
func (f *RepoUpdaterClientSyncExternalServiceFunc) SetDefaultHook(hook func(context.Context, api.ExternalService) (*protocol.ExternalServiceSyncResult, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SyncExternalService method of the parent MockRepoUpdaterClient instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *RepoUpdaterClientSyncExternalServiceFunc) PushHook(hook func(context.Context, api.ExternalService) (*protocol.ExternalServiceSyncResult, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *RepoUpdaterClientSyncExternalServiceFunc) SetDefaultReturn(r0 *protocol.ExternalServiceSyncResult, r1 error) {
	f.SetDefaultHook(func(context.Context, api.ExternalService) (*protocol.ExternalServiceSyncResult, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *RepoUpdaterClientSyncExternalServiceFunc) PushReturn(r0 *protocol.ExternalServiceSyncResult, r1 error) {
	f.PushHook(func(context.Context, api.ExternalService) (*protocol.ExternalServiceSyncResult, error) {
		return r0, r1
	})
}

func (f *RepoUpdaterClientSyncExternalServiceFunc) nextHook() func(context.Context, api.ExternalService) (*protocol.ExternalServiceSyncResult, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *RepoUpdaterClientSyncExternalServiceFunc) appendCall(r0 RepoUpdaterClientSyncExternalServiceFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// RepoUpdaterClientSyncExternalServiceFuncCall objects describing the
// invocations of this function.
func (f *RepoUpdaterClientSyncExternalServiceFunc) History() []RepoUpdaterClientSyncExternalServiceFuncCall {
	f.mutex.Lock()
	history := make([]RepoUpdaterClientSyncExternalServiceFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// RepoUpdaterClientSyncExternalServiceFuncCall is an object that describes
// an invocation of method SyncExternalService on an instance of
// MockRepoUpdaterClient.
type RepoUpdaterClientSyncExternalServiceFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 api.ExternalService
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *protocol.ExternalServiceSyncResult
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c RepoUpdaterClientSyncExternalServiceFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c RepoUpdaterClientSyncExternalServiceFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
